<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xen.Ex</name>
    </assembly>
    <members>
        <member name="T:Xen.Ex.SphericalHarmonicL2RGB">
             <summary>
             <para>A structure storing a 9 constant (L2) RGB sperhical harmonic. See remarks for details.</para>
             <para>An L2 SH is significantly more accurate than an L1 SH, however it is also significantly more complex to calculate and display.</para>
             </summary>
             <remarks><para>L1 and L2 Spherical harmonics are useful for storing approximate lighiting information.</para>
             <para>They work by storing the an approximation of of a lighting function over a sphere.<br/>
             Where as most approximations work in one or two dimensions (for example, approximations to sin/cos), a sherical harmonic is an approximation of an RGB (red/blue/green) function that maps to a sphere.<br/> 
             The most common use of an L2 spherical harmonic is to efficiently encode directional lighting information at a point. Another method to achieve this would be to use a Cube Map. 
             An SH works well as a substitute, as it typically will use much less data, and produces a smoother output.</para>
             <para>Spherical harmonics also have the advantage they can be efficiently added together, multiplied, lerped, etc.</para>
             <para>An example of how an SH can be used to store lighting information:<br/>
             In a game, it may be desirable that an object is lit by multiple nearby lights. However, it may be too inefficient to light the object with every light.<br/>
             An approximation to this lighting, would be to use a SH. Given the centre point of the object, if there are 8 lights nearby, then call <see cref="M:Xen.Ex.SphericalHarmonicL2RGB.AddLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)"/> once for each light.
             This will store the approximate contribution of that light (for it's given direction) in the SH function. Sampling the SH (usually in the vertex shader) will produce an approximation for the input lights, however it will be much cheaper than sampling each light for every pixel.</para>
             <para>Consider the following code example:</para>
             <example>
             <code>
            		SphericalHarmonicL2RGB sh = new SphericalHarmonicL2RGB();
            		
            		//Add light to the SH, coming from the positive X direction
            		Vector3 light = new Vector3(1,1,1);
            		Vector3 direction = new Vector3(1,0,0);
            		sh.AddLight(light, direction, 1);
            
            		//Sample the SH function in three directions.
            		Vector3 lightPosX = sh.SampleDirection(new Vector3(1, 0, 0));
            		Vector3 lightNegX = sh.SampleDirection(new Vector3(-1, 0, 0));
            		Vector3 lightPosY = sh.SampleDirection(new Vector3(0, 1, 0));
             </code></example>
             <para>In the above example, white RGB light in the positive X direction is added to an blank SH.<br/>
             The SH is then sampled three times, in the positive / negative X axis, and also the Y axis.<br/>
             The output of the SH will be very close to (1,1,1) in the positive X axis (as is desired, as this is the direction of the input light).<br/>
             The output of the SH in the negative X and positive Y axis will be close to zero (as no light is coming from these directions).<br/>
             Note, the outputs will not be <i>exactly</i> one or zero (as it's an approximation!).</para>
             <para>Note that AddLight can be called as often as desired, which is useful to accumulate ligth from multiple sources.</para>
             <para>
             The following Shader code can be used to sample an SH stored in GPU format (see <see cref="M:Xen.Ex.SphericalHarmonicL2RGB.CopyToGpuArray(Microsoft.Xna.Framework.Vector4[])"/>):<br/>
             <code>
             
             //storage for the Spherical Harmonic
            	float4 SH[9];
            
            	float3 SampleSH(float3 normal)
            	{
            		//optional:
            		normal = normalize(normal); // either make sure the input is normalised, or normalise here.
            		
            		float3 sample =
            			SH[0].xyz + 
            			SH[1].xyz * normal.x +  
            			SH[2].xyz * normal.y + 
            			SH[3].xyz * normal.z + 
            			SH[4].xyz * (normal.x * normal.y) +
            			SH[5].xyz * (normal.y * normal.z) + 
            			SH[6].xyz * (normal.x * normal.z) + 
            			SH[7].xyz * ((normal.z * normal.z) - (1.0f / 3.0f)) + 
            			SH[8].xyz * ((normal.x * normal.x) - (normal.y * normal.y));
            			
            		//optional:
            		sample = max(0,sample);		// clamp to zero, it's possible for the SH approximation to output negative values
            		
            		return sample;
            	}
             </code></para></remarks>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH0">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH1">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH2">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH3">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH4">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH5">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH6">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH7">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.SH8">
            <summary>
            Spherical Harmonic RGB Constant
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL2RGB.Weighting">
            <summary>
            <para>Accumulated weighting value. This value is provided as a helper to make averaging easier. It stores accumulated weighting values from calls to AddLight.</para>
            <para>See <see cref="M:Xen.Ex.SphericalHarmonicL2RGB.AddLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)"/> for further details.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.CopyToGpuArray(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            <para>Store the SH constants in a Vector4 array (The vector array must have a length of 9)</para>
            <para>Note, the W values in the output array are not used (they are written as Zero). If desired, these values can be used for other data.</para>
            <para>See <see cref="T:Xen.Ex.SphericalHarmonicL2RGB"/> remarks for example shader code to sample the SH.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.CopyToGpuArray(Microsoft.Xna.Framework.Vector4[],System.Int32)">
            <summary>
            <para>Store the SH constants in a Vector4 array (The vector array must have a length of 9)</para>
            <para>Note, the W values in the output array are not used (they are written as Zero). If desired, these values can be used for other data.</para>
            <para>See <see cref="T:Xen.Ex.SphericalHarmonicL2RGB"/> remarks for example shader code to sample the SH.</para>
            </summary>
            <param name="l2SphericalHarmonicGpuFormatArray"></param>
            <param name="offset">Offset into the array to begin writing the SH</param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.Add(Xen.Ex.SphericalHarmonicL2RGB@,Xen.Ex.SphericalHarmonicL2RGB@,Xen.Ex.SphericalHarmonicL2RGB@)">
            <summary>
            Add two spherical harmonics together
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.Multiply(Xen.Ex.SphericalHarmonicL2RGB@,System.Single,Xen.Ex.SphericalHarmonicL2RGB@)">
            <summary>
            Multiply a spherical harmonic by a constant scale factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.Divide(Xen.Ex.SphericalHarmonicL2RGB@,System.Single,Xen.Ex.SphericalHarmonicL2RGB@)">
            <summary>
            Divide a spherical harmonic by a constant factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.Lerp(Xen.Ex.SphericalHarmonicL2RGB@,Xen.Ex.SphericalHarmonicL2RGB@,System.Single,Xen.Ex.SphericalHarmonicL2RGB@)">
            <summary>
            Linear interpolate (Lerp) between two spherical harmonics based on a interpolation factor
            </summary>
            <param name="factor">Determines the interpolation point. When factor is 1.0, the output will be <paramref name="x"/>, when factor is 0.0, the output will be <paramref name="y"/></param>
            <param name="result"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.op_Addition(Xen.Ex.SphericalHarmonicL2RGB,Xen.Ex.SphericalHarmonicL2RGB)">
            <summary>
            Add two spherical harmonics together
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.op_Multiply(Xen.Ex.SphericalHarmonicL2RGB,System.Single)">
            <summary>
            Multiply a spherical harmonic by a constant scale factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.op_Division(Xen.Ex.SphericalHarmonicL2RGB,System.Single)">
            <summary>
            Divide a spherical harmonic by a constant factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.AddLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            <para>Add light from a given direction to the SH function. See the <see cref="T:Xen.Ex.SphericalHarmonicL2RGB"/> remarks for further details on how an SH can be used to approximate lighting.</para>
            <para>Input light (<paramref name="inputRGB"/>) will be multiplied by <paramref name="weight"/>, and <paramref name="weight"/> will be added to <see cref="F:Xen.Ex.SphericalHarmonicL2RGB.Weighting"/></para>
            </summary>
            <param name="inputRGB">Input light intensity in RGB (usually gamma space) format for the given direction</param>
            <param name="normalisedDirection">Normalised (length must be one) direction of the incoming light</param>
            <param name="weight">Weighting for this light, usually 1.0f. Use this value, and <see cref="F:Xen.Ex.SphericalHarmonicL2RGB.Weighting"/> if averaging a large number of lighting samples (eg, when converting a cube map to an SH)</param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.AddLight(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            <para>Add light from a given direction to the SH function. See the <see cref="T:Xen.Ex.SphericalHarmonicL2RGB"/> remarks for further details on how an SH can be used to approximate lighting.</para>
            <para>Input light (<paramref name="inputRGB"/>) will be multiplied by <paramref name="weight"/>, and <paramref name="weight"/> will be added to <see cref="F:Xen.Ex.SphericalHarmonicL2RGB.Weighting"/></para>
            </summary>
            <param name="inputRGB">Input light intensity in RGB (usually gamma space) format for the given direction</param>
            <param name="normalisedDirection">Normalised (length must be one) direction of the incoming light</param>
            <param name="weight">Weighting for this light, usually 1.0f. Use this value, and <see cref="F:Xen.Ex.SphericalHarmonicL2RGB.Weighting"/> if averaging a large number of lighting samples (eg, when converting a cube map to an SH)</param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.SampleDirection(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sample the SH in the given normalised (length = 1) direction. See <see cref="T:Xen.Ex.SphericalHarmonicL2RGB"/> remarks for further details.
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.GetWeightedAverageLightInputFromSphere">
            <summary>
            <para>Use this function after accumulating multiple lights with the AddLight method.</para>
            <para>This method averages all the calls to AddLight() based on the accumulated weighting, assuming they were light input over a sphere.</para>
            <para>For example, if generating a spherical harmonic from a cube map, treat each pixel as a light source by calling AddLight(), then call this method to get the average for entire the sphere.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.GenerateSphericalHarmonicFromCubeMap(Microsoft.Xna.Framework.Vector3[][])">
            <summary>
            Generate a spherical harmonic from the faces of a cubemap, treating each pixel as a light source and averaging the result.
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL2RGB.GenerateSphericalHarmonicFromCubeMap(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Generate a spherical harmonic from the faces of a cubemap, treating each pixel as a light source and averaging the result.
            </summary>
        </member>
        <member name="T:Xen.Ex.SphericalHarmonicL1RGB">
            <summary>
            <para>A structure storing a 4 constant (L1) RGB sperhical harmonic. See remarks for details.</para>
            <para>An L1 SH is less accurate than an L2 SH, but significantly faster to calculate and display.</para>
            </summary>
            <remarks><para>L1 and L2 Spherical harmonics are useful for storing approximate lighiting information.</para>
            <para>They work by storing the an approximation of of a lighting function over a sphere.<br/>
            Where as most approximations work in one or two dimensions (for example, approximations to sin/cos), a sherical harmonic is an approximation of an RGB (red/blue/green) function that maps to a sphere.<br/> 
            The most common use of an L1 or L2 spherical harmonic is to efficiently encode directional lighting information at a point. Another method to achieve this would be to use a Cube Map. 
            An SH works well as a substitute, as it typically will use much less data, and produces a smoother output.</para>
            <para>Spherical harmonics also have the advantage they can be efficiently added together, multiplied, lerped, etc.</para>
            <para>An example of how an SH can be used to store lighting information:<br/>
            In a game, it may be desirable that an object is lit by multiple nearby lights. However, it may be too inefficient to light the object with every light.<br/>
            An approximation to this lighting, would be to use a SH. Given the centre point of the object, if there are 8 lights nearby, then call <see cref="M:Xen.Ex.SphericalHarmonicL1RGB.AddLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)"/> once for each light.
            This will store the approximate contribution of that light (for it's given direction) in the SH function. Sampling the SH (usually in the vertex shader) will produce an approximation for the input lights, however it will be much cheaper than sampling each light for every pixel.</para>
            <para>There are two ways to decode the SH, either as an array or a matrix:</para>
            <para>
            The following Shader code can be used to sample an SH stored in GPU matrix format (see <see cref="M:Xen.Ex.SphericalHarmonicL1RGB.GetMatrix4x3(Microsoft.Xna.Framework.Matrix@)"/>):<br/>
            <code>
            //storage for the Spherical Harmonic
            float4x3 SH;
            
            float3 SampleSH(float3 normal)
            {
            	//optional:
            	normal = normalize(normal); // either make sure the input is normalised, or normalise here.
            	
            	return mul(float4(normal,1),SH);
            }
            </code></para></remarks>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL1RGB.Red">
            <summary>
            Spherical Harmonic RGB Constants
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL1RGB.Blue">
            <summary>
            Spherical Harmonic RGB Constants
            </summary>
        </member>
        <member name="F:Xen.Ex.SphericalHarmonicL1RGB.Green">
            <summary>
            Spherical Harmonic RGB Constants
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.GetMatrix4x3(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the L1 SH in a float4x3 compatible format for use in a shader
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.Add(Xen.Ex.SphericalHarmonicL1RGB@,Xen.Ex.SphericalHarmonicL1RGB@,Xen.Ex.SphericalHarmonicL1RGB@)">
            <summary>
            Add two spherical harmonics together
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.Multiply(Xen.Ex.SphericalHarmonicL1RGB@,System.Single,Xen.Ex.SphericalHarmonicL1RGB@)">
            <summary>
            Multiply a spherical harmonic by a constant scale factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.Divide(Xen.Ex.SphericalHarmonicL1RGB@,System.Single,Xen.Ex.SphericalHarmonicL1RGB@)">
            <summary>
            Divide a spherical harmonic by a constant factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.Lerp(Xen.Ex.SphericalHarmonicL1RGB@,Xen.Ex.SphericalHarmonicL1RGB@,System.Single,Xen.Ex.SphericalHarmonicL1RGB@)">
            <summary>
            Linear interpolate (Lerp) between two spherical harmonics based on a interpolation factor
            </summary>
            <param name="factor">Determines the interpolation point. When factor is 1.0, the output will be <paramref name="x"/>, when factor is 0.0, the output will be <paramref name="y"/></param>
            <param name="result"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.op_Addition(Xen.Ex.SphericalHarmonicL1RGB,Xen.Ex.SphericalHarmonicL1RGB)">
            <summary>
            Add two spherical harmonics together
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.op_Multiply(Xen.Ex.SphericalHarmonicL1RGB,System.Single)">
            <summary>
            Multiply a spherical harmonic by a constant scale factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.op_Division(Xen.Ex.SphericalHarmonicL1RGB,System.Single)">
            <summary>
            Divide a spherical harmonic by a constant factor
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.AddLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            <para>Add light from a given direction to the SH function. See the <see cref="T:Xen.Ex.SphericalHarmonicL1RGB"/> remarks for further details on how an SH can be used to approximate lighting.</para>
            </summary>
            <param name="inputRGB">Input light intensity in RGB (usually gamma space) format for the given direction</param>
            <param name="normalisedDirection">Normalised (length must be one) direction of the incoming light</param>
            <param name="weight">Scaling factor for the input light</param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.AddLight(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            <para>Add light from a given direction to the SH function. See the <see cref="T:Xen.Ex.SphericalHarmonicL1RGB"/> remarks for further details on how an SH can be used to approximate lighting.</para>
            <para>Input light (<paramref name="inputRGB"/>) will be multiplied by <paramref name="weight"/></para>
            </summary>
            <param name="inputRGB">Input light intensity in RGB (usually gamma space) format for the given direction</param>
            <param name="normalisedDirection">Normalised (length must be one) direction of the incoming light</param>
            <param name="weight">Scaling factor for the input light</param>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.SampleDirection(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sample the SH in the given normalised (length = 1) direction. See <see cref="T:Xen.Ex.SphericalHarmonicL1RGB"/> remarks for further details.
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.GenerateSphericalHarmonicFromCubeMap(Microsoft.Xna.Framework.Vector3[][])">
            <summary>
            Generate a spherical harmonic from the faces of a cubemap, treating each pixel as a light source and averaging the result.
            </summary>
        </member>
        <member name="M:Xen.Ex.SphericalHarmonicL1RGB.GenerateSphericalHarmonicFromCubeMap(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Generate a spherical harmonic from the faces of a cubemap, treating each pixel as a light source and averaging the result.
            </summary>
        </member>
        <member name="T:Xen.Ex.Shaders.FillVertexColour">
            <summary><para>Technique 'FillVertexColour' generated from file 'Simple.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.#ctor">
            <summary>Construct an instance of the 'FillVertexColour' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillVertexColour.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.sc1">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.sc2">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillVertexColour.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.FillVertexColour.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Shaders.FillSolidColour">
            <summary><para>Technique 'FillSolidColour' generated from file 'Simple.fx'</para><para>Vertex Shader: approximately 4 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 1 register</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.#ctor">
            <summary>Construct an instance of the 'FillSolidColour' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.cid0">
            <summary>Name ID for 'FillColour'</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.SetFillColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 FillColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.sc1">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.sc2">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.FillSolidColour.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.FillSolidColour.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Shaders.FillSolidColour.FillColour">
            <summary>Assign the shader value 'float4 FillColour'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.FillSolidColour.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.InstancingSprite">
            <summary><para>Technique 'InstancingSprite' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 34 instruction slots used, 8 registers</para><para>Pixel Shader: approximately 3 instruction slots used (1 texture, 2 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.#ctor">
            <summary>Construct an instance of the 'InstancingSprite' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.vreg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.cid0">
            <summary>Name ID for 'spriteWorldMatrix'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.SetSpriteWorldMatrix(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x4 spriteWorldMatrix'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.sc0">
            <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.InstancingSprite.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.InstancingSprite.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics2D.InstancingSprite.SpriteWorldMatrix">
            <summary>Assign the shader value 'float4x4 spriteWorldMatrix'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.InstancingSprite.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.InstancingSprite.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.InstancingSprite.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.NonInstancingSprite">
            <summary><para>Technique 'NonInstancingSprite' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 47 instruction slots used, 244 registers</para><para>Pixel Shader: approximately 3 instruction slots used (1 texture, 2 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.#ctor">
            <summary>Construct an instance of the 'NonInstancingSprite' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.cid0">
            <summary>Name ID for 'instances'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.SetInstances(Microsoft.Xna.Framework.Matrix[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4x4 instances[60]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.NonInstancingSprite.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix[])">
            <summary>Set a shader attribute of type 'Matrix[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.NonInstancingSprite.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics2D.NonInstancingSprite.Instances">
            <summary>Set and copy the array data for the shader value 'float4x4 instances[60]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.NonInstancingSprite.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.NonInstancingSprite.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.NonInstancingSprite.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.GeometryBounds">
            <summary>
            A structure storing bounding box and bounding sphere data
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.GeometryBounds.#ctor(System.IO.BinaryReader)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.GeometryBounds.#ctor(Xen.Ex.Graphics.Content.GeometryBounds[])">
            <summary>builds a geometry bounds that encompasses a set of bounds</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.GeometryBounds.Transform(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            <para>Transforms the bounds by a matrix, generating a new bounds</para>
            <para>The output bounds is axis aligned</para>
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryBounds.Minimum">
            <summary>
            Bounding Box Minimum extents
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryBounds.Maximum">
            <summary>
            Bounding Box Maximum extents
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryBounds.RadiusCentre">
            <summary>
            Bounding sphere centre point
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryBounds.Radius">
            <summary>
            Bounding sphere radius
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ModelData">
            <summary>
            Content class for a model imported using the xen model importer
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.StaticBounds">
            <summary>
            Gets the bounding box for the non-animated model data
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.Name">
            <summary>
            Name of the model
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.Meshes">
            <summary>
            Gets a readonly array of <see cref="T:Xen.Ex.Graphics.Content.MeshData"/> instances stored in the model data
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.Animations">
            <summary>
            Gets a readonly array of animations stored in the model
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.Skeleton">
            <summary>
            Gets the skeleton used by this model (this value may be null)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ModelData.AnimationStaticBoundsOffset">
            <summary>
            <para>Gets bounds offsets for each animation (assuming animation has a weighting of 1.0f)</para>
            <para>This offset is primarily used to adjust the bounding box of a model when an animation is playing</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.MeshData">
            <summary>
            Stores content data for a mesh defined within a model
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MeshData.StaticBounds">
            <summary>
            Gets the bounding box for the non-animated mesh data
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MeshData.Geometry">
            <summary>
            Gets a readonly array of the geometry stored in this mesh
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MeshData.Name">
            <summary>
            Gets the name of this mesh
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MeshData.AnimationStaticBoundsOffset">
            <summary>
            <para>Gets bounds offsets for each animation (assuming animation has a weighting of 1.0f)</para>
            <para>This offset is primarily used to adjust the bounding box of a model when an animation is playing</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.MaterialData">
            <summary>
            Structure storing the material properties of a <see cref="T:Xen.Ex.Graphics.Content.GeometryData"/> instance
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.Alpha">
            <summary>Alpha channel value</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.SpecularPower">
            <summary>Light specular (shine) reflection power. Higher numbers produce more focused specular reflections</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.DiffuseColour">
            <summary>Light diffuse reflection colour</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.EmissiveColour">
            <summary>Light emittance</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.SpecularColour">
            <summary>Light specular reflection colour</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.UseVertexColour">
            <summary>Modulate output colour by the vertex colour</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.Texture">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.NormalMap">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.TextureFileName">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.MaterialData.NormalMapFileName">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.GeometryData">
            <summary>
            This class stores geometry data, such as vertex buffers and material
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.GeometryData.MaterialData">
            <summary>
            Get the stored material data for this geometry
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.AnimationStaticBoundsOffset">
            <summary>
            <para>Gets bounds offsets for each animation (assuming animation has a weighting of 1.0f)</para>
            <para>This offset is primarily used to adjust the bounding box of a model when an animation is playing</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.BoneIndices">
            <summary>
            Gets the indices of the bones this geometry uses
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.BoneLocalBounds">
            <summary>
            <para>Gets the bone-local bounds for this geometry (based on <see cref="P:Xen.Ex.Graphics.Content.GeometryData.BoneIndices"/>)</para>
            <para>These bounds could be used as collision detection bounding boxes</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.Vertices">
            <summary>
            Gets the vertices used to draw this geometry
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.Indices">
            <summary>
            Gets the indicies used to draw this geometry
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.Name">
            <summary>
            Gets the name of this geometry
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.GeometryData.Index">
            <summary>
            Linear index of this geometry data in the root model data
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.AnimationData">
            <summary>
            Stores animation data for a model
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.AnimationData.ClearAnimationStreamCache">
            <summary>
            <para>As animations are played, their playback streams are cached to reduce garbage collection and allocation.</para>
            <para>Call this method to clear the animation stream cache</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.AnimationData.GetBoneCompressedTransformStream(System.Int32)">
            <summary>
            <para>Returns a stream for reading compressed <see cref="T:Xen.Transform"/> data for an animation stream. Read bone transform data using a <see cref="T:Xen.Ex.Compression.CompressedTransformReader"/></para>
            <para>NOTE: Xen 1.5 decodes some complex animation streams at load time. If this method returns null, the <see cref="T:Xen.Transform"/> stream has already been decompressed (see <see cref="M:Xen.Ex.Graphics.Content.AnimationData.TryGetBoneDecompressedTransforms(System.Int32,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform}@)"/>).</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.AnimationData.TryGetBoneDecompressedTransforms(System.Int32,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform}@)">
            <summary>
            <para>Gets bone transform data that was decompressed at load time (simple animation streams are not decompressed at load time)</para>
            <para>Returns true if the stream was decompressed. Use <see cref="M:Xen.Ex.Graphics.Content.AnimationData.GetBoneCompressedTransformStream(System.Int32)"/> to get the compressed transform stream</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.KeyFrameCount">
            <summary>
            Get the number of keyframes stored within this animation
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.AnimationIndex">
            <summary>
            Get the index of this animation (eg, 0 if this is the first animation in the model)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.BoneCount">
            <summary>
            Get the number of bones used in this animation
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.BoneIndices">
            <summary>
            Gets a readonly array of bone indices for each of the bones used by this model (this array will have a length of <see cref="P:Xen.Ex.Graphics.Content.AnimationData.BoneCount"/>)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.KeyFrameTime">
            <summary>
            Gets a readonly array of time values for keyframes in the animation
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.Duration">
            <summary>
            Gets the duration of the animation, in seconds
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AnimationData.Name">
            <summary>
            Gets the name of the animation
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.SkeletonData">
            <summary>
            Stores data about a skeleton structure used by an animated model
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.SkeletonData.TransformHierarchy(Xen.Transform[])">
            <summary>
            Transforms a hierarchy of local bone transforms into world space bone transforms
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.SkeletonData.TransformHierarchy(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Transforms a hierarchy of local bone transforms into world space bone transforms
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.SkeletonData.TransformHierarchyInverse(Xen.Transform[])">
            <summary>
            Applies the inverse of the <see cref="M:Xen.Ex.Graphics.Content.SkeletonData.TransformHierarchy(Xen.Transform[])"/> method. (This operation is considerably slower and should not be performed at runtime)
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.SkeletonData.GetBoneIndexByName(System.String)">
            <summary>
            Performs a linear search to find the bone matching the given name, -1 if not found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.SkeletonData.BoneCount">
            <summary>
            Gets the bone count of this skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.SkeletonData.BoneLocalTransform">
            <summary>
            Gets a readonly array of Transforms representing the local bone space transform of each bone in the skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.SkeletonData.BoneWorldTransforms">
            <summary>
            Gets a readonly array of Transforms representing the world space transform of each bone in the skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.SkeletonData.BoneWorldInverseTransforms">
            <summary>
            Gets a readonly array of Transforms representing the inverse world space transform of each bone in the skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.SkeletonData.BoneData">
            <summary>
            Gets a readonly array of BoneData for each bone (eg, data storing names and children)
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.BoneData">
            <summary>
            Stores data about a skeleton bone
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.BoneData.Name">
            <summary>
            Gets the name of this bone
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.BoneData.Index">
            <summary>
            Gets the index of this bone in the skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.BoneData.Parent">
            <summary>
            Gets the index of this bone's parent in the skeleton
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.BoneData.Children">
            <summary>
            Gets a readonly array of the indices of each child connected to this bone
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.BillboardParticles3D">
            <summary>
            <para>Draws 3D particles as Billboard Sprites (With rotation based on screen space projection)</para>
            <para>For use with a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/> instance.</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.ParticleDrawer3D">
            <summary>
            Abstract base class that displays a particle system in 3D
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.IParticleSystemDrawer">
            <summary>
            Interface to a class than can display particles
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draw GPU processed particles (this method is called internally)
            </summary>
            <param name="state"></param><param name="particleType"></param><param name="count"></param>
            <param name="colour"></param><param name="positionSize"></param><param name="userValues"></param><param name="velocityRotation"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Draw CPU processed particles (this method is called internally)
            </summary>
            <param name="state"></param><param name="particleType"></param><param name="count"></param><param name="positionSize"></param>
            <param name="velocityRotation"></param><param name="colour"></param><param name="userValues"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.SetParticleTypeDrawMask(Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing a specific particle type
            </summary>
            <param name="particleType"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.SetParticleTypeDrawMask(System.Int32,System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing a specific particle type
            </summary>
            <param name="particleTypeIndex"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.SetParticleTypeDrawMask(System.String,System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing a specific particle type by name
            </summary>
            <param name="particleTypeName"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.IParticleSystemDrawer.SetParticleTypeDrawMaskAllTypes(System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing of all particle types
            </summary>
            <param name="draw"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.IParticleSystemDrawer.ParticleSystem">
            <summary>
            Gets the particle system for this drawer
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.IParticleSystemDrawer.Enabled">
            <summary>
            Gets/Sets if this drawer is enabled
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.#ctor(Xen.Ex.Graphics.ParticleSystem)">
            <summary>
            Construct the particle system drawer
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.SetParticleTypeDrawMask(System.String,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleTypeName"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.SetParticleTypeDrawMask(Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleType"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.SetParticleTypeDrawMask(System.Int32,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleTypeIndex"></param><param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.SetParticleTypeDrawMaskAllTypes(System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing of all particle types
            </summary><param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.CullTest(Xen.ICuller)">
            <summary>
            Run a cull test using the optional <see cref="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.CullProxy"/>
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.Draw(Xen.DrawState)">
            <summary>
            Draw the particle system
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            <para>Method to override to draw 3D particles</para>
            <para>Note: When 'usesUserValuesPositionBuffer' is true, the values 'user1, user2 and user3' (yzw in the UserTexture) store a position offset for the particle</para></summary>
            <param name="state"></param><param name="particleType"></param><param name="count"></param><param name="blendMode"></param>
            <param name="positionSize"></param><param name="velocityRotation"></param><param name="colour"></param><param name="userValues"></param><param name="usesUserValuesPositionBuffer"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer3D.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            This method is only present on Windows builds
            </summary>
            <param name="blendMode"></param><param name="colour"></param><param name="count"></param><param name="particleType"></param>
            <param name="positionSize"></param><param name="state"></param><param name="userValues"></param><param name="velocityRotation"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.ParticleSystem">
            <summary>
            Get the partile system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.Enabled">
            <summary>
            Gets/Sets if this particle system drawer is enabled (visible)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.CullProxy">
            <summary>
            <para>Gets/Sets a culling proxy, to cull test this particle system</para>
            <para>Due to their nature, particle systems do not know their bouding voumes, so cannot cull test themselves</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.AlphaBlendState">
            <summary>
            <para>Set this property to a non-null value to override the blend state defined in the particle XML</para>
            <para>Note: All particle drawers perform RGB * Alpha modulation in the pixel shader, <see cref="P:Xen.Graphics.AlphaBlendState.SourceBlend"/> should be set <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One"/> in place of <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha"/>.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles3D.#ctor(Xen.Ex.Graphics.ParticleSystem)">
            <summary>
            Construct the Billboard Drawer
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles3D.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            <para>implements the method to draw gpu particles</para>
            <para>Note: When 'usesUserValuesPositionBuffer' is true, the values 'user1, user2 and user3' (yzw in the UserTexture) store a position offset for the particle</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles3D.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            <para>implements the method to draw cpu particles</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.BatchModel">
            <summary>
            <para>Draws <see cref="T:Xen.Ex.Graphics.BatchModelInstance"/> objects in a batch, using <see cref="P:Xen.Ex.Graphics.BatchModel.ModelData"/> loaded through the content pipeline</para>
            <para>Note: BatchModel does not support model animation</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.BatchModel.Draw(Xen.DrawState)">
            <summary>
            Draw all the model batch instances
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.BatchModel.ShaderProvider">
            <summary>
            Extend the <see cref="T:Xen.Ex.Graphics.IModelShaderProvider"/> interface to set the shaders used by this model instance
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.BatchModel.ModelData">
            <summary>
            <see cref="P:Xen.Ex.Graphics.BatchModel.ModelData"/> used by this batch model. ModelData content must be assigned before the batch or an instance is drawn
            </summary>
            <remarks>ModelData may only be assigned once per batch instance</remarks>
        </member>
        <member name="P:Xen.Ex.Graphics.BatchModel.LightCollection">
            <summary>
            Gets/Sets the lights collection used by any material shaders loaded with the model
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.BatchModelInstance">
            <summary>
            <para>Represents an instance of a model, drawn with a <see cref="T:Xen.Ex.Graphics.BatchModel"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.BatchModelInstance.#ctor(Xen.Ex.Graphics.BatchModel)">
            <summary>
            Construct the batch model instance
            </summary>
            <param name="model">The BatchModel that will draw this instance</param>
        </member>
        <member name="M:Xen.Ex.Graphics.BatchModelInstance.Draw(Xen.DrawState)">
            <summary>
            Draw this instance of the BatchModel
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.BatchModelInstance.CullTest(Xen.ICuller)">
            <summary>
            Cull test this instance of the BatchModel
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.BatchModelInstance.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Cull test this instance of the BatchModel
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.ElementRect">
            <summary>
            Abstract class for a 2D element storing position size and scaling information.
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.Element">
            <summary>
            Base abstract class for a 2D element. <see cref="T:Xen.Ex.Graphics2D.ElementRect"/> extends the class with size and scaling information
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.SetParentToThis(Xen.Ex.Graphics2D.Element)">
            <summary>
            Set the parent of <paramref name="element"/> to this
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.ResetParent(Xen.Ex.Graphics2D.Element)">
            <summary>
            Set parent to null
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.GetDisplayMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the world matrix used to display this element. Defalut implementation generates a 2D matrix based on size and scale
            </summary>
            <param name="matrix"></param>
            <param name="scale"></param>
            <param name="elementSize"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.WriteTextureCoords(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Writes the default texture coordinates for this element
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.WriteColours(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <summary>
            Writes the default colours for this element
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.Draw(Xen.DrawState)">
            <summary>
            Draw the element
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.TryGetLayout(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Xen.Graphics.DrawTarget)">
            <summary>
            <para>Attempt to get the layout (position and size) of this element</para>
            <para>The draw target the element is draw to must be specified</para>
            <para>Note this operation can be quite expensive if performed multiple times per frame</para>
            </summary>
            <param name="position"></param>
            <param name="size"></param>
            <param name="drawTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.TryGetLayout(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2)">
            <summary>
            <para>Attempt to get the layout (position and size) of this element</para>
            <para>The size of the draw target the element is being drawn to must be specified</para>
            <para>Note this operation can be quite expensive if performed multiple times per frame</para>
            </summary>
            <param name="position"></param>
            <param name="size"></param>
            <param name="drawTargetSize"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.DrawElement(Xen.DrawState)">
            <summary>
            Override to implement draw logic
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary>
            <para>Override to implement logic that occurs before the element is drawn, such as dirtying the element if it's size has changed</para>
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Element.BindShader(Xen.DrawState,System.Boolean)">
            <summary>
            Override to bind the shader used by drawing. If <paramref name="maskOnly"/> is true, the element is being drawn as a stencil mask
            </summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.Children">
            <summary>
            Gets an optional list of children for the element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.WriteToDepth">
            <summary>
            Gets/Sets if this element should write to depth
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.AlphaBlendState">
            <summary>
            Gets/Sets the alpha blend mode for this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.VerticalAlignment">
            <summary>
            Gets/Sets the vertical alignment of this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.HorizontalAlignment">
            <summary>
            Gets/Sets the horizontal alignment of this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.Visible">
            <summary>
            Gets/Sets if this element is visible
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.Parent">
            <summary>
            Gets the parent of this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.Position">
            <summary>
            <para>Gets/Sets the position of this element</para>
            <para>Measured in pixels, from the bottom left. Note: Normalized elements are measured in [0,1] range, not exact pixel count</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.ClipsChildren">
            <summary>
            Override and return true to clip children
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.IsNormalised">
            <summary>
            Override and return true to normalise the element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.UseSize">
            <summary>
            Override and return false if this element does not have a size (default is true)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Element.ElementSize">
            <summary>
            Override to return the size of the element
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.#ctor(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the rect
            </summary>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.Add(Xen.Ex.Graphics2D.Element)">
            <summary>
            Add a child element to this element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.Remove(Xen.Ex.Graphics2D.Element)">
            <summary>
            Remove a child element from this element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.GetDisplayMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary></summary>
            <param name="matrix"></param>
            <param name="scale"></param>
            <param name="elementSize"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates vertex data when dirty
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.SetDirty">
            <summary>
            Set the element as dirty (vertex buffers will be updated)
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ElementRect.SizeChanged">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.Children">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.VerticalScaling">
            <summary>
            Gets/Sets the vertical scaling logic of this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.HorizontalScaling">
            <summary>
            Gets/Sets the horizontal scaling logic of this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.DrawAtMaxZDepth">
            <summary>
            <para>When true, the element will be displayed at a Z depth of 1.0 (maximum), with depth testing enabled</para>
            <para>When true, this element will be occluded by any 3D object that has been drawn</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.NormalisedCoordinates">
            <summary>
            If true, the stored coordinates are in the range [0,1]. When false, the coordinates are in pixels
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.ElementSize">
            <summary>
            Gets the size of the element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.ClipsChildren">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.IsNormalised">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.ClipChildren">
            <summary>
            Visibly clip children to this element using the stencil buffer. NOTE: requires an 8bit stencil buffer, and assumes the stencil buffer is cleared before drawing root elements.
            </summary>
            <remarks>Stencil buffer is reset to zero once rendering is complete.</remarks>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ElementRect.Size">
            <summary>
            <para>Gets/Sets the size of this element.</para>
            <para>Measured in pixels, if <see cref="P:Xen.Ex.Graphics2D.ElementRect.NormalisedCoordinates"/> is true then the size is measured in the range [0,1]</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.Statistics.Graph">
            <summary>
            An element that displays a graph with a title
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="name"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="samples"></param>
            <param name="fontHeight"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary></summary>
            <param name="name"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="samples"></param>
            <param name="fontHeight"></param>
            <param name="minScale"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single)">
            <summary></summary>
            <param name="name"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="samples"></param>
            <param name="fontHeight"></param>
            <param name="font"></param>
            <param name="minScale"></param>
            <param name="goodValue">The value that determines the transition from green to red on the graph</param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.ResetAllGraphValues">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.SetGraphValue(System.Single)">
            <summary>Set the next value in the graph</summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.Graph.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.Graph.Font">
            <summary>
            Gets/Sets the graph font
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay">
            <summary>
            <para>[Debug mode only] Displays various statistics gathered from the previous rendered frame</para>
            <para>Xen 1.5: Only the most important graphs are displayed by default, to display a full listing of all graphs, set <see cref="P:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.DisplayFullGraphList"/> to true.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.#ctor(Xen.UpdateManager)">
            <summary>Construct the statistics display</summary>
            <param name="manager"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.#ctor(Xen.UpdateManager,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>Construct the statistics display</summary>
            <param name="manager"></param>
            <param name="font"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.Draw(Xen.DrawState)">
            <summary>
            Draw the statistics
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.ToggleGraphs(Xen.Application)">
            <summary>
            Toggle the graphs on/off
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.DisplayFullGraphList">
            <summary>
            Gets/Sets if all graphs should be displayed (by default, a subset of the default graphs are displayed)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.DebugToggleKey">
            <summary>
            Gets/Sets the key used to toggle the graphs
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.DrawStatisticsDisplay.Font">
            <summary>
            Gets/Sets the font used by the display
            </summary>
        </member>
        <member name="T:Xen.Ex.Compression.CompressedTransformReader">
            <summary>
            Reads compressed <see cref="T:Xen.Transform"/> values from a stream written by a <see cref="T:Xen.Ex.Compression.CompressedTransformWriter"/>
            </summary>
            <remarks>
            <para>This object is not compatible with a <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter"/> written stream</para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformReader.Reset">
            <summary>
            Reset the reader to it's default state
            </summary>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformReader.MoveNext(System.IO.BinaryReader)">
            <summary>
            Read the next value in the stream. Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable
            </summary>
            <param name="reader"></param>
            <returns>Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable</returns>
            <seealso cref="M:Xen.Ex.Compression.CompressedTransformReader.GetTransform(Xen.Transform@)"/>
            <remarks><para>Where possible, prefer using the byte[] version of this method</para></remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformReader.MoveNext(System.Byte[],System.Int32@)">
            <summary>
            Read the next value from a data array. Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable
            </summary>
            <param name="sourceData"></param>
            <returns>Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable</returns>
            <param name="index">index in the source data to begin reading (this value will be modified to indicated how many bytes were read)</param>
            <remarks><para>This method will most likely be more efficient than the <see cref="T:System.IO.BinaryReader"/> version</para></remarks>
            <seealso cref="M:Xen.Ex.Compression.CompressedTransformReader.GetTransform(Xen.Transform@)"/>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformReader.GetTransform(Xen.Transform@)">
            <summary>
            Get the most recently read transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="T:Xen.Ex.Compression.CompressedTransformAccelerationReader">
            <summary>
            Reads compressed <see cref="T:Xen.Transform"/> values from a stream written by a <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter"/>
            </summary>
            <remarks>
            <para>This object is not compatible with a <see cref="T:Xen.Ex.Compression.CompressedTransformWriter"/> written stream</para>
            <para>The <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter"/> and <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationReader"/> have higher overhead than the <see cref="T:Xen.Ex.Compression.CompressedTransformWriter"/> and <see cref="T:Xen.Ex.Compression.CompressedTransformReader"/></para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.Reset">
            <summary>
            Reset the reader to it's default state
            </summary>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.MoveNext(System.IO.BinaryReader)">
            <summary>
            Read the next value in the stream. Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable
            </summary>
            <param name="reader"></param>
            <returns>Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable</returns>
            <seealso cref="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.GetTransform(Xen.Transform@)"/>
            <remarks><para>Where possible, prefer using the byte[] version of this method</para></remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.MoveNext(System.Byte[],System.Int32@)">
            <summary>
            Read the next value from a data array. Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable
            </summary>
            <returns>Returns true if there is a new <see cref="T:Xen.Transform"/> avaliable</returns>
            <param name="index">index in the source data to begin reading (this value will be modified to indicated how many bytes were read)</param>
            <remarks><para>This method will most likely be more efficient than the <see cref="T:System.IO.BinaryReader"/> version</para></remarks>
            <param name="sourceData"></param>
            <seealso cref="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.GetTransform(Xen.Transform@)"/>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationReader.GetTransform(Xen.Transform@)">
            <summary>
            Get the most recently read transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="T:Xen.Ex.Compression.CompressedTransformWriter">
            <summary>
            <para>Writes a series of <see cref="T:Xen.Transform"/> structures to a binary stream, using lossy/lossless data compression</para>
            <para>Prefer using this method of compression over <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter"/> for input data with rapidly changing, less predictable movement (commonly for animation data)</para>
            <para>Redundant values are skipped and packed data types are used where possible</para>
            <para>Compression levels are based on specified compression tolerances</para>
            </summary>
            <remarks>
            <para>Tolerance values may be changed at will, this will not corrupt data already written/about to be written</para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.#ctor">
            <summary>
            <para>Construct the writer with default values of:</para>
            <para>ScaleTolerance = 0.025</para>
            <para>TranslateTolerance = 0.01</para>
            <para>RotationTolerance = 0.001</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct the writer
            </summary>
            <param name="scaleTolerance"></param>
            <param name="translateTolerance"></param>
            <param name="rotationTolerance"></param>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.WriteUncompressed(Xen.Transform@,System.IO.BinaryWriter)">
            <summary>
            Writes the entire transformation uncompressed. Normally the change in transform is written, relying on the previous value. (Writes 34 bytes)
            </summary>
            <remarks><para>This method can be used to 'reset' the compression stream.</para></remarks>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.WriteUncompressed(Xen.Transform,System.IO.BinaryWriter)">
            <summary>
            Writes the entire transformation uncompressed. Normally the change in transform is written, relying on the previous value. Returns the number of bytes written (which is always 34 for this method)
            </summary>
            <remarks><para>This method can be used to 'reset' the compression stream.</para></remarks>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.EndWriting(System.IO.BinaryWriter)">
            <summary>
            <para>Write the final bytes that are needed to complete writing a series of transforms. Returns the number of bytes that were written</para>
            </summary>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.EndWriting(System.Byte[],System.Int32@)">
            <summary>
            <para>Write the final bytes that are needed to complete writing a series of transforms. Returns the number of bytes that were written</para>
            </summary>
            <param name="index"></param>
            <param name="writeTarget"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.Write(Xen.Transform@,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Write the transform to the stream. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="writer"></param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.Write(Xen.Transform,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Write the transform to the stream. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="writer"></param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.Write(Xen.Transform@,System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Write the transform to a byte[] buffer. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="index">index to begin writing to the buffer</param>
            <param name="writeTarget">buffer that transform data will be written to (this buffer should be at least 34 bytes in length)</param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformWriter.Write(Xen.Transform,System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Write the transform to a byte[] buffer. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="index">index to begin writing to the buffer</param>
            <param name="writeTarget">buffer that transform data will be written to (this buffer should be at least 34 bytes in length)</param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformWriter.ScaleTolerance">
            <summary>
            Gets/Sets the scale tolerance. This is the amount the scale needs to change for a new value to be compressed to the stream. Set to 0 for lossless writing
            </summary>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformWriter.TranslateTolerance">
            <summary>
            Gets/Sets the translate tolerance. This is the amount an translate x/y/z needs to change for a new value to be compressed to the stream. Set to 0 for lossless writing
            </summary>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformWriter.RotationTolerance">
            <summary>
            Gets/Sets the rotation tolerance. Rotations are stored as normalised vectors. This tolerance is for the change in a component of the vector. The maximum value is 0.5. However this would produce very infrequent rotations. 
            </summary>
        </member>
        <member name="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter">
            <summary>
            <para>Writes a series of <see cref="T:Xen.Transform"/> structures to a binary stream as deltas, using lossy/lossless data compression</para>
            <para>Prefer using this method of compression over <see cref="T:Xen.Ex.Compression.CompressedTransformWriter"/> for input data with smooth consistent movement that doesn't change velocity much over many samples, such as player movement</para>
            <para>Redundant values are skipped and packed data types are used where possible</para>
            <para>Compression levels are based on specified compression tolerances</para>
            </summary>
            <remarks>
            <para>Tolerance values may be changed at will, this will not corrupt data already written/about to be written</para>
            <para>The <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationWriter"/> and <see cref="T:Xen.Ex.Compression.CompressedTransformAccelerationReader"/> have higher overhead than the <see cref="T:Xen.Ex.Compression.CompressedTransformWriter"/> and <see cref="T:Xen.Ex.Compression.CompressedTransformReader"/></para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.#ctor">
            <summary>
            <para>Construct the writer with default values of:</para>
            <para>ScaleTolerance = 0.025</para>
            <para>TranslateTolerance = 0.01</para>
            <para>RotationTolerance = 0.001</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct the writer
            </summary>
            <param name="scaleTolerance"></param>
            <param name="translateTolerance"></param>
            <param name="rotationTolerance"></param>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.WriteUncompressed(Xen.Transform@,System.IO.BinaryWriter)">
            <summary>
            Writes the entire transformation uncompressed. Normally the change in transform is written, relying on the previous value. (Writes 34 bytes)
            </summary>
            <remarks><para>This method can be used to 'reset' the compression stream.</para></remarks>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.WriteUncompressed(Xen.Transform,System.IO.BinaryWriter)">
            <summary>
            Writes the entire transformation uncompressed. Normally the change in transform is written, relying on the previous value. Returns the number of bytes written (which is always 34 for this method)
            </summary>
            <remarks><para>This method can be used to 'reset' the compression stream.</para></remarks>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.EndWriting(System.IO.BinaryWriter)">
            <summary>
            <para>Write the final bytes that are needed to complete writing a series of transforms. Returns the number of bytes that were written</para>
            </summary>
            <param name="writer"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.EndWriting(System.Byte[],System.Int32@)">
            <summary>
            <para>Write the final bytes that are needed to complete writing a series of transforms. Returns the number of bytes that were written</para>
            </summary>
            <param name="index"></param>
            <param name="writeTarget"></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.Write(Xen.Transform@,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Write the transform to the stream. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="writer"></param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.Write(Xen.Transform,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Write the transform to the stream. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="writer"></param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.Write(Xen.Transform@,System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Write the transform to a byte[] buffer. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="index">index to begin writing to the buffer</param>
            <param name="writeTarget">buffer that transform data will be written to (this buffer should be at least 34 bytes in length)</param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="M:Xen.Ex.Compression.CompressedTransformAccelerationWriter.Write(Xen.Transform,System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Write the transform to a byte[] buffer. Returns the number of bytes, if any, that were written
            </summary>
            <param name="transform"></param>
            <param name="index">index to begin writing to the buffer</param>
            <param name="writeTarget">buffer that transform data will be written to (this buffer should be at least 34 bytes in length)</param>
            <param name="forceWrite"><para>If true, the method call will always write at least 1 byte</para><para>When false, multiple identical transforms may be represented with a write of a single byte at the end of the sequence</para></param>
            <returns>Returns the number of bytes written</returns>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformAccelerationWriter.ScaleTolerance">
            <summary>
            Gets/Sets the scale tolerance. This is the amount the scale needs to change for a new value to be compressed to the stream. Set to 0 for lossless writing
            </summary>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformAccelerationWriter.TranslateTolerance">
            <summary>
            Gets/Sets the translate tolerance. This is the amount an translate x/y/z needs to change for a new value to be compressed to the stream. Set to 0 for lossless writing
            </summary>
        </member>
        <member name="P:Xen.Ex.Compression.CompressedTransformAccelerationWriter.RotationTolerance">
            <summary>
            Gets/Sets the rotation tolerance. Rotations are stored as normalised vectors. This tolerance is for the change in a component of the vector. The maximum value is 0.5. However this would produce very infrequent rotations. 
            </summary>
        </member>
        <member name="T:Xen.Ex.Scene.DepthDrawSorter">
            <summary>
            <para>This class will draw a list of objects in sorted order, drawing them in either back-to-front or front-to-back order</para>
            <para>NOTE: Sorting order is based on the CullTests performed by the items. Items that do not perform a CullTest through an <see cref="T:Xen.ICuller"/> will not be sorted</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.DepthDrawSorter.#ctor(Xen.Ex.Scene.DepthSortMode)">
            <summary></summary>
            <param name="sortMode">Sorting mode, either front to back, or back to front</param>
        </member>
        <member name="M:Xen.Ex.Scene.DepthDrawSorter.Add(Xen.IDraw)">
            <summary>
            Add an item to the sorter
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Xen.Ex.Scene.DepthDrawSorter.Clear">
            <summary>
            Removes all items from the sorter
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.DepthDrawSorter.Remove(Xen.IDraw)">
            <summary>
            <para>Removes an item from the sorter (Performs a linear search of the sorter to find the item)</para>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Xen.Ex.Scene.DepthDrawSorter.Draw(Xen.DrawState)">
            <summary>
            Draw the items in sorted order
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Xen.Ex.Scene.DepthDrawSorter.Visible">
            <summary>
            Gets/Sets if this sorter, and it's children, shall be drawn
            </summary>
        </member>
        <member name="P:Xen.Ex.Scene.DepthDrawSorter.SortMode">
            <summary>
            Gets/Sets the sorting mode for this drawer
            </summary>
        </member>
        <member name="P:Xen.Ex.Scene.DepthDrawSorter.SortDelayFrameCount">
            <summary>
            <para>Set this value to 5 to perform the sort once every 6 frames (sort is delayed by 5 frames)</para>
            <para>Set this value to 0 to sort every frame (default), etc.</para>
            <para>This can be used to reduce the CPU load of the sorter</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Scene.DepthSortMode">
            <summary>
            Sorting mode for a <see cref="T:Xen.Ex.Scene.DepthDrawSorter"/>
            </summary>
        </member>
        <member name="F:Xen.Ex.Scene.DepthSortMode.BackToFront">
            <summary>
            <para>Items are drawn back first, with the closest items drawn last</para>
            <para>Use this mode for effects such as alpha blending, that can produce different results when drawn in different orders</para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Scene.DepthSortMode.FrontToBack">
            <summary>
            <para>Items are drawn front first, with the furthest items drawn last</para>
            <para>Use this mode for reducing overdraw, to improve performance of high-fill rate objects</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.ParticleSystem">
            <summary>
            <para>Loads <see cref="P:Xen.Ex.Graphics.ParticleSystem.ParticleSystemData"/> content and processes logic required to update a particle system.</para>
            <para>Per-Particle logic is performed by a particle processor class (either a CPU or GPU particle processor)</para>
            <para>Note: This class does not directly Draw a particle system, it only runs the logic to update a particle system</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.#ctor(Xen.Ex.Graphics.Content.ParticleSystemData,Xen.UpdateManager)">
            <summary>
            Construct a particle system with data
            </summary>
            <param name="systemData"></param>
            <param name="update"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.#ctor(Xen.UpdateManager)">
            <summary>
            Construct the particle system. Before the particle system is used, the <see cref="P:Xen.Ex.Graphics.ParticleSystem.ParticleSystemData"/> must be set
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.GetTriggerByName(System.String)">
            <summary>
            <para>Gets a particle system trigger by name, as defined in the particle system</para>
            <para>Triggers can be fired by the application to spawn particles on demand</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.GetToggleTriggerByName(System.String)">
            <summary>
            <para>Gets a particle system toggle trigger by name, as defined in the particle system</para>
            <para>Toggle Triggers can be turned on and off by the application to spawn particles on demand</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.GetParticleTypeByName(System.String)">
            <summary>
            Performs a linear search to find the particle system type data with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.GetParticleCount(System.Int32)">
            <summary>
            Gets the number of individual particles in use by a particle type
            </summary>
            <param name="particleType"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.Warm(Xen.DrawState)">
            <summary>
            Warms the particle system (preloads any resources used)
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.Warm(Xen.Application)">
            <summary>
            Warms the particle system (preloads any resources used)
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ParticleSystem.Dispose">
            <summary>
            Dispose this particle system, unloading resources created by it's processor and storage children
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.PauseUpdatingWhileCulled">
            <summary>
            <para>If true, the ParticleSystem will pause updating when nothing is currently drawing the particle system (default false)</para>
            <para>Setting this to true is recommended for looping effects that may not always have their displayers on screen</para>
            <para>Note: 3D Displays require thier <see cref="P:Xen.Ex.Graphics.Display.ParticleDrawer3D.CullProxy"/> member to be set to perform culling, or to be manually culled by the application</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitPosition">
            <summary>
            Gets/Sets the default position of particle emitted by the particle system (particles emitted in the 'system' xml element)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitVelocity">
            <summary>
            Gets/Sets the default velocity of particle emitted by the particle system (particles emitted in the 'system' xml element)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitColour">
            <summary>
            <para>Gets/Sets the default colour of particle emitted by the particle system (particles emitted in the 'system' xml element)</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitUserValues">
            <summary>
            Gets/Sets the default user values of particle emitted by the particle system (particles emitted in the 'system' xml element)
            <para>Note: Setting default user values for particle systems that do not access user values will have no effect (the user values are optimized out)</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitSize">
            <summary>
            Gets/Sets the default size of particle emitted by the particle system (particles emitted in the 'system' xml element)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.DefaultParticleEmitRotation">
            <summary>
            Gets/Sets the default rotation of particle emitted by the particle system (particles emitted in the 'system' xml element)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.ParticleSystemData">
            <summary>
            <para>Gets/Sets the <see cref="P:Xen.Ex.Graphics.ParticleSystem.ParticleSystemData"/> to be used by this particle system instance.</para>
            <para>This value must be assigned before the particle system can be used.</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.Enabled">
            <summary>
            Gets/Sets if this particle system performs updating
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.Triggers">
            <summary>
            <para>Gets the particle system triggers defined by the particle system</para>
            <para>Triggers can be fired by the application to spawn particles on demand</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.ToggleTriggers">
            <summary>
            <para>Gets the particle system toggle triggers defined by the particle system</para>
            <para>Toggle Triggers can be turned on and off by the application to spawn particles on demand</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.GlobalValues">
            <summary>
            Gets an array of 16 global values accessible by the entire particle system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.ParticleTypeCount">
            <summary>
            Gets the number of particle types in use by this particle system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.IsDisposed">
            <summary>
            True if this particle system has been disposed
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.ForceUseCpuParticleSystem">
            <summary>
            <para>Gets/Sets if particle systems should use the CPU particle processor by default. (Windows Only)</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ParticleSystem.SystemSupportsGpuParticles">
            <summary>
            Returns true if this system supports GPU particle processing (This value is always true on the xbox)
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex">
            <summary><para>Technique 'DrawVelocityParticles_GpuTex' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 39 instruction slots used (4 texture, 35 arithmetic), 6 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_GpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex">
            <summary><para>Technique 'DrawVelocityParticlesColour_GpuTex' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 41 instruction slots used (6 texture, 35 arithmetic), 6 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_GpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset">
            <summary><para>Technique 'DrawVelocityParticles_GpuTex_UserOffset' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 42 instruction slots used (6 texture, 36 arithmetic), 6 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_GpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_GpuTex_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset">
            <summary><para>Technique 'DrawVelocityParticlesColour_GpuTex_UserOffset' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 44 instruction slots used (8 texture, 36 arithmetic), 6 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_GpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.sid4">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_GpuTex_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu">
            <summary><para>Technique 'DrawVelocityParticles_BillboardCpu' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 28 instruction slots used, 165 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_BillboardCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.cid0">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.cid1">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.cid2">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_BillboardCpu.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu">
            <summary><para>Technique 'DrawVelocityParticlesColour_BillboardCpu' generated from file 'VelocityBillboard.fx'</para><para>Vertex Shader: approximately 28 instruction slots used, 245 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_BillboardCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.cid0">
            <summary>Name ID for 'colourData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetColourData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 colourData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.cid1">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.cid2">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.cid3">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.ColourData">
            <summary>Set and copy the array data for the shader value 'float4 colourData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_BillboardCpu.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs0">
            <summary><para>Technique 'vs0' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 30 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.#ctor">
            <summary>Construct an instance of the 'vs0' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs0.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs1">
            <summary><para>Technique 'vs1' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 55 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.#ctor">
            <summary>Construct an instance of the 'vs1' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.cid2">
            <summary>Name ID for 'v_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetV_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.cid3">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.cid4">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs1.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.V_lights">
            <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs3">
            <summary><para>Technique 'vs3' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 69 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.#ctor">
            <summary>Construct an instance of the 'vs3' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.cid2">
            <summary>Name ID for 'v_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetV_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.cid3">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.cid4">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs3.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.V_lights">
            <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs0c">
            <summary><para>Technique 'vs0c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 32 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.#ctor">
            <summary>Construct an instance of the 'vs0c' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs0c.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs0c.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs0c.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs1c">
            <summary><para>Technique 'vs1c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 57 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.#ctor">
            <summary>Construct an instance of the 'vs1c' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.cid2">
            <summary>Name ID for 'v_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetV_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.cid3">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.cid4">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs1c.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs1c.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.V_lights">
            <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs1c.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.vs3c">
            <summary><para>Technique 'vs3c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 71 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.#ctor">
            <summary>Construct an instance of the 'vs3c' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.cid2">
            <summary>Name ID for 'v_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetV_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.cid3">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.cid4">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.vs3c.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.vs3c.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.V_lights">
            <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.vs3c.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.ps1n">
            <summary><para>Technique 'ps1n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.#ctor">
            <summary>Construct an instance of the 'ps1n' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.cid4">
            <summary>Name ID for 'p_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetP_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.sid2">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.tid1">
            <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1n.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1n.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.P_lights">
            <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomNormalMapSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomNormalMap">
            <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1n.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.ps2n">
            <summary><para>Technique 'ps2n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.#ctor">
            <summary>Construct an instance of the 'ps2n' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.cid4">
            <summary>Name ID for 'p_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetP_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.sid2">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.tid1">
            <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2n.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2n.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.P_lights">
            <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomNormalMapSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomNormalMap">
            <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2n.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.ps1nc">
            <summary><para>Technique 'ps1nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.#ctor">
            <summary>Construct an instance of the 'ps1nc' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.cid4">
            <summary>Name ID for 'p_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetP_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.sid2">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.tid1">
            <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps1nc.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps1nc.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.P_lights">
            <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomNormalMapSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomNormalMap">
            <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps1nc.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Material.ps2nc">
            <summary><para>Technique 'ps2nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.#ctor">
            <summary>Construct an instance of the 'ps2nc' shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.cid0">
            <summary>Name ID for 'v_SH'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetV_SH(Microsoft.Xna.Framework.Matrix@)">
            <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.cid1">
            <summary>Name ID for 'v_fogAndAlpha'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetV_fogAndAlpha(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.cid2">
            <summary>Name ID for 'p_EmissiveColour'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetP_EmissiveColour(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.cid3">
            <summary>Name ID for 'p_fogColourAndGamma'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetP_fogColourAndGamma(Microsoft.Xna.Framework.Vector4@)">
            <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.cid4">
            <summary>Name ID for 'p_lights'</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetP_lights(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc0">
            <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc1">
            <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc2">
            <summary>Change ID for Semantic bound attribute 'world'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc3">
            <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc4">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sc5">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sid1">
            <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.sid2">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.tid1">
            <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.tid2">
            <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Material.ps2nc.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Material.ps2nc.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.V_SH">
            <summary>Assign the shader value 'float4x3 v_SH'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.V_fogAndAlpha">
            <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.P_EmissiveColour">
            <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.P_fogColourAndGamma">
            <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.P_lights">
            <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomEmissiveTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomNormalMapSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomNormalMap">
            <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.CustomEmissiveTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Material.ps2nc.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D">
            <summary>
            <para>Draws 3D particles as Billboard Sprites (Rotation is generated per particle)</para>
            <para>Particles will be scaled by thier velocity length, and rotated in the direction they are travelling</para>
            <para>For use with a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/> instance.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.#ctor(Xen.Ex.Graphics.ParticleSystem,System.Boolean,System.Single)">
            <summary>
            Construct the Velocity Billboard particles
            </summary>
            <param name="system"></param>
            <param name="useRotationValueToScaleVelocityEffect"><para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para><para>Allowing per-particle scaling based on velocity</para></param>
            <param name="velocityExtentionScale">Scale factor to extend the particles</param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.#ctor(Xen.Ex.Graphics.ParticleSystem,System.Boolean)">
            <summary>
            Construct the Velocity Billboard particles
            </summary>
            <param name="system"></param>
            <param name="useRotationValueToScaleVelocityEffect"><para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para><para>Allowing per-particle scaling based on velocity</para></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            implements the method to draw gpu particles
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            implements the method to draw cpu processed particles
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.VelocityExtentionScale">
            <summary>
            Gets/Sets a scale factor to control how much the particles are extended by their velocity
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityBillboardParticles3D.UseRotationValueToScaleVelocityEffect">
            <summary>
            <para>Gets/Sets a boolean flag to indicate that the Rotation value will be used to scale the Velocity scaling effect</para>
            <para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData">
            <summary>
            stores the raw data for a particle system shader
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData.CompressedShaderCode">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData.ColourSamplerIndex">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData.UserSamplerIndex">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData.LifeSamplerIndex">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData.#ctor(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary></summary><param name="reader"></param>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.GpuParticleProcessorData">
            <summary>
            Data storage for the GPU particle system shader code
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.OnceShaderData">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.OnceCloneShaderData">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.FrameShaderData">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.FrameMoveShaderData">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.#ctor(Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData,Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData,Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData,Xen.Ex.Graphics.Processor.ParticleSystemCompiledShaderData)">
            <summary></summary>
            <param name="onceShaderData"></param>
            <param name="onceCloneShaderData"></param>
            <param name="frameShaderData"></param>
            <param name="frameMoveShaderData"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.OnceShader">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.OnceCloneShader">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.FrameShader">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessorData.FrameMoveShader">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Scene.CullTestVisualizer">
            <summary>
            <para>This is a very simple class that will draw wireframe outlines of cull tests that have been performed</para>
            <para>This class is intended to be used as a DrawTarget modifier (<see cref="T:Xen.IBeginEndDraw"/>). Add it to a draw target with <see cref="M:Xen.Graphics.DrawTarget.AddModifier(Xen.IBeginEndDraw)"/></para>
            </summary>
            <remarks>
            <para>This class works by acting as both a DrawTarget Modifier and a PostCuller cull test primitive</para>
            <para>A DrawTarget Modifier is setup/shutdown when the DrawTarget begins/finishes rendering. (see <see cref="T:Xen.IBeginEndDraw"/>)</para>
            <para>During the setup phase, this class adds itself as a PostCuller to the DrawTarget (see DrawState.Cullers.PushPostCuller, this allows the class to record the bounding boxes and spheres used for successful CullTests performed</para>
            <para>During the shutdown phase, this class draws the recorded sphers/cubes.</para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Scene.CullTestVisualizer.#ctor">
            <summary>
            <para>Construct the Visualizer. This class displays the cull tests that have been performed.</para>
            <para>Add the constructed instance of this class to a DrawTarget as a Modifier using <see cref="M:Xen.Graphics.DrawTarget.AddModifier(Xen.IBeginEndDraw)"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.CullTestVisualizer.Begin(Xen.DrawState)">
            <summary>
            Begin the modifier (This method is called by the DrawTarget)
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.CullTestVisualizer.End(Xen.DrawState)">
            <summary>
            End the modifier (This method is called by the DrawTarget)
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Xen.Ex.Scene.CullTestVisualizer.Enabled">
            <summary>
            <para>Gets/Set if the visualization is enabled</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Scene.CullTestVisualizer.EnableDepthTesting">
            <summary>
            When false, the displayed cull tests will have depth testing disabled - so they are always visible
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.GpuParticleProcessor">
            <summary>
            Particle processor that peforms all particle logic on the GPU, using 16bit floating point buffers
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.GpuParticleProcessor.Dispose">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessor.ResolutionX">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessor.ResolutionY">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.GpuParticleProcessor.RequiresDrawPass">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.CpuParticleProcessorData">
            <summary>
            <para>Stores data for the CPU particle processor.</para>
            <para>This data is stored as a dynamically loaded .net assembly.</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.CpuParticleProcessorData.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.CpuParticleProcessorData.RuntimeClassName">
            <summary>
            Gets the name of the class in the assembly that stores the particle logic
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.CpuParticleProcessor">
            <summary>
            Particle processor that runs particle logic on the CPU
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.SpriteElement">
            <summary>
            <para>An element that displays many smaller 2D sprites</para>
            <para>Sprite instances can be added with <see cref="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)"/>, modified with <see cref="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Sets the position and size of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCropRect"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCropSize"></param>
            <param name="textureCropTopLeft"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCrop"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the position and of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCropRect"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCropSize"></param>
            <param name="textureCropTopLeft"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSprite(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the position, size and crop rect of a sprite that has been added to this element
            </summary>
            <param name="index">index of the sprite</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="textureCrop"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCropTopLeft"></param>
            <param name="textureCropSize"></param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCropTopLeft"></param>
            <param name="textureCropSize"></param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCropRect">A rectangle as Vector4, in the form (X,Y,Width,Height)</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCropRect">A rectangle as Vector4, in the form (X,Y,Width,Height)</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCrop"></param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <param name="textureCrop"></param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.AddSprite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector4)">
            <summary>
            <para>Add a sprite to this element.</para>
            <para>Returns the index of the added sprite (which can be used to change the sprite later)</para>
            </summary>
            <param name="position">position of the sprite</param>
            <param name="size">size of the sprite</param>
            <param name="colour">colour of the sprite</param>
            <returns>Index of the added sprite (Index can be used to change the sprite later)</returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpritePosition(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Set the position of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="position"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpritePosition(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set the position of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="position"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpritePositions(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Copies in position data for all sprites, using an array
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.GetSpritePosition(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Get the position of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="position"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpriteColour(System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Set the colour of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="colour"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpriteRotation(System.Int32,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Set the rotation of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="rotation">Rotation in radians</param>
            <param name="rotationCentre"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpriteRotation(System.Int32,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set the rotation of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="rotation">Rotation in radians</param>
            <param name="rotationCentre"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpriteRotation(System.Int32,System.Single)">
            <summary>
            Set the rotation of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="rotation">Rotation in radians</param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetSpriteColour(System.Int32,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Set the colour of a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="colour"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.MoveSprite(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Move a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="deltaPosition">position change</param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.MoveSprite(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Move a sprite that has been added to this element
            </summary>
            <param name="index">index of the added sprite</param>
            <param name="deltaPosition">position change</param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.SetTextureAndClear(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            <para>Change the texture used to display sprites</para>
            <para>This operation will also clear all added sprites</para>
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.ClearAllSprites">
            <summary>
            <para>Clear all sprites added to this element</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.RemoveSprite(System.Int32)">
            <summary>
            <para>Removes a single sprite by index</para>
            <para>This method prevents the sprite from drawing, but there is sill cpu setup overhead involved in drawing until <see cref="M:Xen.Ex.Graphics2D.SpriteElement.ClearAllSprites"/> is called</para>
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.RemoveSpriteRange(System.Int32,System.Int32)">
            <summary>
            <para>Removes a range of sprites by index</para>
            <para>This method prevents the sprites from drawing, but there is sill cpu setup overhead involved in drawing until <see cref="M:Xen.Ex.Graphics2D.SpriteElement.ClearAllSprites"/> is called</para>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.RemoveLastSprite(System.Int32)">
            <summary>
            Removes the last sprite from this element
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Construct the sprite element
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.#ctor">
            <summary>
            Construct the sprite element
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SpriteElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.SpriteElement.Texture">
            <summary>
            <para>Gets the texture used to display the sprite</para>
            <para>Use <see cref="M:Xen.Ex.Graphics2D.SpriteElement.SetTextureAndClear(Microsoft.Xna.Framework.Graphics.Texture2D)"/> to change the texture</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.SpriteElement.InstanceCount">
            <summary>
            Gets the number of instances that are drawn (this may be different from the sprite count)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.SpriteElement.ElementSize">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.SpriteElement.UseSize">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.HorizontalAlignment">
            <summary>
            Element alignment
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.HorizontalAlignment.Left">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.HorizontalAlignment.Right">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.HorizontalAlignment.Centre">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.VerticalAlignment">
            <summary>
            Element alignment
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.VerticalAlignment.Bottom">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.VerticalAlignment.Top">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.VerticalAlignment.Centre">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.ElementScaling">
            <summary>
            Element scaling
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.ElementScaling.Normal">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.ElementScaling.FillToParentPlusSize">
            <summary>The element is scaled such that it's displayed size is the size of it's parent plus it's current size</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemHotLoader">
            <summary>
            ParticleSystemHotLoader is an empty shell class in Release and Xbox builds
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemHotLoader.Monitor(Xen.UpdateManager,Xen.Ex.Graphics.ParticleSystem,System.String)">
            <summary>
            ParticleSystemHotLoader is an empty shell class in Release and Xbox builds
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex">
            <summary><para>Technique 'DrawBillboardParticles_GpuTex' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 38 instruction slots used (4 texture, 34 arithmetic), 5 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_GpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex">
            <summary><para>Technique 'DrawBillboardParticlesColour_GpuTex' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 40 instruction slots used (6 texture, 34 arithmetic), 5 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_GpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset">
            <summary><para>Technique 'DrawBillboardParticles_GpuTex_UserOffset' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 41 instruction slots used (6 texture, 35 arithmetic), 5 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_GpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset">
            <summary><para>Technique 'DrawBillboardParticlesColour_GpuTex_UserOffset' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 43 instruction slots used (8 texture, 35 arithmetic), 5 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_GpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.sid4">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu">
            <summary><para>Technique 'DrawBillboardParticles_BillboardCpu' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 26 instruction slots used, 124 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_BillboardCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.cid0">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[120]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[120]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu">
            <summary><para>Technique 'DrawBillboardParticlesColour_BillboardCpu' generated from file 'Billboard.fx'</para><para>Vertex Shader: approximately 26 instruction slots used, 244 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_BillboardCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.cid0">
            <summary>Name ID for 'colourData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.SetColourData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 colourData[120]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.cid1">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[120]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.ColourData">
            <summary>Set and copy the array data for the shader value 'float4 colourData[120]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[120]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.ParticleDrawer2DElement">
            <summary>
            Abstract base class that displays a particle system as a 2D Element
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.#ctor(Xen.Ex.Graphics.ParticleSystem)">
            <summary>
            Construct the particle system drawer
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
             <summary>
            Note: When 'usesUserValuesPositionBuffer' is true, the values 'user1, user2 and user3' (yzw in the UserTexture) store a position offset for the particle 
             </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            This method is only present on Windows builds
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.SetParticleTypeDrawMask(System.String,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleTypeName"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.SetParticleTypeDrawMask(Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleType"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.SetParticleTypeDrawMask(System.Int32,System.Boolean)">
            <summary>
            Mask drawing for a specified particle type (enable or disable drawing of the particle type in the particle system)
            </summary>
            <param name="particleTypeIndex"></param>
            <param name="draw"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.SetParticleTypeDrawMaskAllTypes(System.Boolean)">
            <summary>
            Set a mask bit that will enable/disable drawing of all particle types
            </summary>
            <param name="draw"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.ParticleSystem">
            <summary>
            Gets the particle system for this drawer
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.AlphaBlendState">
            <summary>
            <para>Set this property to a non-null value to override the blend state defined in the particle XML</para>
            <para>Note: All particle drawers perform RGB * Alpha modulation in the pixel shader, <see cref="P:Xen.Graphics.AlphaBlendState.SourceBlend"/> should be set <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One"/> in place of <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha"/>.</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.ElementSize">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.ParticleDrawer2DElement.UseSize">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.BillboardParticles2DElement">
            <summary>
            <para>Draws 2D <see cref="T:Xen.Ex.Graphics2D.Element"/> particles as Billboard Sprites (With rotation)</para>
            <para>For use with a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/> instance.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles2DElement.#ctor(Xen.Ex.Graphics.ParticleSystem)">
            <summary>
            Construct the Billboard Drawer
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles2DElement.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            implements the method to draw gpu particles
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles2DElement.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            implements the method to draw cpu particles
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.BillboardParticles2DElement.GenerateBillboardVertices(Xen.DrawState,Xen.Graphics.IVertices@,Xen.Graphics.IIndices@)">
            <summary>
            Get global vertices/indices for drawing billboards
            </summary>
            <param name="state"></param>
            <param name="vertices"></param>
            <param name="indices"></param>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement">
            <summary>
            <para>Draws 2D particles as Primitive Lines (Textures are ignored)</para>
            <para>Particles lines will be scaled by thier velocity length</para>
            <para>For use with a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/> instance.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.#ctor(Xen.Ex.Graphics.ParticleSystem,System.Boolean)">
            <summary>
            Construct the particle drawer
            </summary>
            <param name="system"></param>
            <param name="useRotationValueToScaleVelocityEffect"><para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para><para>Allowing per-particle scaling based on velocity</para></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            draws the particles on a GPU system
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            draws the particles from a CPU system
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.GenerateLinesVertices(Xen.DrawState,Xen.Graphics.IVertices@)">
            <summary>Generates a vertex buffer used for drawing lines in GPU or CPU batches</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.VelocityExtentionScale">
            <summary>
            Gets/Sets a scale factor to control how much the particles are extended by their velocity
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityLineParticles2DElement.UseRotationValueToScaleVelocityEffect">
            <summary>
            <para>Gets/Sets a boolean flag to indicate that the Rotation value will be used to scale the Velocity effect</para>
            <para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel16">
            <summary><para>Technique 'Kernel16' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 21 instruction slots used, 21 registers</para><para>Pixel Shader: approximately 49 instruction slots used (16 texture, 33 arithmetic), 16 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.#ctor">
            <summary>Construct an instance of the 'Kernel16' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel16.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel16.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel16.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel16.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel16.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel16.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel16.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel8">
            <summary><para>Technique 'Kernel8' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 13 instruction slots used, 13 registers</para><para>Pixel Shader: approximately 17 instruction slots used (8 texture, 9 arithmetic), 8 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.#ctor">
            <summary>Construct an instance of the 'Kernel8' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel8.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel8.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel8.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel8.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel8.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel8.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel8.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel4">
            <summary><para>Technique 'Kernel4' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 9 instruction slots used, 9 registers</para><para>Pixel Shader: approximately 9 instruction slots used (4 texture, 5 arithmetic), 4 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.#ctor">
            <summary>Construct an instance of the 'Kernel4' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel4.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel4.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel4.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel4.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel4.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel4.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel4.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel15">
            <summary><para>Technique 'Kernel15' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 21 instruction slots used, 21 registers</para><para>Pixel Shader: approximately 45 instruction slots used (15 texture, 30 arithmetic), 15 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.#ctor">
            <summary>Construct an instance of the 'Kernel15' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel15.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel15.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel15.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel15.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel15.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel15.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel15.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel7">
            <summary><para>Technique 'Kernel7' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 13 instruction slots used, 13 registers</para><para>Pixel Shader: approximately 15 instruction slots used (7 texture, 8 arithmetic), 7 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.#ctor">
            <summary>Construct an instance of the 'Kernel7' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel7.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel7.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel7.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel7.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel7.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel7.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel7.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel3">
            <summary><para>Technique 'Kernel3' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 9 instruction slots used, 9 registers</para><para>Pixel Shader: approximately 7 instruction slots used (3 texture, 4 arithmetic), 3 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.#ctor">
            <summary>Construct an instance of the 'Kernel3' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel3.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel3.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel3.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel3.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel3.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel3.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel3.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Kernel2">
            <summary><para>Technique 'Kernel2' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 7 instruction slots used, 7 registers</para><para>Pixel Shader: approximately 5 instruction slots used (2 texture, 3 arithmetic), 2 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.#ctor">
            <summary>Construct an instance of the 'Kernel2' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.cid0">
            <summary>Name ID for 'kernel'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetKernel(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 kernel[16]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.cid1">
            <summary>Name ID for 'textureSize'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetTextureSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 textureSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.sid0">
            <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Kernel2.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Kernel2.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel2.Kernel">
            <summary>Set and copy the array data for the shader value 'float3 kernel[16]'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel2.TextureSize">
            <summary>Assign the shader value 'float2 textureSize'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel2.TextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel2.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Kernel2.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Downsample8">
            <summary><para>Technique 'Downsample8' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 13 instruction slots used, 5 registers</para><para>Pixel Shader: approximately 17 instruction slots used (8 texture, 9 arithmetic), 0 registers</para></summary>
        </member>
        <member name="T:Xen.Ex.Filters.IDownsampleShader">
            <summary>
            An interface that must be implemented by custom downsample shaders
            </summary>
        </member>
        <member name="M:Xen.Ex.Filters.IDownsampleShader.SetSampleDirection(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Sets the direction downsampling occurs in
            </summary>
            <param name="direction"></param>
        </member>
        <member name="P:Xen.Ex.Filters.IDownsampleShader.Texture">
            <summary>
            Gets / Sets the texture to be downsampled
            </summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.#ctor">
            <summary>Construct an instance of the 'Downsample8' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.cid0">
            <summary>Name ID for 'sampleDirection'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.SetSampleDirection(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 sampleDirection'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.sid0">
            <summary>Name uid for sampler for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample8.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample8.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample8.SampleDirection">
            <summary>Assign the shader value 'float2 sampleDirection'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample8.PointSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample8.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample8.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Downsample4">
            <summary><para>Technique 'Downsample4' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 9 instruction slots used, 5 registers</para><para>Pixel Shader: approximately 9 instruction slots used (4 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.#ctor">
            <summary>Construct an instance of the 'Downsample4' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.cid0">
            <summary>Name ID for 'sampleDirection'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.SetSampleDirection(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 sampleDirection'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.sid0">
            <summary>Name uid for sampler for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample4.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample4.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample4.SampleDirection">
            <summary>Assign the shader value 'float2 sampleDirection'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample4.PointSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample4.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample4.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Downsample2">
            <summary><para>Technique 'Downsample2' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 7 instruction slots used, 5 registers</para><para>Pixel Shader: approximately 5 instruction slots used (2 texture, 3 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.#ctor">
            <summary>Construct an instance of the 'Downsample2' shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.cid0">
            <summary>Name ID for 'sampleDirection'</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.SetSampleDirection(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 sampleDirection'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.sid0">
            <summary>Name uid for sampler for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.tid0">
            <summary>Name uid for texture for 'Texture2D Texture'</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Downsample2.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Filters.Downsample2.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample2.SampleDirection">
            <summary>Assign the shader value 'float2 sampleDirection'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample2.PointSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PointSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample2.Texture">
            <summary>Get/Set the Bound texture for 'Texture2D Texture'</summary>
        </member>
        <member name="P:Xen.Ex.Filters.Downsample2.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.BitCast">
            <summary>
            A structure that can be used to do bit casting between primitve types
            </summary>
            <remarks>
            <para>For example, to bitwise convert an int to a float:</para>
            <example>
            <code>
            BitCast cast = new BitCast();
            
            //...
            
            cast.Int32 = 12345;
            float value = cast.Single;
            </code>
            </example>
            <para>The same can be done with Bytes, using <see cref="F:Xen.Ex.BitCast.Byte0"/> to <see cref="F:Xen.Ex.BitCast.Byte7"/></para>
            </remarks>
        </member>
        <member name="F:Xen.Ex.BitCast.Int32">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.UInt32">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.UInt16">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Int16">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Single">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Double">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.UInt64">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Int64">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte0">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte1">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte2">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte3">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte4">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte5">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte6">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.BitCast.Byte7">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.ReadOnlyArrayCollection`1">
            <summary>
            Wraps an array as a readonly IList collection, and provides a struct based enumerator (reduces garbage collection and need for 'xxxCollection' classes)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.#ctor(`0[])">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.IndexOf(`0)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.Contains(`0)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.CopyTo(`0[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.ToArray">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.ReadOnlyArrayCollection`1.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.ReadOnlyArrayCollection`1.Length">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.ReadOnlyArrayCollection`1.IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.ReadOnlyArrayCollection`1.Empty">
            <summary>
            Gets an empty collection
            </summary>
        </member>
        <member name="T:Xen.Ex.ReadOnlyArrayCollection`1.ArrayEnumerator">
            <summary>
            struct enumerator
            </summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.ArrayEnumerator.Dispose">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.ArrayEnumerator.MoveNext">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.ReadOnlyArrayCollection`1.ArrayEnumerator.Reset">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.ReadOnlyArrayCollection`1.ArrayEnumerator.Current">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.TextValue">
            <summary>
            This class wraps a <see cref="T:System.Text.StringBuilder"/>, providing an integer count that increments each time the string changes (A change index)
            </summary>
        </member>
        <member name="M:Xen.Ex.TextValue.HasChanged(System.Int32@)">
            <summary>
            True if the text has changed (change index mismatch)
            </summary>
            <param name="changeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Implicit(Xen.Ex.TextValue)~System.String">
            <summary></summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Implicit(Xen.Ex.TextValue)~System.Text.StringBuilder">
            <summary></summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.TextValue.Clear">
            <summary>
            Clears the string
            </summary>
        </member>
        <member name="M:Xen.Ex.TextValue.TrimEnd(System.Int32)">
            <summary>
            Trim <paramref name="trimCharacters"/> number of characters from the end of the text
            </summary>
            <returns>the number of characters trimmed</returns>
            <param name="trimCharacters"></param>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.String)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetCharacter(System.Char,System.Int32)">
            <summary>Set a text character by index</summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Single)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Double)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Int16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.SByte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Char)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.SetText(System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.String)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Single)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Double)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Int16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.SByte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Char)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.Append(System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormat(System.String,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormat(System.String,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormat(System.String,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormat(System.String,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormatLine(System.String,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormatLine(System.String,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormatLine(System.IFormatProvider,System.String,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormatLine(System.String,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendFormatLine(System.String,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendLine(System.String)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.AppendLine">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.String)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Single)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Double)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Int16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Byte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.SByte)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Char)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.op_Addition(Xen.Ex.TextValue,System.Object)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.TextValue.ToString">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.TextValue.Length">
            <summary>
            Length of the string
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex">
            <summary><para>Technique 'DrawVelocityParticles_LinesGpuTex' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 26 instruction slots used (4 texture, 22 arithmetic), 6 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_LinesGpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex">
            <summary><para>Technique 'DrawVelocityParticlesColour_LinesGpuTex' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 28 instruction slots used (6 texture, 22 arithmetic), 6 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_LinesGpuTex' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.sid0">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset">
            <summary><para>Technique 'DrawVelocityParticles_LinesGpuTex_UserOffset' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 29 instruction slots used (6 texture, 23 arithmetic), 6 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_LinesGpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesGpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset">
            <summary><para>Technique 'DrawVelocityParticlesColour_LinesGpuTex_UserOffset' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 31 instruction slots used (8 texture, 23 arithmetic), 6 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_LinesGpuTex_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.cid0">
            <summary>Name ID for 'textureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 textureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.TextureSizeOffset">
            <summary>Assign the shader value 'float3 textureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesGpuTex_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu">
            <summary><para>Technique 'DrawVelocityParticles_LinesCpu' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 14 instruction slots used, 165 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticles_LinesCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.cid0">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.cid1">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.cid2">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticles_LinesCpu.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu">
            <summary><para>Technique 'DrawVelocityParticlesColour_LinesCpu' generated from file 'VelocityLines.fx'</para><para>Vertex Shader: approximately 14 instruction slots used, 245 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.#ctor">
            <summary>Construct an instance of the 'DrawVelocityParticlesColour_LinesCpu' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.cid0">
            <summary>Name ID for 'colourData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetColourData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 colourData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.cid1">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.cid2">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[80]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.cid3">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.ColourData">
            <summary>Set and copy the array data for the shader value 'float4 colourData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[80]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityParticlesColour_LinesCpu.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="T:Xen.Ex.Geometry.Cube">
            <summary>
            Cube geometry
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Construct the cube with the given size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Construct the cube with the given minimum and maximum bound
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.CullTest(Xen.ICuller)">
            <summary>
            FrustumCull test the cube
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.Draw(Xen.DrawState)">
            <summary>
            Draw the cube geometry
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.DrawBatch(Xen.DrawState,Xen.Graphics.InstanceBuffer)">
            <summary>
            Draw multiple instances of this cube geometry
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.DrawBatch(Xen.DrawState,Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary>
            Draw multiple instances of this cube geometry</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cube.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Cull test this box using a local world matrix
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.IMaterialLight">
            <summary>
            Interface to a light created in a <see cref="T:Xen.Ex.Material.MaterialLightCollection"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialLight.Colour">
            <summary>
            Gets/Sets the diffuse colour of the light (Vector3)
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialLight.SpecularColour">
            <summary>
            Gets/Sets the specular colour of the light (Vector3)
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialLight.SpecularPowerScaler">
            <summary>
            Gets/Sets a scale factor for the material specular power (default is 1, no change)
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialLight.PriorityMultiplier">
            <summary>
            <para>(Advanced) Gets/Sets a floating point value that can be used to adjust the rendering priority of a light.</para>
            <para>When a material shader cannot display all lights directly, lights it deems low priority will be displayed as ambient lighting</para>
            <para>This priority is calculated by the brightness and distance of the light. Adjust this value to bias the priority of this specific light.</para>
            <para>This value defaults to 1</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.IMaterialPointLight">
            <summary>
            Interface to a point light stored in a <see cref="T:Xen.Ex.Material.MaterialLightCollection"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialPointLight.Position">
            <summary>
            Gets/Sets the position of the point light
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialPointLight.SourceRadius">
            <summary>
            Gets/Sets the light anttenuation (falloff) source radius. The light is simulated as a spherical source.
            <para>The larger the radius, the brighter the light and softer the falloff will be</para>
            <para>This value must be greater than 0</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialPointLight.LightIntensity">
            <summary>
            Gets/Sets the light intensity
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.IMaterialDirectionalLight">
            <summary>
            Interface to a directional light stored in a <see cref="T:Xen.Ex.Material.MaterialLightCollection"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.IMaterialDirectionalLight.Direction">
            <summary>
            Gets/Sets the direction of the light
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialLightCollectionFlag">
            <summary>
            <para>A structure that can be used as a Draw Flag to have compatible classes (MaterialShader) to use a specific <see cref="T:Xen.Ex.Material.MaterialLightCollection"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialLightCollectionFlag.OverrideLightCollection">
            <summary>
            <para>Force drawn objects to use <see cref="F:Xen.Ex.Material.MaterialLightCollectionFlag.LightCollection"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialLightCollectionFlag.LightCollection">
            <summary>
            Get/Set the light collection to use
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollectionFlag.#ctor(Xen.Ex.Material.MaterialLightCollection)">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialLightCollection">
            <summary>
            Stores a collection of lights used by one or more <see cref="T:Xen.Ex.Material.MaterialShader"/> instance
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialLightCollection.SphericalHarmonic">
            <summary>
            Gets/Sets the ambient lighting spherical harmonic used by a <see cref="T:Xen.Ex.Material.MaterialShader"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.#ctor">
            <summary>
            Construct a shader lights collection
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.#ctor(System.Boolean)">
            <summary>
            Construct a shader lights collection
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreatePointLight(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates and adds a point light source to the light collection
            </summary>
            <param name="intensity">The intensity of the light source</param>
            <param name="position">Position of the lightsource</param>
            <param name="colour">Colour of the lightsource</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreatePointLight(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates and adds a point light source to the light collection
            </summary>
            <param name="position">Position of the lightsource</param>
            <param name="intensity">The intensity of the light source</param>
            <param name="colour">Colour of the lightsource</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreateDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates and adds a directional (infinite) light source to the light collection
            </summary>
            <param name="direction">Direction of the lightsource</param>
            <param name="colour">Colour of the lightsource</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreateDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates and adds a directional (infinite) light source to the light collection
            </summary>
            <param name="direction">Direction of the lightsource</param>
            <param name="colour">Colour of the lightsource</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreatePointLight(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates and adds a point light source to the light collection
            </summary>
            <param name="position">Position of the lightsource</param>
            <param name="intensity">The intensity of the light source</param>
            <param name="colour">Colour of the lightsource</param>
            <param name="specularColour">Specular colour of the lightsource (Specular is direct light reflection)</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreatePointLight(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates and adds a point light source to the light collection
            </summary>
            <param name="position">Position of the lightsource</param>
            <param name="intensity">The intensity of the light source</param>
            <param name="colour">Colour of the lightsource</param>
            <param name="specularColour">Specular colour of the lightsource (Specular is direct light reflection)</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreateDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates and adds a directional (infinite) light source to the light collection
            </summary>
            <param name="direction">Direction of the lightsource</param>
            <param name="colour">Colour of the lightsource</param>
            <param name="specularColour">Specular colour of the lightsource (Specular is direct light reflection)</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.CreateDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates and adds a directional (infinite) light source to the light collection
            </summary>
            <param name="direction">Direction of the lightsource</param>
            <param name="colour">Colour of the lightsource</param>
            <param name="specularColour">Specular colour of the lightsource (Specular is direct light reflection)</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.AddLight(Xen.Ex.Material.IMaterialLight)">
            <summary>
            Add an existing light to the shader, returns false if the light was already added
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.RemoveLight(Xen.Ex.Material.IMaterialLight)">
            <summary>
            Remove a light from the shader
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialLightCollection.RemoveAllLights">
            <summary>
            Removes all lights from this shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialLightCollection.LightingEnabled">
            <summary>
            Gets/Sets if lighting is enabled
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialLightCollection.LightCount">
            <summary>
            Gets the number of lights
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialLightCollection.AmbientLightColour">
            <summary>
            Gets/Sets the ambient light colour (Vector3)
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.LightingDisplayModelFlag">
            <summary>
            <para>A structure that can be used as a Draw Flag to have compatible classes (MaterialShader) use a specific <see cref="T:Xen.Ex.Material.LightingDisplayModel"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModelFlag.OverrideDisplayModel">
            <summary>
            <para>Force drawn objects to use <see cref="T:Xen.Ex.Material.LightingDisplayModel"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModelFlag.DisplayModel">
            <summary>
            Get/Set the light fog state to use
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.LightingDisplayModelFlag.#ctor(Xen.Ex.Material.LightingDisplayModel)">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Material.LightingDisplayModel">
            <summary>
            A flag to control how lighitng is displayed on a model
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModel.Default">
            <summary>
            The model will be displayed with per-pixel lighting if it has a normal map, otherwise it will use per-vertex lighting
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModel.SingleLight">
            <summary>
            The same as Default, however the model will be limited to a single direct light source to improve performance
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModel.ForcePerPixel">
            <summary>
            <para>The model will be displayed with per-pixel lighting</para>
            <para>This is generally the slowest rendering mode</para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModel.ForcePerVertex">
            <summary>
            <para>The model will be displayed with per-vertex lighting</para>
            <para>This is generally faster than the Per-Pixel rendering mode, unless the model has a very high polygon count, or is very small on screen</para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.LightingDisplayModel.ForceSphericalHarmonic">
            <summary>
            <para>The model will be displayed with only ambient spherical harmonic lighting</para>
            <para>This is the fastest way to light a model, however it is generally low accuracy</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialFogStateFlag">
            <summary>
            <para>A structure that can be used as a Draw Flag to have compatible classes (MaterialShader) use a specific <see cref="T:Xen.Ex.Material.MaterialFogState"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialFogStateFlag.OverrideFogState">
            <summary>
            <para>Force drawn objects to use <see cref="F:Xen.Ex.Material.MaterialFogStateFlag.FogState"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialFogStateFlag.FogState">
            <summary>
            Get/Set the light fog state to use
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialFogStateFlag.#ctor(Xen.Ex.Material.MaterialFogState)">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialFogState">
            <summary>
            Storage for the fogging state used by a <see cref="T:Xen.Ex.Material.MaterialShader"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialFogState.FogColour">
            <summary>
            Gets/Sets the colour of the fog
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialFogState.FogEnabled">
            <summary>
            Gets/Sets if fogging is enabled
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialFogState.FogNearDistance">
            <summary>
            Gets/Sets the near distance where fogging begins
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialFogState.FogFarDistance">
            <summary>
            Gets/Sets the far distance where fogging is at it's thickest
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialTexturesFlag">
            <summary>
            <para>A structure that can be used as a Draw Flag to have compatible classes (MaterialShader) use a specific <see cref="T:Xen.Ex.Material.MaterialTextures"/> object</para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialTexturesFlag.OverrideTextures">
            <summary>
            <para>Force drawn objects to use <see cref="F:Xen.Ex.Material.MaterialTexturesFlag.Textures"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Material.MaterialTexturesFlag.Textures">
            <summary>
            Get/Set the light fog state to use
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialTexturesFlag.#ctor(Xen.Ex.Material.MaterialTextures)">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialTextures">
            <summary>
            Storage for the textures used by a <see cref="T:Xen.Ex.Material.MaterialShader"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.TextureMap">
            <summary>
            Gets/Sets an optional texture map used during shading
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.TextureMapSampler">
            <summary>
            Gets/Sets the texture sampler used for the optional texture map
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.NormalMap">
            <summary>
            Gets/Sets the optional normal map used for lighting. Alpha of the normal map modulates specular reflection. Using a normal map requires the geometry has normals, tangents and binormals.
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.NormalMapSampler">
            <summary>
            Gets/Sets the texture sampler used for the optional normal map
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.EmissiveTextureMap">
            <summary>
            <para>Gets/Sets an optional emissive texture map used during shading</para>
            <para>NOTE: The emissive texture (unlike the emissive colour) is assumed to be stored in Linear Light space, not gamma corrected light space</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialTextures.EmissiveTextureMapSampler">
            <summary>
            Gets/Sets the texture sampler used for the optional emissive texture
            </summary>
        </member>
        <member name="T:Xen.Ex.Material.MaterialShader">
            <summary>
            <para>A shader that implements a simple lighting model that supporting a large number of point and directional lights.</para>
            <para>MaterialShader also allows for textures, normal maps, vertex colours, skinning and hardware instancing to be used</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialShader.FromBasicEffect(Microsoft.Xna.Framework.Graphics.BasicEffect,Xen.Ex.Material.MaterialShader@)">
            <summary>
            Creates a MaterialShader that implements similar lighting characteristics to an XNA BasicEffect (The <see cref="P:Xen.Ex.Material.MaterialShader.LightCollection"/> collection will be populated if the basic effect has lighting enabled)
            </summary>
            <param name="effect"></param>
            <param name="shader"></param>
            <remarks><para>Not all features of the BasicEffect are implement by the created MaterialShader (eg Fog is not implemented)</para></remarks>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Material.MaterialShader.#ctor(Xen.Ex.Material.MaterialLightCollection)">
            <summary>
            Construct the material shader
            </summary>
        </member>
        <member name="M:Xen.Ex.Material.MaterialShader.#ctor">
            <summary>
            Construct the material shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.FogState">
            <summary>
            Gets/Sets the fogging properties used by this shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.Textures">
            <summary>
            Gets/Sets the textures used by this shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.OutputLinearLight">
            <summary>
            <para>Output linear light from the shader. Defaults to false.</para>
            <para>By default, the output from the shader is gamma corrected.</para>
            <para>Set this parameter to true if you are are accumulating or blending multiple shaders before post processing and gamma correction</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.LightingDisplayModel">
            <summary>
            Gets/Sets the lighting display mode, this mode controls how lighting is applied to the object being rendered
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.LightingDisplayModelRadius">
            <summary>
            Gets/Sets a radius used during lighting calculation.
            <para>For improved results, set this radius to approximately the radius of the model</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.LightCollection">
            <summary>
            Gets/Sets the light collection used by this shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.DiffuseColour">
            <summary>
            Gets/Sets the diffuse colour of this material, (Default value is White (1,1,1))
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.SpecularColour">
            <summary>
            Gets/Sets the specular colour of this material, (Default value is Black (0,0,0))
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.SpecularPower">
            <summary>
            Specular power of the material (larger values produce a more focused specular reflection. Values between 5 and 32 are common). Default value is 16. Note the default specular colour is black (no specular)
            </summary>
            <remarks><para>Each light source can also modify the specular power through a scaler (see <see cref="P:Xen.Ex.Material.IMaterialLight.SpecularPowerScaler"/>)</para></remarks>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.UseVertexColour">
            <summary>
            Gets/Sets if this shader should use vertex colours from the geometry. All geometry drawn with this shader will require COLOR0 elements in their vertex geometry
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.Alpha">
            <summary>
            Gets/Sets the base alpha value (default is 1)
            </summary>
        </member>
        <member name="P:Xen.Ex.Material.MaterialShader.EmissiveColour">
            <summary>
            Gets/Sets the emissive lighting value
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ContentTargetPlatform">
            <summary>
            Used internally for content pipeline helpers
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ContentTargetPlatform.Windows">
            <summary></summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ContentTargetPlatform.Xbox360">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemTypeLogicData">
            <summary>
            Storage class for the per frame and one time logic performed on individual particles
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeLogicData.Once">
            <summary>
            Gets the array of logic steps performed when the particle type is created
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeLogicData.Frame">
            <summary>
            Gets the array of logic steps performed per frame for the particle type
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemLogicStep">
            <summary>
            Raw representation of a operation (step) performed on a particle, eg, as a value assignment
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicStep.Target">
            <summary>
            The target of the operation (eg, 'position.x')
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicStep.Arg0">
            <summary>
            The first arguement of the operation (eg, '0.5' or 'position.x')
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicStep.Arg1">
            <summary>
            The optional second arguement of the operation (eg, '0.5' or 'position.x')
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicStep.Method">
            <summary>
            The name of the logic method to perform (eg, 'set' to assign a value)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicStep.Children">
            <summary>
            Gets a list of children for this operation. Children will only be present on branching operations, such as 'loop'
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData">
            <summary>
            Stores the data required by a runtime particle processor (for both CPU and GPU processors)
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData.#ctor(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary>
            Construct the runtime data
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData.GpuParticleProcessorData">
            <summary>
            Get the processor data for a GPU particle processor
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData.SystemUsesUserValues">
            <summary>
            True if this processor data uses 'user' values
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData.SystemUsesLifeOrAgeValues">
            <summary>
            True if this processor data uses 'life' or 'age' values
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemRuntimeLogicData.CpuParticleProcessorData">
            <summary>
            Get the processor data for a CPU particle processor (Windows Only)
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemData">
            <summary>
            Stores the data for a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/>. Load instances of this class using <see cref="T:Xen.IContentOwner"/>.
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemData.SystemLogicData">
            <summary>
            Gets the logic data for this system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemData.ParticleTypeData">
            <summary>
            Gets the type data for the particle types defined in this system
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemTrigger">
            <summary>
            <para>A trigger can be defined in a particle system</para>
            <para>Triggers can be fired by the application to generate particles on demand</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Fire this trigger once, at a given location
            </summary>
            <param name="particleEmitPositon"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Fire this trigger once, at a given location
            </summary>
            <param name="particleEmitPositon"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Fire this trigger once, at a given location and size
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Fire this trigger once, at a given location and size
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Fire this trigger once, at a given location and size, velocity and rotation
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Fire this trigger once, at a given location and size, velocity and rotation
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            <para>Fire this trigger once, at a given location and size, velocity and rotation</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
            <param name="colour"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector4)">
            <summary>
            <para>Fire this trigger once, at a given location and size, velocity and rotation</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
            <param name="colour"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            <para>Fire this trigger once, at a given location and size, velocity and rotation</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            <para>Note: Setting default user values for particle systems that do not access user values will have no effect (the user values are optimized out)</para>
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
            <param name="colour"></param>
            <param name="userValues"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            <para>Fire this trigger once, at a given location and size, velocity and rotation</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            <para>Note: Setting default user values for particle systems that do not access user values will have no effect (the user values are optimized out)</para>
            </summary>
            <param name="particleEmitPositon"></param>
            <param name="rotation"></param>
            <param name="size"></param>
            <param name="velocity"></param>
            <param name="colour"></param>
            <param name="userValues"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemTrigger.FireTrigger">
            <summary>
            Fire this trigger once at 0,0,0
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTrigger.Name">
            <summary>
            Name of this trigger
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger">
            <summary>
            <para>A toggle trigger can be defined in a particle system</para>
            <para>Toggle Triggers can be enabled / disabled by the application to generate particles on demand</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.Name">
            <summary>
            Name of this toggle trigger
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.Enabled">
            <summary>
            Gets/Sets if this toggle trigger is enabled
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitPosition">
            <summary>
            Gets/Sets the default position of particle emitted by this toggle trigger
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitVelocity">
            <summary>
            Gets/Sets the default velocity of particle emitted by this toggle trigger
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitColour">
            <summary>
            <para>Gets/Sets the default colour of particle emitted by this toggle trigger</para>
            <para>Note: Setting a default colour for particle systems that do not access colour values will have no effect (the colour values are optimized out)</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitUserValues">
            <summary>
            Gets/Sets the default user values of particle emitted by this toggle trigger
            <para>Note: Setting default user values for particle systems that do not access user values will have no effect (the user values are optimized out)</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitSize">
            <summary>
            Gets/Sets the default size of particle emitted by this toggle trigger
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemToggleTrigger.DefaultParticleEmitRotation">
            <summary>
            Gets/Sets the default rotation of particle emitted this toggle trigger
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemLogicData">
            <summary>
            <para>Stores information about a particle system, such as Emitters and Triggers</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemLogicData.#ctor(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary>
            Load particle system data from a content stream
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Content.ParticleSystemLogicData.GetEmitterMaximumLifespan(System.String)">
            <summary>
            Gets the maximum lifespan of a particle type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicData.Frequency">
            <summary>
            Gets the frequency the particle system is processed at
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicData.OnceEmitter">
            <summary>
            Gets the logic data for the emitter run when the particle system is created
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicData.FrameEmitter">
            <summary>
            Gets the logic data for the emitter run every frame by the particle system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicData.Triggers">
            <summary>
            Gets the definitons for the triggers used by this particle system data
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemLogicData.ToggleTriggers">
            <summary>
            Gets the definitons for the toggle triggers used by this particle system data
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemTypeData">
            <summary>
            Stores the data for a specific particle type declared in a particle system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.Name">
            <summary>
            Gets the name of the particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.TypeIndex">
            <summary>
            Gets the index of the particle type (as declared in the particle system)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.TextureName">
            <summary>
            Gets the name of the texture used by this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.Texture">
            <summary>
            Gets the texture used by this particle type (may be null)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.BlendMode">
            <summary>
            Gets / Sets the blend mode used by this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.ParticleLogicData">
            <summary>
            Gets the logic data for this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.FrameEmitter">
            <summary>
            Gets the per-frame emitter logic for this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.RemoveEmitter">
            <summary>
            Gets the one time emitter logic for this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.ExpectedMaxCapacity">
            <summary>
            Gets the maximum expected number of particles of this type that will be created
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.RuntimeLogicData">
            <summary>
            Gets the runtime logic data for this particle type
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemTypeData.GpuBufferPosition">
            <summary>
            True if the GPU particle processor buffers initial particle position XYZ in user1,user2,user3
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemActionType">
            <summary>
            Logic action type for an emitter
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ParticleSystemActionType.Chance">
            <summary>A chance based action</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ParticleSystemActionType.Emit">
            <summary>An emitter action</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ParticleSystemActionType.Every">
            <summary>An interval based action</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Content.ParticleSystemActionType.Loop">
            <summary>A looped action</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemEmitData">
            <summary>
            Data for a particle Emit operation
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemEmitData.BaseLifeTimeStep">
            <summary>
            Minimum life of the particle, in time steps
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemEmitData.LifeVarianceTimeStep">
            <summary>
            Random variance of the life of the particle, in time steps
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemActionData">
            <summary>
            Stores the action to perform in a particle system Emitter
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemActionData.ActionType">
            <summary>
            Type for this action
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemActionData.Value">
            <summary>
            Value for this action (eg, loop count)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemActionData.EmitData">
            <summary>
            EmitData for this action, if the action is an Emit action
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemActionData.Children">
            <summary>
            Child actions (eg, for a loop action)
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.ParticleSystemEmitterLogic">
            <summary>
            Stores the data for a emitter (or a trigger)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemEmitterLogic.Name">
            <summary>
            Name of the emitter, if it's a trigger or toggle trigger
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemEmitterLogic.ParticleCapacityMultipler">
            <summary>
            Capacity multipler for Triggers
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.ParticleSystemEmitterLogic.Actions">
            <summary>
            Actions performed by the emitter
            </summary>
        </member>
        <member name="T:Xen.Ex.Geometry.Cone">
            <summary>
            A simple class that constructs cone geometry
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="tesselation"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.GenerateGeometry(Microsoft.Xna.Framework.Vector3,System.Int32,System.Boolean,System.Boolean,Xen.Graphics.IVertices@,Xen.Graphics.IIndices@)">
            <summary>
            Static method to generate the geometry data used by the sphere
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="tesselation"></param>
            <param name="positionOnly">vertex data will only store position</param>
            <param name="sizeToInternalCone">expand the cone geometry outwards so it encoses the desired size</param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.CullTest(Xen.ICuller)">
            <summary>
            
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.CullTest(Xen.ICuller,System.Single)">
            <summary>
            
            </summary>
            <param name="culler"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.Draw(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.DrawBatch(Xen.DrawState,Xen.Graphics.InstanceBuffer)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.DrawBatch(Xen.DrawState,Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Cone.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Cull test an instance of this cone, using a local world matrix for the position
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.Cone.Radius">
            <summary>
            Radius of the cone
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.Cone.GeometricRadius">
            <summary>
            Radius of the cone mesh. This value will be larger than <see cref="P:Xen.Ex.Geometry.Cone.Radius"/> if 'sizeToInternalCone' is specified as true in the extended constructor
            </summary>
        </member>
        <member name="T:Xen.Ex.Scene.StaticBinaryTreePartition">
            <summary>
            <para>Stores a list of IDraw instances in a scene partitioning binary tree, this clas can be used to improve CullTest performance for large numbers of objects.</para>
            <para>NOTE: Instances are assumed to not be moving (the must be static)</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Scene.StaticPartition">
            <summary>
            Abstract base class for a scene partitioning class
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.AddItem(Xen.IDraw,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>Implemented by a subclass</summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.DrawItems(Xen.DrawState)">
            <summary>Implemented by a subclass</summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.CullTestItems(Xen.ICuller)">
            <summary>Implemented by a subclass</summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.OptimizeContents">
            <summary>
            Optional method to override, called when it is expected that all contents have been added.
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.RunQuery(Xen.ICullPrimitive,System.Func{Xen.IDraw,System.Boolean})">
            <summary>
            Query the partition, returning all instances that intersect the primitive
            </summary>
            <param name="queryShape"></param>
            <param name="resultCallback">Callback for results. Return true to continue the query</param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.Query(Xen.ICullPrimitive,System.Func{Xen.IDraw,System.Boolean})">
            <summary>
            <para>Query the partition, returning instances that may potentially intersect the primitive</para>
            </summary>
            <param name="queryShape"></param>
            <param name="resultCallback">Callback for results. Return true to continue the query</param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.Query(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Func{Xen.IDraw,System.Boolean})">
            <summary>
            Query the partition, returning instances that may potentially intersect the bounding box area
            </summary>
            <param name="boundsMax"></param>
            <param name="boundsMin"></param>
            <param name="resultCallback">Callback for results. Return true to continue the query</param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.Query(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Func{Xen.IDraw,System.Boolean})">
            <summary>
            Query the partition, returning instances that may potentially intersect the bounding box area
            </summary>
            <param name="boundsMax"></param>
            <param name="boundsMin"></param>
            <param name="resultCallback">Callback for results. Return true to continue the query</param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.Add(Xen.IDraw)">
            <summary>
            Add a drawable item to this partition
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.Draw(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticPartition.CullTest(Xen.ICuller)">
            <summary></summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Ex.Scene.StaticPartition.IsOptimizedState">
            <summary>True once the partition has reached it's optimised state</summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticBinaryTreePartition.AddItem(Xen.IDraw,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary></summary>
            <param name="item"></param>
            <param name="minBounds"></param>
            <param name="maxBounds"></param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticBinaryTreePartition.DrawItems(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticBinaryTreePartition.CullTestItems(Xen.ICuller)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Scene.StaticBinaryTreePartition.RunQuery(Xen.ICullPrimitive,System.Func{Xen.IDraw,System.Boolean})">
            <summary>
            Query the partition, returning all instances that intersect the primitive
            </summary>
            <param name="queryShape"></param>
            <param name="resultCallback">Callback for results. Return true to continue the query</param>
        </member>
        <member name="M:Xen.Ex.Scene.StaticBinaryTreePartition.OptimizeContents">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Shaders.DepthOutRg">
            <summary><para>Technique 'DepthOutRg' generated from file 'Depth.fx'</para><para>Vertex Shader: approximately 13 instruction slots used, 10 registers</para><para>Pixel Shader: approximately 5 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.#ctor">
            <summary>Construct an instance of the 'DepthOutRg' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRg.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc0">
            <summary>Change ID for Semantic bound attribute 'cameraNearFar'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc1">
            <summary>Change ID for Semantic bound attribute 'viewDirection'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc2">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc3">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc4">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc5">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.sc6">
            <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRg.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.DepthOutRg.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip">
            <summary><para>Technique 'DepthOutRgTextureAlphaClip' generated from file 'Depth.fx'</para><para>Vertex Shader: approximately 14 instruction slots used, 10 registers</para><para>Pixel Shader: approximately 8 instruction slots used (1 texture, 7 arithmetic), 1 register</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.#ctor">
            <summary>Construct an instance of the 'DepthOutRgTextureAlphaClip' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.cid0">
            <summary>Name ID for 'clipThreshold'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc0">
            <summary>Change ID for Semantic bound attribute 'cameraNearFar'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc1">
            <summary>Change ID for Semantic bound attribute 'viewDirection'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc2">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc3">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc4">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc5">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sc6">
            <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.sid0">
            <summary>Name uid for sampler for 'Sampler2D AlphaTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.tid0">
            <summary>Name uid for texture for 'Texture2D AlphaTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,System.Single)">
            <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.ClipThreshold">
            <summary>Assign the shader value 'float clipThreshold'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.AlphaTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D AlphaTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.AlphaTexture">
            <summary>Get/Set the Bound texture for 'Texture2D AlphaTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.DepthOutRgTextureAlphaClip.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Shaders.NonLinearDepthOut">
            <summary><para>Technique 'NonLinearDepthOut' generated from file 'Depth.fx'</para><para>Vertex Shader: approximately 6 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 4 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.#ctor">
            <summary>Construct an instance of the 'NonLinearDepthOut' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOut.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.sc1">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.sc2">
            <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOut.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.NonLinearDepthOut.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip">
            <summary><para>Technique 'NonLinearDepthOutTextureAlphaClip' generated from file 'Depth.fx'</para><para>Vertex Shader: approximately 7 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 7 instruction slots used (1 texture, 6 arithmetic), 1 register</para></summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.#ctor">
            <summary>Construct an instance of the 'NonLinearDepthOutTextureAlphaClip' shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.preg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.cid0">
            <summary>Name ID for 'clipThreshold'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.sc1">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.sc2">
            <summary>Change ID for Semantic bound attribute 'viewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.sid0">
            <summary>Name uid for sampler for 'Sampler2D AlphaTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.tid0">
            <summary>Name uid for texture for 'Texture2D AlphaTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.preg">
            <summary>Pixel shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,System.Single)">
            <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.ClipThreshold">
            <summary>Assign the shader value 'float clipThreshold'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.AlphaTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D AlphaTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.AlphaTexture">
            <summary>Get/Set the Bound texture for 'Texture2D AlphaTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Shaders.NonLinearDepthOutTextureAlphaClip.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.ParticleStoreLife128">
            <summary><para>Technique 'ParticleStoreLife128' generated from file 'GpuParticles.fx'</para><para>Vertex Shader: approximately 18 instruction slots used, 129 registers</para><para>Pixel Shader: approximately 3 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.#ctor">
            <summary>Construct an instance of the 'ParticleStoreLife128' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.cid0">
            <summary>Name ID for 'indices'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.SetIndices(Microsoft.Xna.Framework.Vector3[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float3 indices[128]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.cid1">
            <summary>Name ID for 'invTargetSize'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.SetInvTargetSize(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 invTargetSize'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Processor.ParticleStoreLife128.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.ParticleStoreLife128.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>Set a shader attribute of type 'Vector3[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.ParticleStoreLife128.Indices">
            <summary>Set and copy the array data for the shader value 'float3 indices[128]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.ParticleStoreLife128.InvTargetSize">
            <summary>Assign the shader value 'float2 invTargetSize'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.ParticleStoreLife128.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.IModelShaderProvider">
            <summary>
            An interface to an object that provides the shaders or materials used by a model
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.IModelShaderProvider.BeginModel(Xen.DrawState,Xen.Ex.Material.MaterialLightCollection)">
            <summary>
            A method called before the model is dawn. Return a shader to use, or return null to keep the current shader.
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.IModelShaderProvider.BeginGeometry(Xen.DrawState,Xen.Ex.Graphics.Content.GeometryData)">
            <summary>
            A method called before model geometry is dawn. Return a shader to use, or return null to keep the current shader.
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.IModelShaderProvider.EndModel(Xen.DrawState)">
            <summary>
            A method called after the model has finished being dawn.
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Provider.SimpleShaderProvider`1">
            <summary>
            A model shader provider that displays the model using a user defined shader
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xen.Ex.Graphics.Provider.SimpleShaderProvider`1.#ctor">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Provider.SimpleShaderProvider`1.#ctor(`0)">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Provider.LightingDisplayShaderProvider">
            <summary>
            A model shader provider that displays the model using a custom <see cref="T:Xen.Ex.Material.LightingDisplayModel"/>
            <para>A base shader provider must be provided</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Provider.LightingDisplayShaderProvider.#ctor(Xen.Ex.Material.LightingDisplayModel,Xen.Ex.Graphics.IModelShaderProvider)">
            <summary>
            Constructs the shader provider
            </summary>
            <param name="displayModel"></param>
            <param name="baseProvider">(may be null)</param>
        </member>
        <member name="P:Xen.Ex.Graphics.Provider.LightingDisplayShaderProvider.DisplayModel">
            <summary>
            Gets or sets the display model
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.ModelShaderProviderFlag">
            <summary>
            <para>A structure that can be used as a Draw Flag to force drawn model instances to use a specific <see cref="T:Xen.Ex.Graphics.IModelShaderProvider"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.ModelShaderProviderFlag.OverrideShaderProvider">
            <summary>
            <para>Force drawn model instances to use <see cref="F:Xen.Ex.Graphics.ModelShaderProviderFlag.ShaderProvider"/></para>
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.ModelShaderProviderFlag.ShaderProvider">
            <summary>Shader provider to use, if null, the model will use the currently bound shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelShaderProviderFlag.#ctor(Xen.Ex.Graphics.IModelShaderProvider)">
            <summary></summary>
            <param name="shaderProvider"></param>
        </member>
        <member name="T:Xen.Ex.Graphics.ModelInstance">
             <summary>
             Draws <see cref="P:Xen.Ex.Graphics.ModelInstance.ModelData"/> loaded through the content pipeline
             </summary>
             <remarks>
             <para>
             When implementing shaders to draw the model, the following shader code example shows how to get the blend matrix when animation is enabled:
             </para>
             <para>
             <example>
             <code>
             //note: blendMatrices format is Matrix4x3 stored in Vector4s
             //in this example, there would be a maximum of 72 bones
             float4 blendMatrices[72*3];
             float4x4 worldViewProj : WORLDVIEWPROJECTION;
             
             //This shader will be approximately 20 instructions
             
            	void vertexShader(
            			float4	pos			: POSITION,
            		out	float4	o_pos		: POSITION,
            			float4	weights		: BLENDWEIGHT,
            			int4	indices		: BLENDINDICES)
            	{
            		//transpose makes this easier to write (it gets optimised away by the shader compiler)
            		float4x3 blendMat = transpose(float3x4(
            						blendMatrices[indices.x*3+0] * weights.x + blendMatrices[indices.y*3+0] * weights.y + blendMatrices[indices.z*3+0] * weights.z + blendMatrices[indices.w*3+0] * weights.w,
            						blendMatrices[indices.x*3+1] * weights.x + blendMatrices[indices.y*3+1] * weights.y + blendMatrices[indices.z*3+1] * weights.z + blendMatrices[indices.w*3+1] * weights.w,
            						blendMatrices[indices.x*3+2] * weights.x + blendMatrices[indices.y*3+2] * weights.y + blendMatrices[indices.z*3+2] * weights.z + blendMatrices[indices.w*3+2] * weights.w
            					   ));
            
            		float3 blendedPosition = mul(pos,blendMat).xyz;
            		
            		o_pos = mul(float4(blendedPosition,1),worldViewProj);
            	}
             </code>
             </example>
             </para>
             </remarks>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.#ctor">
            <summary>
            Construct the model instance. Setting the <see cref="P:Xen.Ex.Graphics.ModelInstance.ModelData"/> content is required before drawing
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.#ctor(Xen.Ex.Graphics.Content.ModelData)">
            <summary>
            Construct the model instance with existing model data
            </summary>
            <param name="sourceData"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.GetAnimationController">
            <summary>
            Gets/Creates an animation controller for this mesh instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.GetAsyncAnimationController(Xen.UpdateManager)">
            <summary>
            <para>Gets/Creates an animation controller that runs as a thread task</para>
            <para>Async animations require adding to an <see cref="T:Xen.UpdateManager"/> because their processing is initalised at the end of the update loop</para>
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.SetSharedAnimationController(Xen.Ex.Graphics.AnimationController)">
            <summary>
            Share an existing animation controller with this model
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.Draw(Xen.DrawState)">
            <summary>
            Draw the model. If the ShaderProvider is non-null, this class automatically assigns shaders when drawing
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.CullTest(Xen.ICuller)">
            <summary>
            FrustumCull test the model
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.ModelInstance.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            FrustumCull test the model at the given location
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ModelInstance.ShaderProvider">
            <summary>
            Extend the <see cref="T:Xen.Ex.Graphics.IModelShaderProvider"/> interface to set the shaders used by this model instance
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.ModelInstance.ModelData">
            <summary>
            <see cref="P:Xen.Ex.Graphics.ModelInstance.ModelData"/> used by this model instance. ModelData content must be assigned before the instance is drawn
            </summary>
            <remarks>ModelData may only be assigned once per instance</remarks>
        </member>
        <member name="P:Xen.Ex.Graphics.ModelInstance.LightCollection">
            <summary>
            Gets/Sets the lights collection used by any material shaders loaded with the model
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D">
            <summary><para>Technique 'DrawVelocityBillboardParticles_GpuTex3D' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 52 instruction slots used (4 texture, 48 arithmetic), 11 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticles_GpuTex3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.cid2">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D">
            <summary><para>Technique 'DrawVelocityBillboardParticlesColour_GpuTex3D' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 54 instruction slots used (6 texture, 48 arithmetic), 11 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticlesColour_GpuTex3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.cid2">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset">
            <summary><para>Technique 'DrawVelocityBillboardParticles_GpuTex3D_UserOffset' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 55 instruction slots used (6 texture, 49 arithmetic), 11 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticles_GpuTex3D_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.cid2">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_GpuTex3D_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset">
            <summary><para>Technique 'DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 57 instruction slots used (8 texture, 49 arithmetic), 11 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.cid1">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.cid2">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.sid4">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_GpuTex3D_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D">
            <summary><para>Technique 'DrawVelocityBillboardParticles_BillboardCpu3D' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 42 instruction slots used, 160 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticles_BillboardCpu3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.cid0">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.cid1">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.cid2">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.cid3">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticles_BillboardCpu3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D">
            <summary><para>Technique 'DrawVelocityBillboardParticlesColour_BillboardCpu3D' generated from file 'VelocityBillboard3D.fx'</para><para>Vertex Shader: approximately 42 instruction slots used, 235 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.#ctor">
            <summary>Construct an instance of the 'DrawVelocityBillboardParticlesColour_BillboardCpu3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.cid0">
            <summary>Name ID for 'colourData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetColourData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 colourData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.cid1">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.cid2">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.cid3">
            <summary>Name ID for 'velocityScale'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetVelocityScale(Microsoft.Xna.Framework.Vector2@)">
            <summary>Set the shader value 'float2 velocityScale'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.cid4">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Set a shader attribute of type 'Vector2' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.ColourData">
            <summary>Set and copy the array data for the shader value 'float4 colourData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.VelocityScale">
            <summary>Assign the shader value 'float2 velocityScale'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawVelocityBillboardParticlesColour_BillboardCpu3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D">
            <summary><para>Technique 'DrawBillboardParticles_GpuTex3D' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 56 instruction slots used (4 texture, 52 arithmetic), 10 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_GpuTex3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.cid1">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.sid2">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D">
            <summary><para>Technique 'DrawBillboardParticlesColour_GpuTex3D' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 58 instruction slots used (6 texture, 52 arithmetic), 10 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_GpuTex3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.cid1">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset">
            <summary><para>Technique 'DrawBillboardParticles_GpuTex3D_UserOffset' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 59 instruction slots used (6 texture, 53 arithmetic), 10 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_GpuTex3D_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.cid1">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_GpuTex3D_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset">
            <summary><para>Technique 'DrawBillboardParticlesColour_GpuTex3D_UserOffset' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 61 instruction slots used (8 texture, 53 arithmetic), 10 registers</para><para>Pixel Shader: approximately 5 instruction slots used (1 texture, 4 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_GpuTex3D_UserOffset' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.cid0">
            <summary>Name ID for 'invTextureSizeOffset'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.SetInvTextureSizeOffset(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 invTextureSizeOffset'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.cid1">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sid1">
            <summary>Name uid for sampler for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sid2">
            <summary>Name uid for sampler for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sid3">
            <summary>Name uid for sampler for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.sid4">
            <summary>Name uid for sampler for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.tid0">
            <summary>Name uid for texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.tid1">
            <summary>Name uid for texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.tid2">
            <summary>Name uid for texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.tid3">
            <summary>Name uid for texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vtc">
            <summary>Vertex samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vtx">
            <summary>Bound vertex textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.vts">
            <summary>Bound vertex samplers</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.InvTextureSizeOffset">
            <summary>Assign the shader value 'float3 invTextureSizeOffset'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.ColourSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D ColourSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.PositionSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D PositionSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.UserSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D UserSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.VelocitySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D VelocitySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.PositionTexture">
            <summary>Get/Set the Bound texture for 'Texture2D PositionTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.ColourTexture">
            <summary>Get/Set the Bound texture for 'Texture2D ColourTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.VelocityTexture">
            <summary>Get/Set the Bound texture for 'Texture2D VelocityTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.UserTexture">
            <summary>Get/Set the Bound texture for 'Texture2D UserTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_GpuTex3D_UserOffset.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D">
            <summary><para>Technique 'DrawBillboardParticles_BillboardCpu3D' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 44 instruction slots used, 159 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticles_BillboardCpu3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.cid0">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.cid1">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.cid2">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticles_BillboardCpu3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D">
            <summary><para>Technique 'DrawBillboardParticlesColour_BillboardCpu3D' generated from file 'Billboard3D.fx'</para><para>Vertex Shader: approximately 44 instruction slots used, 234 registers</para><para>Pixel Shader: approximately 6 instruction slots used (1 texture, 5 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.#ctor">
            <summary>Construct an instance of the 'DrawBillboardParticlesColour_BillboardCpu3D' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.cid0">
            <summary>Name ID for 'colourData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetColourData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 colourData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.cid1">
            <summary>Name ID for 'positionData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetPositionData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 positionData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.cid2">
            <summary>Name ID for 'velocityData'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetVelocityData(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 velocityData[75]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.cid3">
            <summary>Name ID for 'worldSpaceYAxis'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetWorldSpaceYAxis(Microsoft.Xna.Framework.Vector3@)">
            <summary>Set the shader value 'float3 worldSpaceYAxis'</summary><param name="value"/>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.sc0">
            <summary>Change ID for Semantic bound attribute 'viewPoint'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.sc1">
            <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.sc2">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.sid0">
            <summary>Name uid for sampler for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.tid4">
            <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.ColourData">
            <summary>Set and copy the array data for the shader value 'float4 colourData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.PositionData">
            <summary>Set and copy the array data for the shader value 'float4 positionData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.VelocityData">
            <summary>Set and copy the array data for the shader value 'float4 velocityData[75]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.WorldSpaceYAxis">
            <summary>Assign the shader value 'float3 worldSpaceYAxis'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.DisplaySampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplaySampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.DrawBillboardParticlesColour_BillboardCpu3D.DisplayTexture">
            <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Content.AvatarAnimationData">
            <summary>
            Content class for an AvatarInstance imported using the xen model importer
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AvatarAnimationData.StaticBounds">
            <summary>
            Gets the bounding box for the non-animated model data
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AvatarAnimationData.Name">
            <summary>
            Name of the model
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AvatarAnimationData.Animations">
            <summary>
            Gets a readonly array of animations stored in the model
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AvatarAnimationData.Skeleton">
            <summary>
            Gets the skeleton used by this model (this value may be null)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Content.AvatarAnimationData.AnimationStaticBoundsOffset">
            <summary>
            <para>Gets bounds offsets for each animation (assuming animation has a weighting of 1.0f)</para>
            <para>This offset is primarily used to adjust the bounding box of a model when an animation is playing</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Geometry.SphericalCone">
            <summary>
            A simple class that constructs spherical-cone geometry
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Int32)">
            <summary></summary>
            <param name="size"></param>
            <param name="maxAngle"></param>
            <param name="tesselation"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)">
            <summary></summary>
            <param name="size"></param>
            <param name="maxAngle"></param>
            <param name="tesselation"></param>
            <param name="positionOnly"></param>
            <param name="sizeToInternalSphere"></param>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.CullTest(Xen.ICuller)">
            <summary>Culltest the cone</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.CullTest(Xen.ICuller,System.Single)">
            <summary>Culltest the cone with a specified radius</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.Draw(Xen.DrawState)">
            <summary>Draw the cone</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.DrawBatch(Xen.DrawState,Xen.Graphics.InstanceBuffer)">
            <summary>Draw the cone as a batch</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.DrawBatch(Xen.DrawState,Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.SphericalCone.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Culltest the cone with a instance world matrix providing the postion of the cone
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.SphericalCone.Radius">
            <summary>
            Radius of the sphere
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.SphericalCone.GeometricRadius">
            <summary>
            Radius of the sphere mesh. This value will be larger than <see cref="P:Xen.Ex.Geometry.SphericalCone.Radius"/> if 'sizeToInternalSphere' is specified as true in the extended constructor
            </summary>
        </member>
        <member name="T:Xen.Ex.Filters.IDownsampleShaderProvider">
            <summary>
            Interface to a class that provides downsampling shaders
            </summary>
        </member>
        <member name="P:Xen.Ex.Filters.IDownsampleShaderProvider.DownsampleShader2">
            <summary>
            Two sample shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Filters.IDownsampleShaderProvider.DownsampleShader4">
            <summary>
            Four sample shader
            </summary>
        </member>
        <member name="P:Xen.Ex.Filters.IDownsampleShaderProvider.DownsampleShader8">
            <summary>
            Eight sample shader
            </summary>
        </member>
        <member name="T:Xen.Ex.Filters.BlurFilterFormat">
            <summary>
            The number of samples in a blur filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.BlurFilterFormat.ThreeSampleBlur">
            <summary>
            3x3 sample blur filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.BlurFilterFormat.FiveSampleBlur">
            <summary>
            5x5 sample blur
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.BlurFilterFormat.SevenSampleBlur">
            <summary>
            7x7 sample blur filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.BlurFilterFormat.FifteenSampleBlur">
            <summary>
            15x15 sample blur filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.BlurFilterFormat.ThirtyOneSampleBlur_FilteredTextureFormat">
            <summary>
            31x31 sample blur, assumes the graphics device supports texture filtering for the render target format
            </summary>
        </member>
        <member name="T:Xen.Ex.Filters.Filter16Sample">
            <summary>
            Stores an 16 sample filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset0">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset1">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset2">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset3">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset4">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset5">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset6">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset7">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset8">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset9">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset10">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset11">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset12">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset13">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset14">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.PixelOffset15">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight0">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight1">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight2">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight3">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight4">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight5">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight6">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight7">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight8">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight9">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight10">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight11">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight12">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight13">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight14">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter16Sample.Weight15">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Filter8Sample">
            <summary>
            Stores an 8 sample filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset0">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset1">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset2">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset3">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset4">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset5">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset6">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.PixelOffset7">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight0">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight1">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight2">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight3">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight4">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight5">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight6">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter8Sample.Weight7">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Filter4Sample">
            <summary>
            Stores an 4 sample filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.PixelOffset0">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.PixelOffset1">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.PixelOffset2">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.PixelOffset3">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.Weight0">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.Weight1">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.Weight2">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter4Sample.Weight3">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.Filter2Sample">
            <summary>
            Stores an 2 sample filter
            </summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter2Sample.PixelOffset0">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter2Sample.PixelOffset1">
            <summary>Pixel offset from the sampling centre point</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter2Sample.Weight0">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="F:Xen.Ex.Filters.Filter2Sample.Weight1">
            <summary>Pixel weighting for the sample (all weights should usually add to 1)</summary>
        </member>
        <member name="T:Xen.Ex.Filters.SinglePassTextureFilter">
            <summary>
            Applies a single pass texture filter (up to 16 sample) to a draw target
            </summary>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter16Sample@)">
            <summary>
            Creates a single pass 16 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter16Sample)">
            <summary>
            Creates a single pass 16 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter8Sample@)">
            <summary>
            Creates a single pass 8 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter8Sample)">
            <summary>
            Creates a single pass 8 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter4Sample@)">
            <summary>
            Creates a single pass 4 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter4Sample)">
            <summary>
            Creates a single pass 4 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter2Sample@)">
            <summary>
            Creates a single pass 2 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Ex.Filters.Filter2Sample)">
            <summary>
            Creates a single pass 2 sample filter
            </summary>
            <param name="source">soure texture to filter</param>
            <param name="target">target to filter</param>
            <param name="filter">Filter to apply</param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.SetFilter(Xen.Ex.Filters.Filter16Sample@)">
            <summary>
            Set a 16 sample filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.SetFilter(Xen.Ex.Filters.Filter8Sample@)">
            <summary>
            Set an 8 sample filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.SetFilter(Xen.Ex.Filters.Filter4Sample@)">
            <summary>
            Set a 4 sample filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.SetFilter(Xen.Ex.Filters.Filter2Sample@)">
            <summary>
            Set a 2 sample filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Xen.Ex.Filters.SinglePassTextureFilter.Draw(Xen.FrameState)">
            <summary>
            Apply the filter
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Xen.Ex.Filters.BlurFilter">
            <summary>
            Applies a two pass, 16 sample vertical and horizontal texture blur filter to a draw target
            </summary>
        </member>
        <member name="M:Xen.Ex.Filters.BlurFilter.#ctor(Xen.Ex.Filters.BlurFilterFormat,System.Single,Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D)">
            <summary>
            Blur the source horizontally to the <paramref name="intermediate"/> target, then blur vertically back to <paramref name="source"/>.
            </summary>
            <param name="source"></param>
            <param name="filterFormat">format of the blur filter</param>
            <param name="intermediate">draw target to use as a temporary, intermediate target for blurring</param>
            <param name="bellCurveExponent">
            <para>A scale value to infulence the bell curve used to generate the filter kernel.</para>
            <para>A value of 1.0 generates a standard blur filter kernels. Larger values will produce a tighter curve, and less blur.</para>
            <para>Smaller values will produce a wider curve, and a larger blur - but may produce a visible edge as the curve more rapidly ends.</para>
            </param>
        </member>
        <member name="M:Xen.Ex.Filters.BlurFilter.#ctor(Xen.Ex.Filters.BlurFilterFormat,System.Single,Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D)">
            <summary>
            Blur the source horizontally to the <paramref name="intermediate"/> target, then blur vertically to <paramref name="target"/>.
            </summary>
            <param name="source"></param>
            <param name="filterFormat">format of the blur filter</param>
            <param name="intermediate">draw target to use as a temporary, intermediate target for blurring</param>
            <param name="target"></param>
            <param name="bellCurveExponent">
            <para>A scale value to infulence the bell curve used to generate the filter kernel.</para>
            <para>A value of 1.0 generates a standard blur filter kernels. Larger values will produce a tighter curve, and less blur.</para>
            <para>Smaller values will produce a wider curve, and a larger blur - but may produce a visible edge as the curve more rapidly ends.</para>
            </param>
        </member>
        <member name="M:Xen.Ex.Filters.BlurFilter.Draw(Xen.FrameState)">
            <summary>
            Apply the filter
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Filters.BlurFilter.SetFilterFormat(Xen.Ex.Filters.BlurFilterFormat,System.Single)">
            <summary>
            <para>Set the filter format of the blur filter.</para>
            <para>Note: Some filter formats require the graphics device support texture filtering for the given format</para>
            </summary>
            <param name="filterFormat"></param>
            <param name="bellCurveExponent">
            <para>A scale value to infulence the bell curve used to generate the filter kernel.</para>
            <para>A value of 1.0 generates a standard blur filter kernels. Larger values will produce a tighter curve, and less blur.</para>
            <para>Smaller values will produce a wider curve, and a larger blur - but may produce a visible edge as the curve more rapidly ends.</para>
            </param>
        </member>
        <member name="T:Xen.Ex.Filters.TextureDownsample">
            <summary>
            Performs a number of passes to downsample a draw target to a desired size
            </summary>
        </member>
        <member name="M:Xen.Ex.Filters.TextureDownsample.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D@,Xen.Graphics.DrawTargetTexture2D@,System.Int32,System.Int32)">
            <summary>
            Construct the texture downsampler
            </summary>
            <param name="source">Source texture to read</param>
            <param name="target">Target texture to write to</param>
            <param name="intermediate">Intermediate texture (if null, will be created as required)</param>
            <param name="intermediate2">Second intermediate texture (if null, will be created as required)</param>
            <param name="targetWidth">target width to downsample to</param>
            <param name="targetHeight">target height to downsample to</param>
        </member>
        <member name="M:Xen.Ex.Filters.TextureDownsample.#ctor(Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D,Xen.Graphics.DrawTargetTexture2D@,Xen.Graphics.DrawTargetTexture2D@,System.Int32,System.Int32,Xen.Ex.Filters.IDownsampleShaderProvider)">
            <summary>
            Construct the texture downsampler
            </summary>
            <param name="source">Source texture to read</param>
            <param name="target">Target texture to write to</param>
            <param name="intermediate">Intermediate texture (if null, will be created as required)</param>
            <param name="intermediate2">Second intermediate texture (if null, will be created as required)</param>
            <param name="targetWidth">target width to downsample to</param>
            <param name="targetHeight">target height to downsample to</param>
            <param name="shaderProvider">Optional provider for downsample shaders</param>
        </member>
        <member name="M:Xen.Ex.Filters.TextureDownsample.Draw(Xen.FrameState)">
            <summary>
            Perform the texture downsample filter
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Xen.Ex.Graphics2D.ITextElement">
            <summary>
            Interface for a <see cref="T:Xen.Ex.Graphics2D.TextElement"/> or a <see cref="T:Xen.Ex.Graphics2D.TextElementRect"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
            <param name="elementOffset"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
            <param name="elementOffset"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.RemoveInline(Xen.Ex.Graphics2D.Element)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.RemoveInlineAt(System.UInt32)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ITextElement.RemoveInlineChildren">
            <summary>
            Remove all elements added with <see cref="M:Xen.Ex.Graphics2D.ITextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ITextElement.Colour">
            <summary>
            Gets/Sets the colour of the text
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ITextElement.ColourFloat">
            <summary>
            Gets/Sets the colour of the text (as a <see cref="T:Microsoft.Xna.Framework.Vector4"/>)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ITextElement.Font">
            <summary>
            <para>Gets/Sets the XNA <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> used by ths element</para>
            <para>Note: The font must be set before drawing the text</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ITextElement.Text">
            <summary>
            <para>Gets the <see cref="T:Xen.Ex.TextValue"/> of this element (See implementation remarks for assignment details)</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.TextHorizontalAlignment">
            <summary>
            Text alignment enumeration used by <see cref="T:Xen.Ex.Graphics2D.TextElementRect"/>
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.TextHorizontalAlignment.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.TextHorizontalAlignment.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.TextHorizontalAlignment.Centre">
            <summary>
            Centre alignment
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.TextHorizontalAlignment.Justified">
            <summary>
            Justified alignment
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.TextElement">
            <summary>
            <para>Element that displays a text string at a position</para>
            <para>Use <see cref="T:Xen.Ex.Graphics2D.TextElementRect"/> to display text in a rectangle</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.#ctor">
            <summary>
            <para>Construct the text element</para>
            <para>Note: the <see cref="P:Xen.Ex.Graphics2D.TextElement.Font"/> must be set before drawing</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.#ctor(System.String)">
            <summary>
            <para>Construct the text element</para>
            <para>Note: the <see cref="P:Xen.Ex.Graphics2D.TextElement.Font"/> must be set before drawing</para>
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.#ctor(Xen.Ex.TextValue,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            <para>Construct the text element</para>
            </summary>
            <param name="font"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.#ctor(System.String,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            <para>Construct the text element</para>
            </summary>
            <param name="font"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
            <param name="elementOffset"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
            <param name="elementOffset"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.RemoveInline(Xen.Ex.Graphics2D.Element)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.RemoveInlineAt(System.UInt32)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.RemoveInlineChildren">
            <summary>
            Remove all elements added with <see cref="M:Xen.Ex.Graphics2D.TextElement.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElement.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="size"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.Colour">
            <summary>
            Gets/Sets the colour of the text
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.ColourFloat">
            <summary>
            Gets/Sets the colour of the text (as a <see cref="T:Microsoft.Xna.Framework.Vector4"/>)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.Font">
            <summary>
            <para>Gets/Sets the XNA <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> used by ths element</para>
            <para>Note: The font must be set before drawing the text</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.Children">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.Text">
            <summary>
            <para>Gets the <see cref="T:Xen.Ex.TextValue"/> of this element (See remarks for assignment details)</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Xen.Ex.TextValue"/> object allows appending of strings, integers, etc. It does not allow direct asignment.</para>
            <para>Therefore, it is safe to do the following:</para>
            <code>textElement.Text += "...";</code>
            <para>But you cannot do:</para>
            <code>textElement.Text = "...";</code>
            <para>To set the text value, call SetText():</para>
            <code>textElement.Text.SetText("...");</code>
            <para>Appending will not allocate memory like normal string appending, as the internal <see cref="T:Xen.Ex.TextValue"/> is appending a <see cref="T:System.Text.StringBuilder"/></para>
            </remarks>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.ElementSize">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElement.UseSize">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.TextElementRect">
            <summary>
            <para>Element that displays a text string within a rectangle</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.SizeChanged">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the text element
            </summary>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.#ctor(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Construct the text element
            </summary>
            <param name="sizeInPixels"></param>
            <param name="font"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.#ctor(Microsoft.Xna.Framework.Vector2,Xen.Ex.TextValue,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Construct the text element
            </summary>
            <param name="sizeInPixels"></param>
            <param name="font"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.#ctor(Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            Construct the text element
            </summary>
            <param name="sizeInPixels"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.#ctor(Microsoft.Xna.Framework.Vector2,Xen.Ex.TextValue)">
            <summary>
            Construct the text element
            </summary>
            <param name="sizeInPixels"></param>
            <param name="text"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
            <param name="element"></param>
            <param name="textIndex"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Adds a child element that is embedded inline at the given text index
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.RemoveInline(Xen.Ex.Graphics2D.Element)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.RemoveInlineAt(System.UInt32)">
            <summary>
            Tries to remove an element added with <see cref="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.RemoveInlineChildren">
            <summary>
            Remove all elements added with <see cref="M:Xen.Ex.Graphics2D.TextElementRect.AddInline(Xen.Ex.Graphics2D.Element,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.DrawElement(Xen.DrawState)">
            <summary></summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TextElementRect.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="size"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.VerticalSizeToContent">
            <summary>
            When true, this element will be vertically sized to fit the text content
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.Colour">
            <summary>
            Gets/Sets the colour of the text
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.ColourFloat">
            <summary>
            Gets/Sets the colour of the text (as a <see cref="T:Microsoft.Xna.Framework.Vector4"/>)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.TextVerticalAlignment">
            <summary>
            Gets/Sets the vertical alignment of the text
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.TextHorizontalAlignment">
            <summary>
            Gets/Sets the horizontal alignment of the text
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.Font">
            <summary>
            <para>Gets/Sets the XNA <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> used by ths element</para>
            <para>Note: The font must be set before drawing the text</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TextElementRect.Text">
            <summary>
            <para>Gets the <see cref="T:Xen.Ex.TextValue"/> of this element (See remarks for assignment details)</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Xen.Ex.TextValue"/> object allows appending of strings, integers, etc. It does not allow direct asignment.</para>
            <para>Therefore, it is safe to do the following:</para>
            <code>textElement.Text += "...";</code>
            <para>But you cannot do:</para>
            <code>textElement.Text = "...";</code>
            <para>To set the text value, call SetText():</para>
            <code>textElement.Text.SetText("...");</code>
            <para>Appending will not allocate memory like normal string appending, as the internal <see cref="T:Xen.Ex.TextValue"/> is appending a <see cref="T:System.Text.StringBuilder"/></para>
            </remarks>
        </member>
        <member name="T:Xen.Ex.Graphics2D.ElementFont">
            <summary>
            wrapper on SpriteFont private members, also does some useful pre-calculations to make things faster later
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.Statistics.DrawGraphLine">
            <summary><para>Technique 'DrawGraphLine' generated from file 'Shader.fx'</para><para>Vertex Shader: approximately 10 instruction slots used, 204 registers</para><para>Pixel Shader: approximately 9 instruction slots used, 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.#ctor">
            <summary>Construct an instance of the 'DrawGraphLine' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.cid0">
            <summary>Name ID for 'graphLine'</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.SetGraphLine(Microsoft.Xna.Framework.Vector4[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>Set the shader array value 'float4 graphLine[200]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.GraphLine">
            <summary>Set and copy the array data for the shader value 'float4 graphLine[200]'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.Statistics.DrawGraphLine.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
        <member name="T:Xen.Ex.Scene.BoundsCalculatingPreCuller">
            <summary>
            <para>When this class is used as a preculler, it will compute the cull bounds of the cull test calls made when drawing</para>
            <para>This class can also be used as a post culler, to compute the bounds of culltests that pass</para>
            <para>Note: This class is somewhat inefficient on the Xbox right now.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)">
            <summary>
            <para>Call this method before drawing/culling an item. Match this method call with a call to TryGetBounds after the cull/draw is complete</para>
            <para>The <see cref="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.ResetPreCullItem"/> method may also be used for subsequent items that are culled, provided the world matrix hasn't changed.</para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.ResetPreCullItem">
            <summary>
            <para>If drawing/culling multiple items with the same parent (Where the world matrix does not change), this method can be used in place of calls to <see cref="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/></para>
            <para>This method is considerably faster than <see cref="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.TryGetBounds(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            <para>Call this method to get the computed bounds. Call after culling/drawing an item. Call <see cref="M:Xen.Ex.Scene.BoundsCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/> before culling/drawing the item.</para>
            <para>Returns false if the bounds could not be determined</para>
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Ex.Scene.PositionCalculatingPreCuller">
            <summary>
            <para>When this class is used as a preculler, it will compute the centre positions of the cull test calls made when drawing</para>
            <para>This class can also be used as a post culler, to compute the positions of culltests that pass</para>
            <para>This class is significantly faster than the <see cref="T:Xen.Ex.Scene.BoundsCalculatingPreCuller"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.PositionCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)">
            <summary>
            <para>Call this method before drawing/culling an item. Match this method call with a call to TryGetPosition after the cull/draw is complete</para>
            <para>The <see cref="M:Xen.Ex.Scene.PositionCalculatingPreCuller.ResetPreCullItem"/> method may also be used for subsequent items that are culled, provided the world matrix hasn't changed.</para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.PositionCalculatingPreCuller.ResetPreCullItem">
            <summary>
            <para>If drawing/culling multiple items with the same parent (Where the world matrix does not change), this method can be used in place of calls to <see cref="M:Xen.Ex.Scene.PositionCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/></para>
            <para>This method is faster than <see cref="M:Xen.Ex.Scene.PositionCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/></para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Scene.PositionCalculatingPreCuller.TryGetPosition(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            <para>Call this method to get the computed position. Call after culling/drawing an item. Call <see cref="M:Xen.Ex.Scene.PositionCalculatingPreCuller.BeginPreCullItem(Xen.DrawState)"/> before culling/drawing the item.</para>
            <para>Returns false if the position could not be determined</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.TexturedElement">
            <summary>
            Element that displays a texture
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element
            </summary>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element
            </summary>
            <param name="sizeInPixels"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the element
            </summary>
            <param name="texture"></param>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.#ctor(Xen.Graphics.DrawTargetTexture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element, using a <see cref="T:Xen.Graphics.DrawTargetTexture2D"/> as the texture source
            </summary>
            <param name="sizeInPixels"></param>
            <param name="textureSource"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.#ctor(Xen.Graphics.DrawTargetTexture2D,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the element, using a <see cref="T:Xen.Graphics.DrawTargetTexture2D"/> as the texture source
            </summary>
            <param name="textureSource"></param>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.WriteTextureCoords(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary></summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.TexturedElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TexturedElement.TextureCrop">
            <summary>
            Gets/Sets a cropping rectangle for this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TexturedElement.UsePointFiltering">
            <summary>
            Gets/Sets if the texture should be displayed with point filtering
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.TexturedElement.Texture">
            <summary>
            Gets/Sets the texture being displayed
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.ShaderElement">
            <summary>
            An element that is displayed with a custom shader
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.#ctor(Xen.Graphics.IShader,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element
            </summary>
            <param name="shader"></param>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.#ctor(Xen.Graphics.IShader,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the element
            </summary>
            <param name="shader"></param>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.#ctor(Xen.Graphics.IShader,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element, specifying the size of the texture that will be used
            </summary>
            <param name="shader"></param>
            <param name="textureWidth"></param>
            <param name="textureHeight"></param>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.#ctor(Xen.Graphics.IShader,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the element, specifying the size of the texture that will be used
            </summary>
            <param name="shader"></param>
            <param name="textureHeight"></param>
            <param name="textureWidth"></param>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.PreDraw(Microsoft.Xna.Framework.Vector2)">
            <summary></summary>
            <param name="size"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.SetTextureSize(System.Int32,System.Int32)">
            <summary>
            <para>Set the size of a texture being displayed by this element.</para>
            <para>Setting this value only modifies the texture coordinates generated, to produce more accurate texture filtering</para>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.WriteTextureCoords(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary></summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.ShaderElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ShaderElement.TextureCrop">
            <summary>
            Gets/Sets an optional texture crop used by this element
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.ShaderElement.Shader">
            <summary>
            Gets/Sets the shader used by this element
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.SolidColourElement">
            <summary>
            Creates an element that displays a solid colour
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SolidColourElement.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Construct the element
            </summary>
            <param name="colour"></param>
            <param name="size">If Normalised, the position and size are stored as [0,1] range. Otherwise the position and size are measured in pixels</param>
            <param name="normalised"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SolidColourElement.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construct the element
            </summary>
            <param name="colour"></param>
            <param name="sizeInPixels"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SolidColourElement.BindShader(Xen.DrawState,System.Boolean)">
            <summary></summary>
            <param name="state"></param>
            <param name="maskOnly"></param>
        </member>
        <member name="M:Xen.Ex.Graphics2D.SolidColourElement.WriteColours(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <summary></summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="P:Xen.Ex.Graphics2D.SolidColourElement.Colour">
            <summary>
            Gets/Sets the colour used by this element
            </summary>
        </member>
        <member name="T:Xen.Ex.Scene.DrawPredicate">
            <summary>
            <para>A DrawPredicate uses a <see cref="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery"/> to cull drawing of a 'complex' object based on the number of pixels a 'predicate' object draws</para>
            <para>If the predicate object (usually simple bounding geometry) draws more than <see cref="P:Xen.Ex.Scene.DrawPredicate.MinimumPixelCount"/>, the (usually more complex) object will be dawn</para>
            </summary>
            r<remarks>
            <para>An example use of this class would be drawing complex geometry, using a much simpler drawable (say, a bounding box) as the predicate.</para>
            <para>When rendering, the predicate will be drawn every few frames (colour and depth writing will be disabled). While drawing the predicate, an occlusion query will be active.</para>
            <para>The occlusion query results are returned several frames later. The result is the number of pixels drawn (the number of pixels drawn by the predicate).</para>
            <para>If the number of pixels drawn is greater than <see cref="P:Xen.Ex.Scene.DrawPredicate.MinimumPixelCount"/>, then the complex object will be drawn.</para>
            <para>This means that if the predicate is occluded while rendering (NOTE: closer objects must still be drawn before it) then the complex object won't be rendered at all.</para>
            <para>Note, there are several requirements for a DrawPredicate to improve performance:<br/>The predicate must be drawn in order such that potential occluders are drawn first (eg, front to back).<br/>The main item must be complex enough, and occluded often enough such that the overhead of drawing the predicate is actually worth while. (If you are fill rate limited, a DrawPredicate will probably not help at all)<br/>Finally, the potential delay between the oclusion query result being returned may produce a delay where the object isn't drawn.</para>
            <para>Finally, note that when the predicate is <i>off screen</i> (as reported by it's cull test) the query result gets reset. When the predicate is on screen again, the query is assumed to have passed. This can be disabled by setting <see cref="P:Xen.Ex.Scene.DrawPredicate.OffScreenPredicateQueryReset"/> to false. When false, the complex object may be invisible for the first few frames when appearing from off screen. When true, when comming back on screen, the complex object may be drawn even though occluded. (The default is false)</para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.#ctor(Xen.IDraw,Xen.IDraw)">
            <summary>
            Construct the DrawPredicate
            </summary>
            <param name="complex">The 'complex' object that is drawn based on the occlusion of the predicate</param>
            <param name="predicate">The 'simple' predicate object</param>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.#ctor(Xen.IDraw,Xen.IDraw,System.Int32)">
            <summary>
            Construct the DrawPredicate
            </summary>
            <param name="complex">The 'complex' object that is drawn based on the occlusion of the predicate</param>
            <param name="predicate">The 'simple' predicate object</param>
            <param name="minmumPixelCount">The minimum predicate pixel count required to draw the 'complex' object</param>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.#ctor(Xen.IDraw,Xen.IDraw,System.Int32,System.Boolean)">
            <summary>
            Construct the DrawPredicate
            </summary>
            <param name="complex">The 'complex' object that is drawn based on the occlusion of the predicate</param>
            <param name="predicate">The 'simple' predicate object</param>
            <param name="minmumPixelCount">The minimum predicate pixel count required to draw the 'complex' object</param>
            <param name="initialQueryVisibility">If false, the predicate will treat the query as having failed, this will require a positive query result before the object becomes visible</param>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.Draw(Xen.DrawState)">
            <summary>
            Draw the predicate, and if the predicate draws at least <see cref="P:Xen.Ex.Scene.DrawPredicate.MinimumPixelCount"/> pixels, the 'complex' object will be drawn
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.CullTest(Xen.ICuller)">
            <summary>
            Cull test the predicate
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Scene.DrawPredicate.Dispose">
            <summary>
            Dispose the <see cref="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery"/>
            </summary>
        </member>
        <member name="P:Xen.Ex.Scene.DrawPredicate.MinimumPixelCount">
            <summary>
            The minimum predicate pixel count required to draw the 'complex' object
            </summary>
        </member>
        <member name="P:Xen.Ex.Scene.DrawPredicate.OffScreenPredicateQueryReset">
            <summary>
            If true, the occlusion query result will be reset when the predicate is off screen
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.AvatarInstance">
            <summary>
            Draws an XNA Avatar, with animation using either built in XNA animations of animations loaded through the content pipeline using <see cref="T:Xen.Ex.Graphics.Content.AvatarAnimationData"/>
            </summary>
        </member>
        <member name="F:Xen.Ex.Graphics.AvatarInstance.AvatarExpression">
            <summary>
            Gets/Sets/Modifies the expression used by the avatar when drawing
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarDescription)">
            <summary>
            Construct an avatar instance
            </summary>
            <param name="avatarDescription">The XNA avatar description. If null, a random description will be used</param>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarDescription,System.Boolean)">
            <summary>
            Construct an avatar instance
            </summary>
            <param name="avatarDescription">The XNA avatar description. If null, a random description will be used</param>
            <param name="useLoadingEffect"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.GetAnimationController">
            <summary>
            Gets/Creates an animation controller for this avatar instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.GetAsyncAnimationController(Xen.UpdateManager)">
            <summary>
            <para>Gets/Creates an animation controller that runs as a thread task</para>
            <para>Async animations require adding to an <see cref="T:Xen.UpdateManager"/> because their processing is initalised at the end of the update loop</para>
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.Draw(Xen.DrawState)">
            <summary>
            Draw the avatar.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.CullTest(Xen.ICuller)">
            <summary>
            FrustumCull test the model
            </summary>
            <param name="culler"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            FrustumCull test the model at the given location
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.AddAnimationSource(Xen.Ex.Graphics.Content.AvatarAnimationData)">
            <summary>
            Add an animation source, adding all the animations present in the source file.
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarInstance.AddNamedAnimation(Xen.Ex.Graphics.Content.AvatarAnimationData,System.String)">
            <summary>
            Add a single animation with a specified name from an animation source file. 
            </summary>
            <returns>Returns the index of the added animation</returns>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarInstance.LightCollection">
            <summary>
            <para>Gets/Sets the lights collection used by to compute the lighting for the avatar</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarInstance.AvatarDescription">
            <summary>
            Gets/Sets the AvatarDescription
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarInstance.Scale">
            <summary>
            Gets/Sets the scale of the drawn Avatar
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.IAvatarAnimationBoneModifier">
            <summary>
            <para>Interface to a class that may modify the transforms of an avatars animation bone hierarchy, through a <see cref="T:Xen.Ex.Graphics.AvatarAnimationController"/></para>
            <para>Note: Methods implemented for this interface should be thread safe</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.PreProcessAvatarAnimation(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})">
            <summary>
            <para>Modify the bones of the animation before the animation is processed. Returning false will prevent the animation / blending process from starting.</para>
            <para>Use this method to replace the entire animation, and prevent the standard animations from being processed.</para>
            <para>Any modifications to <paramref name="nonAnimatedBones"/> will have no effect unless false is returned.</para>
            </summary>
            <param name="nonAnimatedBones"></param>
            <param name="avatarModelData"></param>
            <param name="boneWorldSpaceIdentityTransforms"><para>The world space transforms of the bones</para><para>If no animations are playing, all bones will be Identity transforms. These transforms are their world space default transforms</para></param>
            <param name="boneWorldSpaceIdentityInverseTransforms"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.ProcessAvatarBones(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})">
            <summary>
            <para>Modify the animation bones of a mesh</para>
            </summary>
            <param name="boneSpaceTransforms"></param>
            <param name="boneWorldSpaceIdentityTransforms"><para>The world space transforms of the bones</para><para>If no animations are playing, all bones will be Identity transforms. These transforms are their world space default transforms</para></param>
            <param name="boneWorldSpaceIdentityInverseTransforms"></param>
            <param name="avatarModelData"></param>
        </member>
        <member name="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.ProcessReadonlyHierarchyTransformedBones(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})">
            <summary>
            <para>Modify the animation bones of a mesh, after they have been transformed into bone-world space hierarchy</para>
            <para>Note: Before calling <see cref="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.ProcessReadonlyHierarchyTransformedBones(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})"/>, the bones will be transformed by their hieracrchy. This process is not required otherwise. Modifying a bone will have no effect on the rendererd avatar.</para>
            <para>This method will be most useful for getting the world position of avatar bones, to place props, etc.</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.CallProcessReadonlyHierarchyTransformedBones">
            <summary>
            <para>When true, <see cref="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.ProcessReadonlyHierarchyTransformedBones(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})"/> will be called after bones have been processed.</para>
            <para>Note: Before calling <see cref="M:Xen.Ex.Graphics.IAvatarAnimationBoneModifier.ProcessReadonlyHierarchyTransformedBones(Xen.Transform[],Xen.Ex.Graphics.Content.AvatarAnimationData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})"/>, the bones will be transformed by their hieracrchy. This process is not required otherwise. Modifying a bone will have no effect on the rendererd avatar.</para>
            <para>This method will be most useful for getting the world position of avatar bones, to place props, etc.</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.AvatarAnimationController">
            <summary>
            Controls animation streams and calulate transformed bone structures for a model
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Processor.AnimationProcessor">
            <summary>
            Abstract base class for an animation processor for models and avatars
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.PurgeAnimationStreamCaches">
            <summary>
            <para>Clears <i>all</i> global cached animations for this <see cref="T:Xen.Ex.Graphics.Content.ModelData"/>. The cache helps reduce allocation/garbage build up</para>
            <para>Note: This purge will effect all <see cref="T:Xen.Ex.Graphics.AnimationController"/> instances for the current <see cref="T:Xen.Ex.Graphics.Content.ModelData"/> Content</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.GetAnimationData(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.AnimationIndex(System.String)">
            <summary>
            <para>Gets an animation index by animation string name. -1 if not found.</para>
            <para>Performs a linear search of animations in the animation list</para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.GetTransformedBones(Xen.DrawState)">
            <summary>
            <para>Gets the transformed bones for this animation controller (Bones are represented in bone world space, not model world space - see remarks for details).</para>
            <para>Note: For off-screen models or Avatars, calling this method will force transform computation. For Async controllers, this method may cause the thread to wait for the animation processing to complete</para>
            </summary>
            <param name="state"></param>
            <returns></returns>
            <remarks>
            <para>
            Bone transforms are in transformed bone space. To Get the exact world transform of a bone, multiply <see cref="P:Xen.Ex.Graphics.Content.SkeletonData.BoneWorldTransforms"/> by the transformed bones.
            </para>
            </remarks>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.PlayLoopingAnimationData(Xen.Ex.Graphics.Content.AnimationData,System.Single)">
            <summary>
            Plays an animation that loops continuously, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationData"></param>
            <returns></returns>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.PlayAnimationData(Xen.Ex.Graphics.Content.AnimationData,System.Single,System.Single)">
            <summary>
            Plays an animation, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationData"></param>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
            <param name="fadeOutTime">Time, in seconds, to fade the animation out</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.ComputeAnimationBounds">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.OnBufferAnimationValues">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.OnBeginProcessAnimation">
            <summary>
            Called before animation processing
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.OnEndProcessAnimation">
            <summary>
            Called after animation processing
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.ResetTransforms">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Processor.AnimationProcessor.Dispose">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.AnimationProcessor.IsDisposed">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.AnimationProcessor.AnimationCount">
            <summary>Number of animations stored in this controller</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Processor.AnimationProcessor.ContentLoaded">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.AnimationIndex(System.String)">
            <summary>
            <para>Gets an animation index by animation string name. -1 if not found.</para>
            <para>Performs a linear search of animations in the animation list</para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayLoopingAnimation(System.Int32)">
            <summary>
            Plays an animation that loops continuously, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayLoopingAnimation(System.Int32,System.Single)">
            <summary>
            Plays an animation that loops continuously, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayAnimation(System.Int32)">
            <summary>
            Plays an animation, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayAnimation(System.Int32,System.Single,System.Single)">
            <summary>
            Plays an animation, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
            <param name="fadeOutTime">Time, in seconds, to fade the animation out</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayPresetAnimation(Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset,System.Boolean)">
            <summary>
            Plays a preset animation provided by the XNA runtime, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animation">The preset animation to play</param>
            <param name="useExpressions">When true, the avatar will display the expressions stored in the animation</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayPresetAnimation(Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays a preset animation provided by the XNA runtime, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animation">The preset animation to play</param>
            <param name="useExpressions">When true, the avatar will display the expressions stored in the animation</param>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
            <param name="fadeOutTime">Time, in seconds, to fade the animation out</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayPresetLoopingAnimation(Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset,System.Boolean,System.Single)">
            <summary>
            Plays a preset animation provided by the XNA runtime, looping continuously until stopped. Returns a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animation">The preset animation to play</param>
            <param name="useExpressions">When true, the avatar will display the expressions stored in the animation</param>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PlayPresetLoopingAnimation(Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset,System.Boolean)">
            <summary>
            Plays a preset animation provided by the XNA runtime, looping continuously until stopped. Returns a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animation">The preset animation to play</param>
            <param name="useExpressions">When true, the avatar will display the expressions stored in the animation</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.ResetTransforms">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.OnBufferAnimationValues">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.PurgeAnimationStreamCaches">
            <summary>
            <para>Clears <i>all</i> global cached animations for this <see cref="T:Xen.Ex.Graphics.Content.ModelData"/>. The cache helps reduce allocation/garbage build up</para>
            <para>Note: This purge will effect all <see cref="T:Xen.Ex.Graphics.AnimationController"/> instances for the current <see cref="T:Xen.Ex.Graphics.Content.ModelData"/> Content</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.GetAnimationData(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.ComputeAnimationBounds">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.OnBeginProcessAnimation">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AvatarAnimationController.OnEndProcessAnimation">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarAnimationController.AnimationBoneModifier">
            <summary>
            Gets/Sets an animation modifier that can modify animation bones before and after the bones are transformed into a hierarchy
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarAnimationController.AnimationCount">
            <summary>Number of animations stored in this controller</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AvatarAnimationController.ContentLoaded">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Geometry.Sphere">
            <summary>
            A simple class that constructs spherical geometry
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create spherical geometry
            </summary>
            <param name="size">Size of the sphere</param>
            <param name="tesselation">Tesselation of the sphere. Approx number of triangles will be tesselation*tesselation</param>
            <param name="storePositionOnly">Store only position, no normals or texture coordinates</param>
            <param name="hemisphere">Generate a hemisphere</param>
            <param name="sizeToInternalSphere">Expand the sphere to compensate for smaller internal size caused by low tesselation</param>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.GenerateGeometry(Microsoft.Xna.Framework.Vector3,System.Int32,System.Boolean,System.Boolean,System.Boolean,Xen.Graphics.IVertices@,Xen.Graphics.IIndices@)">
            <summary>
            Static method to generate the geometry data used by the sphere
            </summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            Create spherical geometry
            </summary>
            <param name="size">Size of the sphere</param>
            <param name="tesselation">Tesselation of the sphere. Approx number of triangles will be tesselation*tesselation</param>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.CullTest(Xen.ICuller)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.CullTest(Xen.ICuller,System.Single)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.Draw(Xen.DrawState)">
            <summary>Draw the sphere</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.DrawBatch(Xen.DrawState,Xen.Graphics.InstanceBuffer)">
            <summary>Draw this sphere as a batch</summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.DrawBatch(Xen.DrawState,Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Geometry.Sphere.CullTest(Xen.ICuller,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Cull test this sphere, using a world matrix to provide the position of the sphere
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.Sphere.Radius">
            <summary>
            Radius of the sphere
            </summary>
        </member>
        <member name="P:Xen.Ex.Geometry.Sphere.GeometricRadius">
            <summary>
            Radius of the sphere mesh. This value will be larger than <see cref="P:Xen.Ex.Geometry.Sphere.Radius"/> if 'sizeToInternalSphere' is specified as true in the extended constructor
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement">
            <summary>
            <para>Draws 2D <see cref="T:Xen.Ex.Graphics2D.Element"/> particles as Billboard Sprites (Rotation is generated per particle)</para>
            <para>Particles will be scaled by thier velocity length, and rotated in the direction they are travelling</para>
            <para>For use with a <see cref="T:Xen.Ex.Graphics.ParticleSystem"/> instance.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.#ctor(Xen.Ex.Graphics.ParticleSystem,System.Boolean,System.Single)">
            <summary>
            Construct the Velocity Billboard particles
            </summary>
            <param name="system"></param>
            <param name="useRotationValueToScaleVelocityEffect"><para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para><para>Allowing per-particle scaling based on velocity</para></param>
            <param name="velocityExtentionScale">Scale factor to extend the particles</param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.#ctor(Xen.Ex.Graphics.ParticleSystem,System.Boolean)">
            <summary>
            Construct the particle drawer
            </summary>
            <param name="system"></param>
            <param name="useRotationValueToScaleVelocityEffect"><para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para><para>Allowing per-particle scaling based on velocity</para></param>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.DrawGpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            draws the particles on a GPU system
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.DrawCpuParticles(Xen.DrawState,Xen.Ex.Graphics.Content.ParticleSystemTypeData,System.UInt32,Xen.Graphics.AlphaBlendState,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            draws the particles from a CPU system
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.VelocityExtentionScale">
            <summary>
            Gets/Sets a scale factor to control how much the particles are extended by their velocity
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.Display.VelocityBillboardParticles2DElement.UseRotationValueToScaleVelocityEffect">
            <summary>
            <para>Gets/Sets a boolean flag to indicate that the Rotation value will be used to scale the Velocity scaling effect</para>
            <para>When true, the per particle rotation value will be used to scale the velocity stretching effect</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.IAnimationBoneModifier">
            <summary>
            <para>Interface to a class that may modify the transforms of a models animation bone hierarchy, through a <see cref="T:Xen.Ex.Graphics.AnimationController"/></para>
            <para>Note: Methods implemented for this interface should be thread safe</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.IAnimationBoneModifier.PreProcessAnimation(Xen.Transform[],Xen.Ex.Graphics.Content.ModelData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})">
            <summary>
            <para>Modify the bones of the animation before the animation is processed. Returning false will prevent the animation / blending process from starting.</para>
            <para>Use this method to replace the entire animation, and prevent the standard animations from being processed.</para>
            <para>Any modifications to <paramref name="nonAnimatedBones"/> will have no effect unless false is returned.</para>
            </summary>
            <param name="nonAnimatedBones"></param>
            <param name="modelData"></param>
            <param name="boneWorldSpaceIdentityTransforms"><para>The world space transforms of the bones</para><para>If no animations are playing, all bones will be Identity transforms. These transforms are their world space default transforms</para></param>
            <param name="boneWorldSpaceIdentityInverseTransforms"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.IAnimationBoneModifier.ProcessBonesPreTransform(Xen.Transform[],Xen.Ex.Graphics.Content.ModelData,Xen.Ex.ReadOnlyArrayCollection{Xen.Transform},Xen.Ex.ReadOnlyArrayCollection{Xen.Transform})">
            <summary>
            <para>Modify the animation bones of a mesh, before the bones are transformed into bone-world space hierarchy</para>
            <para>Return true to have the continue with the animation hierarchy transform, return false if the animation is completed processing</para>
            </summary>
            <param name="boneSpaceTransforms"></param>
            <param name="boneWorldSpaceIdentityTransforms"><para>The world space transforms of the bones</para><para>If no animations are playing, all bones will be Identity transforms. These transforms are their world space default transforms</para></param>
            <param name="boneWorldSpaceIdentityInverseTransforms"></param>
            <param name="modelData"></param>
            <returns>Return true to have the continue with the animation hierarchy transform, return false if the animation is completed processing</returns>
        </member>
        <member name="M:Xen.Ex.Graphics.IAnimationBoneModifier.ProcessBonesPostTransform(Xen.Transform[],Xen.Ex.Graphics.Content.ModelData)">
            <summary>
            Modify the animation bones of a mesh, after they have been transformed into world space hierarchy,
            <para>This is the final format of the bones, before they are converted be used to render the model</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics.AnimationController">
            <summary>
            Controls animation streams and calulate transformed bone structures for a model
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.PlayLoopingAnimation(System.Int32)">
            <summary>
            Plays an animation that loops continuously, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.PlayLoopingAnimation(System.Int32,System.Single)">
            <summary>
            Plays an animation that loops continuously, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.PlayAnimation(System.Int32)">
            <summary>
            Plays an animation, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.PlayAnimation(System.Int32,System.Single,System.Single)">
            <summary>
            Plays an animation, returning a <see cref="T:Xen.Ex.Graphics.AnimationInstance"/> structure
            </summary>
            <param name="animationIndex"></param>
            <param name="fadeInTime">Time, in seconds, to fade the animation in</param>
            <param name="fadeOutTime">Time, in seconds, to fade the animation out</param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.ResetTransforms">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.AnimationIndex(System.String)">
            <summary>
            <para>Gets an animation index by animation string name. -1 if not found.</para>
            <para>Performs a linear search of animations in the <see cref="P:Xen.Ex.Graphics.AnimationController.ModelData"/></para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.OnBufferAnimationValues">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.PurgeAnimationStreamCaches">
            <summary>
            <para>Clears <i>all</i> global cached animations for this <see cref="P:Xen.Ex.Graphics.AnimationController.ModelData"/>. The cache helps reduce allocation/garbage build up</para>
            <para>Note: This purge will effect all <see cref="T:Xen.Ex.Graphics.AnimationController"/> instances for the current <see cref="P:Xen.Ex.Graphics.AnimationController.ModelData"/> Content</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.GetAnimationData(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.ComputeAnimationBounds">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.OnBeginProcessAnimation">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationController.OnEndProcessAnimation">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationController.AnimationBoneModifier">
            <summary>
            Gets/Sets an animation modifier that can modify animation bones before and after the bones are transformed into a hierarchy
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationController.AnimationCount">
            <summary>Number of animations stored in this controller</summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationController.ContentLoaded">
            <summary></summary>
        </member>
        <member name="T:Xen.Ex.Graphics.AnimationInstance">
            <summary>
            Handle to an animation that is playing through an <see cref="T:Xen.Ex.Graphics.AnimationController"/>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationInstance.GetFadeScaledWeighting(Xen.IState)">
            <summary>
            <para>The weighting of this animation instance, multiplied by the fadein/fadeout value of the animation.</para>
            </summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationInstance.SeekAnimation(System.Single)">
            <summary>
            Seeks the animation to a new time. This may require decoding extra animation frames
            </summary>
            <param name="animationTime"></param>
            <remarks>True if the seek was successful</remarks>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationInstance.StopAnimation">
            <summary></summary>
        </member>
        <member name="M:Xen.Ex.Graphics.AnimationInstance.StopAnimation(System.Single)">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.ValidAnimation">
            <summary>
            Returns true if this animation instance exists
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.AnimationFinished">
            <summary>
            True if the animation has finished playing, any changes made will have no effect if true.
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.PlaybackSpeed">
            <summary>
            Playback speed multiplier. 1.0f is the default, for normal playback speed. Set to 0.5f for half speed, etc.
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.AnimationName">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.Time">
            <summary>
            Current playback time in the duration of this animation instance (seconds)
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.AnimationDuration">
            <summary>
            <para>Duration of the animation, in seconds</para>
            <para>This value may be slightly larger if <see cref="P:Xen.Ex.Graphics.AnimationInstance.LoopTransitionEnabled"/> is true</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.Weighting">
            <summary>
            <para>The weighting of this animation instance. 1.0f by default.</para>
            <para>When set to 0.0, the animation will have no effect. If set to 0.5f, the animation will only have a 50 percent effect on rotations, translations, etc.</para>
            <para>Modify this value to fade animations in and out</para>
            </summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.Enabled">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.Looping">
            <summary></summary>
        </member>
        <member name="P:Xen.Ex.Graphics.AnimationInstance.LoopTransitionEnabled">
            <summary>
            <para>If true, the animation will smoothly transition from the last frame to the first during a loop.</para>
            <para>Defaults to true for looping animations</para>
            </summary>
        </member>
        <member name="T:Xen.Ex.Graphics2D.FillCustomTexture">
            <summary><para>Technique 'FillCustomTexture' generated from file 'FillTex.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 2 instruction slots used (1 texture, 1 arithmetic), 0 registers</para></summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.#ctor">
            <summary>Construct an instance of the 'FillCustomTexture' shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Setup shader static values</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Boolean,System.Boolean,Xen.Graphics.ShaderSystem.ShaderExtension)">
            <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase)">
            <summary>Warm (Preload) the shader</summary><param name="state"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.Changed">
            <summary>True if a shader constant has changed since the last Bind()</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.GetVertexInputCount">
            <summary>Returns the number of vertex inputs used by this shader</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.gd">
            <summary>Static graphics ID</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.fx">
            <summary>Static effect container instance</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vbreg_change">
            <summary/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vireg_change">
            <summary/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.GetExtensionSupport(System.Boolean@,System.Boolean@)">
            <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.sc0">
            <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.sc1">
            <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.sc2">
            <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.sid0">
            <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.tid0">
            <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.ptc">
            <summary>Pixel samplers/textures changed</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vin">
            <summary>array storing vertex usages, and element indices</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vreg">
            <summary>Vertex shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.vireg">
            <summary>Instancing shader register storage</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.ptx">
            <summary>Bound pixel textures</summary>
        </member>
        <member name="F:Xen.Ex.Graphics2D.FillCustomTexture.pts">
            <summary>Bound pixel samplers</summary>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Xen.Graphics.TextureSamplerState)">
            <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="M:Xen.Ex.Graphics2D.FillCustomTexture.SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="M:Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID(System.String)"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
        </member>
        <member name="P:Xen.Ex.Graphics2D.FillCustomTexture.CustomTextureSampler">
            <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.FillCustomTexture.CustomTexture">
            <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
        </member>
        <member name="P:Xen.Ex.Graphics2D.FillCustomTexture.fxb">
            <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
        </member>
    </members>
</doc>
