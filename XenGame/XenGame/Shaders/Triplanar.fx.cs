// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Triplanar.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'Triplanar' generated from file 'Triplanar.fx'</para><para>Vertex Shader: approximately 11 instruction slots used, 7 registers</para><para>Pixel Shader: approximately 34 instruction slots used (4 texture, 30 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "47301628-bcee-4c1a-8aea-2eb652e288f0")]
	public sealed class Triplanar : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'Triplanar' shader</summary>
		public Triplanar()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(3200));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private static void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			Triplanar.gd = state.DeviceUniqueIndex;
			Triplanar.cid0 = state.GetNameUniqueID("fogColor");
			Triplanar.cid1 = state.GetNameUniqueID("fogEnd");
			Triplanar.cid2 = state.GetNameUniqueID("fogStart");
			Triplanar.cid3 = state.GetNameUniqueID("lightDirection");
			Triplanar.cid4 = state.GetNameUniqueID("textureScale");
			Triplanar.sid0 = state.GetNameUniqueID("BottomTextureSampler");
			Triplanar.sid1 = state.GetNameUniqueID("SideTextureSampler");
			Triplanar.sid2 = state.GetNameUniqueID("TopTextureSampler");
			Triplanar.tid0 = state.GetNameUniqueID("SideTexture");
			Triplanar.tid1 = state.GetNameUniqueID("BottomTexture");
			Triplanar.tid2 = state.GetNameUniqueID("TopTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != Triplanar.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			Microsoft.Xna.Framework.Vector4 unused = new Microsoft.Xna.Framework.Vector4();
			// Set the value for attribute 'worldMatrix'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref unused, ref this.sc0));
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc1));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				Triplanar.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				Triplanar.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(Triplanar.fx.vsb_c, ref this.sc2));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc3));
				if ((this.vireg_change == true))
				{
					Triplanar.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref Triplanar.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((Triplanar.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				Triplanar.gdInit(state);
			}
			Triplanar.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out Triplanar.fx, Triplanar.fxb, 13, 40);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(Triplanar.vin[i]));
			index = Triplanar.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupport(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'fogColor'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float3 fogColor'</summary><param name="value"/>
		public void SetFogColor(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.preg[3] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float3 fogColor'</summary>
		public Microsoft.Xna.Framework.Vector3 FogColor
		{
			set
			{
				this.SetFogColor(ref value);
			}
		}
		/// <summary>Name ID for 'fogEnd'</summary>
		private static int cid1;
		/// <summary>Assign the shader value 'float fogEnd'</summary>
		public float FogEnd
		{
			set
			{
				this.preg[2] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'fogStart'</summary>
		private static int cid2;
		/// <summary>Assign the shader value 'float fogStart'</summary>
		public float FogStart
		{
			set
			{
				this.preg[1] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'lightDirection'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float3 lightDirection'</summary><param name="value"/>
		public void SetLightDirection(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.preg[4] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float3 lightDirection'</summary>
		public Microsoft.Xna.Framework.Vector3 LightDirection
		{
			set
			{
				this.SetLightDirection(ref value);
			}
		}
		/// <summary>Name ID for 'textureScale'</summary>
		private static int cid4;
		/// <summary>Assign the shader value 'float textureScale'</summary>
		public float TextureScale
		{
			set
			{
				this.preg[0] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldMatrix'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc3;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BottomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState BottomTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D SideTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState SideTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TopTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState TopTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture SideTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture SideTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BottomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BottomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture TopTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture TopTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BottomTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D SideTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D TopTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture SideTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture BottomTexture'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture TopTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,3,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[7];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,80,135,0,1,3,131,0,1,1,131,0,1,144,135,0,1,7,131,0,1,4,131,0,1,1,229,0,0,142,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,8,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,176,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,24,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,60,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,96,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,132,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,156,131,0,0,1,184,138,0,0,1,1,1,20,1,0,1,0,1,1,1,48,138,0,0,1,14,1,188,1,0,1,0,1,14,1,216,138,0,0,1,15,1,36,1,0,1,0,1,15,1,56,138,0,0,1,15,1,72,1,0,1,0,1,15,1,92,138,0,0,1,15,1,108,1,0,1,0,1,15,1,128,138,0,0,1,16,1,68,135,0,0,1,3,1,0,1,0,1,15,1,192,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,148,1,0,1,0,1,15,1,144,131,0,0,1,93,134,0,0,1,15,1,172,1,0,1,0,1,15,1,168,1,0,1,0,1,15,1,244,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,200,1,0,1,0,1,15,1,196,131,0,0,1,93,134,0,0,1,15,1,224,1,0,1,0,1,15,1,220,1,0,1,0,1,16,1,52,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,8,1,0,1,0,1,16,1,4,131,0,0,1,93,134,0,0,1,16,1,32,1,0,1,0,1,16,1,28,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,28,1,16,1,42,1,17,131,0,0,1,1,1,140,1,0,1,0,1,1,1,144,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,80,1,16,1,0,1,5,132,0,0,1,4,134,0,0,1,28,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,160,0,0,1,62,1,204,1,204,1,205,1,63,1,25,1,160,1,40,1,191,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,61,1,204,1,204,1,205,1,0,1,36,1,96,1,4,1,32,1,10,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,12,1,16,1,14,1,82,1,0,1,18,1,0,1,0,1,1,132,0,0,1,96,1,15,1,196,1,0,1,18,133,0,0,1,96,1,21,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,4,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,16,1,129,1,31,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,20,1,135,1,3,1,3,1,0,1,98,1,177,1,108,1,130,1,128,1,254,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,3,1,0,1,76,1,142,1,0,1,2,1,0,1,252,1,198,1,27,1,160,1,3,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,183,1,27,1,177,1,225,1,2,1,0,1,0,1,8,1,24,1,32,1,129,1,159,1,31,1,240,1,87,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,40,1,32,1,129,1,159,1,31,1,240,1,87,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,8,1,64,1,129,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,20,1,129,1,0,1,2,1,0,1,190,1,190,1,108,1,48,1,4,1,4,1,2,1,88,1,24,1,2,1,1,1,2,131,108,0,1,32,1,1,1,2,1,130,1,76,1,135,1,1,1,5,1,0,1,198,1,180,1,27,1,225,1,3,1,4,1,1,1,200,1,7,1,0,1,4,1,0,1,108,1,192,1,0,1,161,1,2,1,4,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,183,1,180,1,235,1,3,1,2,1,5,1,200,1,7,1,0,1,1,1,0,1,108,1,98,1,192,1,235,1,3,1,1,1,2,1,184,1,33,1,0,1,0,1,5,1,190,1,190,1,67,1,208,1,4,1,0,1,1,1,20,1,1,131,0,0,1,108,1,198,1,177,1,162,1,0,1,255,1,0,1,14,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,254,1,1,1,200,1,7,1,0,1,0,1,1,1,192,1,108,1,192,1,203,1,1,1,0,1,3,1,200,1,7,131,0,0,1,27,1,192,1,192,1,203,1,0,1,0,1,3,1,20,1,135,1,128,1,0,1,0,1,192,1,27,1,27,1,129,1,0,1,255,1,255,147,0,0,1,2,132,255,0,138,0,0,1,2,1,60,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,28,1,0,1,0,1,1,1,32,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,7,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,134,0,0,1,1,1,32,1,0,1,33,1,0,1,6,138,0,0,1,28,1,99,131,0,0,1,1,131,0,0,1,6,131,0,0,1,3,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,48,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,112,1,80,1,0,1,1,1,113,1,81,1,0,1,2,1,18,1,82,1,0,1,0,1,16,1,22,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,20,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,48,1,15,1,18,1,0,1,18,135,0,0,1,80,1,18,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,2,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,2,1,3,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,2,1,5,1,4,1,200,1,15,1,0,1,6,1,0,1,108,1,248,1,148,1,235,1,2,1,1,1,4,1,200,1,8,1,0,1,4,1,0,1,233,1,167,1,0,1,175,1,6,1,10,1,0,1,200,1,4,1,0,1,4,1,0,1,233,1,167,1,0,1,175,1,6,1,9,1,0,1,200,1,2,1,0,1,4,1,0,1,233,1,167,1,0,1,175,1,6,1,8,1,0,1,200,1,1,1,0,1,4,1,0,1,233,1,167,1,0,1,175,1,6,1,7,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,4,1,4,1,0,1,76,1,30,1,3,1,3,1,0,1,198,1,140,1,27,1,225,1,0,1,3,1,2,1,200,1,7,131,0,0,1,177,1,180,1,21,1,235,1,0,1,5,1,3,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,4,1,200,1,7,1,128,1,1,1,0,1,108,1,192,1,0,1,225,1,3,1,2,1,0,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,180,1,235,1,0,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,28,1,16,1,42,1,17,131,0,0,1,1,1,140,1,0,1,0,1,1,1,144,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,80,1,16,1,0,1,5,132,0,0,1,4,134,0,0,1,28,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,160,0,0,1,62,1,204,1,204,1,205,1,63,1,25,1,160,1,40,1,191,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,61,1,204,1,204,1,205,1,0,1,36,1,96,1,4,1,32,1,10,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,12,1,16,1,14,1,82,1,0,1,18,1,0,1,0,1,1,132,0,0,1,96,1,15,1,196,1,0,1,18,133,0,0,1,96,1,21,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,4,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,16,1,129,1,31,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,20,1,135,1,3,1,3,1,0,1,98,1,177,1,108,1,130,1,128,1,254,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,3,1,0,1,76,1,142,1,0,1,2,1,0,1,252,1,198,1,27,1,160,1,3,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,183,1,27,1,177,1,225,1,2,1,0,1,0,1,8,1,24,1,32,1,129,1,159,1,31,1,240,1,87,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,40,1,32,1,129,1,159,1,31,1,240,1,87,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,8,1,64,1,129,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,20,1,129,1,0,1,2,1,0,1,190,1,190,1,108,1,48,1,4,1,4,1,2,1,88,1,24,1,2,1,1,1,2,131,108,0,1,32,1,1,1,2,1,130,1,76,1,135,1,1,1,5,1,0,1,198,1,180,1,27,1,225,1,3,1,4,1,1,1,200,1,7,1,0,1,4,1,0,1,108,1,192,1,0,1,161,1,2,1,4,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,183,1,180,1,235,1,3,1,2,1,5,1,200,1,7,1,0,1,1,1,0,1,108,1,98,1,192,1,235,1,3,1,1,1,2,1,184,1,33,1,0,1,0,1,5,1,190,1,190,1,67,1,208,1,4,1,0,1,1,1,20,1,1,131,0,0,1,108,1,198,1,177,1,162,1,0,1,255,1,0,1,14,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,254,1,1,1,200,1,7,1,0,1,0,1,1,1,192,1,108,1,192,1,203,1,1,1,0,1,3,1,200,1,7,131,0,0,1,27,1,192,1,192,1,203,1,0,1,0,1,3,1,20,1,135,1,128,1,0,1,0,1,192,1,27,1,27,1,129,1,0,1,255,1,255,147,0,0,1,1,132,255,0,138,0,0,1,17,1,112,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,32,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,14,1,160,1,0,1,0,1,14,1,200,138,0,0,1,14,1,120,131,0,0,1,28,1,0,1,0,1,14,1,107,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,100,131,0,0,1,68,1,0,1,2,131,0,0,1,7,133,0,0,1,76,131,0,0,1,92,131,0,0,1,204,1,0,1,2,1,0,1,7,1,0,1,216,133,0,0,1,212,131,0,0,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,0,1,33,1,0,1,7,138,0,0,1,28,1,99,131,0,0,1,1,131,0,0,1,4,131,0,0,1,5,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,16,1,7,1,0,1,48,1,32,1,8,1,0,1,0,1,112,1,80,1,0,1,3,1,113,1,81,1,0,1,4,1,18,1,82,131,0,0,1,40,131,0,0,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,38,180,0,0,1,63,1,128,1,0,1,0,1,64,1,64,134,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,32,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,35,1,32,1,41,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,6,1,0,1,148,1,198,1,0,1,161,1,0,1,255,1,0,1,92,134,0,0,1,198,1,226,1,0,1,0,1,6,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,5,1,7,1,0,1,200,1,15,1,0,1,0,1,160,1,27,1,136,1,0,1,161,1,5,1,8,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,5,1,9,1,6,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,5,1,9,1,4,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,171,1,5,1,8,1,0,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,5,1,7,1,2,1,92,1,2,1,0,1,6,1,0,131,27,0,1,161,1,1,1,0,1,6,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,5,1,7,1,2,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,148,1,171,1,5,1,8,1,0,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,5,1,9,1,4,1,92,1,8,1,0,1,6,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,6,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,5,1,9,1,4,1,200,1,15,1,0,1,0,1,160,1,108,1,255,1,143,1,171,1,5,1,8,1,0,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,5,1,7,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,248,1,167,1,0,1,239,1,0,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,6,1,0,1,190,1,190,1,0,1,176,1,2,1,0,1,0,1,200,1,4,1,0,1,6,1,0,1,190,1,190,1,0,1,176,1,2,1,1,1,0,1,200,1,15,1,0,1,7,1,0,1,176,1,27,1,166,1,108,1,255,1,1,1,2,1,200,1,8,1,0,1,2,1,0,1,85,1,62,1,0,1,175,1,7,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,85,1,62,1,0,1,175,1,7,1,2,1,0,1,200,1,3,1,0,1,2,1,0,1,196,1,25,1,0,1,224,1,6,1,6,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,2,1,2,1,0,1,200,1,1,131,0,0,1,191,1,190,1,0,1,240,1,5,1,3,1,0,1,200,1,2,131,0,0,1,195,1,190,1,0,1,240,1,0,1,3,1,0,1,76,1,132,131,0,0,1,191,1,190,1,27,1,240,1,4,1,3,1,1,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,128,1,1,1,0,1,27,1,192,1,0,1,225,1,0,1,1,1,0,1,200,1,1,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,4,1,0,1,200,1,2,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,5,1,0,1,200,1,4,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,6,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,28,1,16,1,42,1,17,131,0,0,1,1,1,140,1,0,1,0,1,1,1,144,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,80,1,16,1,0,1,5,132,0,0,1,4,134,0,0,1,28,1,99,1,0,1,7,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,160,0,0,1,62,1,204,1,204,1,205,1,63,1,25,1,160,1,40,1,191,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,61,1,204,1,204,1,205,1,0,1,36,1,96,1,4,1,32,1,10,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,12,1,16,1,14,1,82,1,0,1,18,1,0,1,0,1,1,132,0,0,1,96,1,15,1,196,1,0,1,18,133,0,0,1,96,1,21,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,4,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,16,1,129,1,31,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,20,1,135,1,3,1,3,1,0,1,98,1,177,1,108,1,130,1,128,1,254,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,3,1,0,1,76,1,142,1,0,1,2,1,0,1,252,1,198,1,27,1,160,1,3,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,183,1,27,1,177,1,225,1,2,1,0,1,0,1,8,1,24,1,32,1,129,1,159,1,31,1,240,1,87,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,40,1,32,1,129,1,159,1,31,1,240,1,87,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,8,1,64,1,129,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,20,1,129,1,0,1,2,1,0,1,190,1,190,1,108,1,48,1,4,1,4,1,2,1,88,1,24,1,2,1,1,1,2,131,108,0,1,32,1,1,1,2,1,130,1,76,1,135,1,1,1,5,1,0,1,198,1,180,1,27,1,225,1,3,1,4,1,1,1,200,1,7,1,0,1,4,1,0,1,108,1,192,1,0,1,161,1,2,1,4,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,183,1,180,1,235,1,3,1,2,1,5,1,200,1,7,1,0,1,1,1,0,1,108,1,98,1,192,1,235,1,3,1,1,1,2,1,184,1,33,1,0,1,0,1,5,1,190,1,190,1,67,1,208,1,4,1,0,1,1,1,20,1,1,131,0,0,1,108,1,198,1,177,1,162,1,0,1,255,1,0,1,14,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,254,1,1,1,200,1,7,1,0,1,0,1,1,1,192,1,108,1,192,1,203,1,1,1,0,1,3,1,200,1,7,131,0,0,1,27,1,192,1,192,1,203,1,0,1,0,1,3,1,20,1,135,1,128,1,0,1,0,1,192,1,27,1,27,1,129,1,0,1,255,1,255,148,0,0,132,255,0,138,0,0,1,2,1,4,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,68,131,0,0,1,192,135,0,0,1,36,135,0,0,1,244,139,0,0,1,204,131,0,0,1,28,131,0,0,1,191,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,184,131,0,0,1,48,1,0,1,2,131,0,0,1,7,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,192,1,0,1,33,1,0,1,2,138,0,0,1,28,1,99,131,0,0,1,1,131,0,0,1,2,131,0,0,1,5,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,48,1,4,1,0,1,0,1,112,1,80,1,0,1,3,1,113,1,81,1,0,1,4,1,18,1,82,131,0,0,1,12,131,0,0,1,13,1,0,1,0,1,16,1,14,1,0,1,0,1,16,1,11,1,0,1,0,1,16,1,10,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,80,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,80,1,10,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,136,132,0,0,1,200,1,4,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,2,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,76,1,136,1,0,1,2,1,0,1,167,1,167,1,27,1,175,1,1,1,3,1,1,1,200,1,15,1,128,1,62,132,0,0,1,226,1,2,1,2,1,0,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,128,1,1,1,0,1,27,1,192,1,0,1,225,1,0,1,1,1,0,1,200,1,1,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,4,1,0,1,200,1,2,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,5,1,0,1,200,1,4,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,6,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {232,50,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,222,252,102,242,251,175,141,191,233,255,127,146,126,247,235,211,255,127,29,253,236,135,253,252,122,244,255,223,255,178,249,253,167,191,134,195,235,55,80,68,126,221,95,227,103,15,47,238,119,197,253,254,65,166,223,191,233,55,145,239,254,173,95,227,103,175,223,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,19,127,16,155,82,124,56,65,160,102,226,180,223,238,55,149,239,126,29,253,255,55,17,167,105,63,5,250,249,141,126,13,129,251,88,251,9,218,80,204,216,236,252,26,191,189,105,243,7,12,181,217,253,53,126,103,211,230,15,27,106,179,247,107,252,246,192,253,55,211,118,254,243,107,209,255,241,90,247,115,51,86,208,226,55,139,124,143,191,99,239,253,24,253,255,73,153,47,103,197,242,226,215,216,147,216,58,246,62,226,226,216,251,191,33,253,255,108,217,180,217,114,10,8,95,98,12,175,231,217,44,175,101,60,192,11,227,53,185,132,212,123,247,207,163,255,255,93,222,223,191,21,53,222,241,38,237,239,163,184,251,223,210,216,27,207,239,70,8,28,120,52,251,54,253,254,251,122,127,151,244,251,31,228,127,255,155,201,79,208,228,31,210,207,65,191,63,69,191,255,211,232,179,63,137,254,255,167,234,223,127,29,253,254,87,209,255,255,183,72,219,127,142,62,251,167,188,182,255,25,253,254,31,1,159,223,172,223,246,55,162,207,126,131,223,204,181,253,221,232,247,84,219,253,122,242,131,219,255,223,244,152,225,254,85,64,242,215,254,191,255,239,255,235,255,254,201,95,227,228,205,241,147,223,137,254,252,241,95,83,62,3,221,126,39,105,150,254,78,244,89,169,239,255,186,244,111,75,63,255,48,250,255,191,246,107,24,57,248,181,126,141,127,79,97,254,119,252,217,175,73,255,253,122,191,198,47,215,207,126,157,95,19,159,253,90,244,89,242,107,252,70,218,185,228,59,254,218,191,246,215,228,214,191,14,243,192,207,198,163,50,242,215,254,58,196,17,191,38,255,231,125,190,59,240,249,94,255,115,250,248,222,239,191,243,107,124,81,76,235,170,169,206,219,116,235,213,157,244,219,207,95,63,79,133,243,210,147,106,177,42,74,250,229,225,120,239,211,241,195,251,123,227,189,131,253,253,95,227,39,136,100,191,238,175,241,155,254,69,127,206,159,253,219,255,131,191,237,223,249,47,31,252,243,255,220,63,119,68,255,255,236,119,33,114,210,152,255,32,226,210,63,73,126,255,53,255,160,95,211,254,254,107,253,65,68,45,254,253,215,64,106,236,55,248,77,255,34,243,251,175,233,253,254,107,209,239,191,46,79,193,175,77,112,126,141,191,232,215,252,53,254,147,63,233,9,253,241,107,254,26,191,41,253,253,159,253,65,191,230,111,240,159,253,69,79,248,123,249,251,215,162,191,127,111,22,137,95,159,254,254,234,79,226,54,248,156,223,249,245,255,32,130,245,23,209,103,127,46,201,215,175,253,107,241,223,95,253,69,230,123,226,46,250,249,21,126,247,254,254,107,8,206,255,253,7,253,122,140,207,111,192,191,255,186,10,235,215,162,247,204,223,210,31,250,250,74,191,79,20,223,191,140,241,253,181,8,191,95,243,215,248,239,255,160,95,131,240,251,117,20,191,95,139,219,255,26,252,158,188,99,198,248,159,121,239,252,103,145,119,254,26,126,231,119,35,156,128,199,175,243,107,252,103,127,209,111,160,248,82,251,63,152,190,251,147,100,188,191,166,226,247,215,40,77,4,127,244,137,207,12,204,95,67,199,241,107,255,26,255,217,95,252,107,50,76,204,211,175,241,23,25,26,252,154,66,143,191,216,167,129,129,79,223,253,197,244,251,159,36,52,248,237,44,124,7,251,255,102,248,4,91,230,241,55,144,254,126,221,95,227,255,254,139,208,215,175,241,27,252,6,252,251,255,253,127,255,26,252,24,249,253,53,244,249,189,241,193,175,253,127,145,252,238,90,249,253,19,127,13,249,12,124,107,228,247,143,162,127,118,248,253,95,159,245,225,1,253,255,219,191,134,181,49,86,6,241,221,55,241,92,126,77,89,17,190,254,141,254,32,226,87,229,253,223,152,232,101,126,255,77,136,174,230,247,223,148,104,102,126,7,61,229,247,95,155,231,206,125,78,237,254,35,35,103,196,11,250,251,175,73,112,204,239,191,22,193,249,53,255,163,95,83,97,18,175,252,73,194,107,144,151,175,192,47,127,18,230,74,254,6,188,255,236,79,2,207,185,207,254,26,240,156,253,76,228,140,121,133,63,251,49,158,247,95,243,63,194,156,254,250,52,199,242,247,175,197,127,255,6,246,239,223,128,255,78,236,223,224,75,188,251,159,253,69,194,83,191,22,193,254,191,25,47,224,13,188,126,29,134,47,252,253,235,42,206,160,207,175,201,56,255,73,127,146,224,130,191,129,243,159,244,39,253,26,22,231,95,255,63,130,124,0,231,95,227,215,248,85,248,158,224,255,58,255,17,198,134,223,127,109,198,245,215,248,131,12,135,129,135,124,123,241,15,65,217,255,90,17,123,241,107,253,200,94,68,236,197,222,215,145,129,159,216,96,47,126,13,177,23,127,147,249,253,215,244,126,39,106,153,223,111,101,47,126,205,95,227,95,249,155,232,179,191,72,248,29,127,255,211,246,239,95,139,255,254,207,248,239,39,244,247,175,189,193,158,60,225,247,157,46,126,194,239,255,166,127,16,235,255,208,222,252,77,170,235,254,160,31,103,94,99,93,247,55,253,90,12,255,215,231,207,97,127,96,123,126,29,181,61,248,236,215,226,254,126,3,226,95,240,253,175,225,253,253,215,252,65,49,219,3,88,191,78,196,246,252,218,242,62,227,242,107,242,223,191,6,127,110,62,251,181,248,179,191,134,63,251,221,84,182,34,182,131,241,253,186,182,67,237,197,95,100,198,160,182,34,106,59,232,231,223,68,109,255,226,91,219,14,237,207,218,142,95,67,108,7,255,254,27,200,124,117,229,250,215,208,231,143,250,205,233,179,95,19,118,228,175,250,181,141,92,191,253,77,228,51,48,142,145,235,25,125,246,244,215,16,102,250,245,233,223,231,244,243,247,165,255,255,115,252,217,175,207,107,85,144,241,255,236,215,48,235,104,78,94,127,125,211,217,15,249,209,120,205,226,241,111,221,248,198,143,158,31,61,63,122,62,228,249,209,187,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,186,15,133,135,187,191,255,238,215,202,143,252,26,255,33,229,71,126,141,95,227,247,252,61,125,120,191,139,252,248,131,52,119,136,128,248,15,210,220,33,226,221,63,72,115,135,136,93,255,32,228,14,37,127,132,60,226,127,246,39,253,135,156,87,198,243,107,254,77,191,134,228,168,127,13,228,52,40,223,253,39,253,250,233,127,230,125,199,241,55,127,135,207,127,45,228,87,126,13,206,83,235,247,127,77,231,251,191,166,243,253,255,221,249,254,255,254,147,52,79,72,120,33,167,32,121,195,223,128,219,32,127,252,159,117,222,23,220,126,109,197,237,55,136,224,134,239,126,3,197,237,215,142,224,230,190,255,107,58,223,255,223,157,239,255,111,254,94,112,251,181,24,183,95,219,226,246,107,49,110,225,251,33,110,63,54,128,219,143,221,128,219,143,109,192,237,215,176,223,251,184,253,58,140,219,175,97,113,251,117,24,183,95,67,223,167,228,7,125,255,127,255,73,104,75,223,254,67,178,46,193,185,86,124,203,127,255,154,246,239,223,224,31,146,60,144,249,27,121,24,228,160,56,23,139,246,12,75,248,227,215,255,143,48,102,244,253,27,240,119,200,35,35,159,196,57,35,180,229,191,127,93,251,247,175,195,127,255,122,191,134,161,203,175,243,15,253,26,146,119,197,220,255,71,248,221,101,100,126,148,119,53,99,255,81,222,245,71,121,215,255,191,228,93,241,248,121,215,191,239,215,148,28,235,255,245,127,127,102,229,250,31,252,53,228,51,240,179,145,235,191,139,254,217,249,53,92,222,245,224,215,176,235,119,255,175,200,177,126,93,91,62,100,179,141,174,86,189,110,117,181,218,71,171,171,213,38,169,110,102,222,240,116,51,224,6,186,249,79,234,232,230,63,169,163,155,255,164,95,207,194,6,44,172,19,111,214,213,255,79,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.cid1))
			{
				this.FogEnd = value;
				return true;
			}
			if ((id == Triplanar.cid2))
			{
				this.FogStart = value;
				return true;
			}
			if ((id == Triplanar.cid4))
			{
				this.TextureScale = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.cid0))
			{
				this.SetFogColor(ref value);
				return true;
			}
			if ((id == Triplanar.cid3))
			{
				this.SetLightDirection(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.sid0))
			{
				this.BottomTextureSampler = value;
				return true;
			}
			if ((id == Triplanar.sid1))
			{
				this.SideTextureSampler = value;
				return true;
			}
			if ((id == Triplanar.sid2))
			{
				this.TopTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.tid0))
			{
				this.SideTexture = value;
				return true;
			}
			if ((id == Triplanar.tid1))
			{
				this.BottomTexture = value;
				return true;
			}
			if ((id == Triplanar.tid2))
			{
				this.TopTexture = value;
				return true;
			}
			return false;
		}
	}
}
