// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Triplanar.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'Triplanar' generated from file 'Triplanar.fx'</para><para>Vertex Shader: approximately 37 instruction slots used, 6 registers</para><para>Pixel Shader: approximately 47 instruction slots used (8 texture, 39 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "5b4ea50c-b2cb-4045-9622-2f93479d1c42")]
	public sealed class Triplanar : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'Triplanar' shader</summary>
		public Triplanar()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[3] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[4] = ((Xen.Graphics.TextureSamplerState)(3200));
			this.pts[5] = ((Xen.Graphics.TextureSamplerState)(3200));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			Triplanar.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			Triplanar.cid0 = state.GetNameUniqueID("cameraPosition");
			Triplanar.cid1 = state.GetNameUniqueID("lightDirection");
			Triplanar.cid2 = state.GetNameUniqueID("fogColor");
			Triplanar.cid3 = state.GetNameUniqueID("fogEnd");
			Triplanar.cid4 = state.GetNameUniqueID("fogStart");
			Triplanar.cid5 = state.GetNameUniqueID("textureScale");
			Triplanar.sid0 = state.GetNameUniqueID("BottomColorSampler");
			Triplanar.sid1 = state.GetNameUniqueID("BottomNormalSampler");
			Triplanar.sid2 = state.GetNameUniqueID("SideColorSampler");
			Triplanar.sid3 = state.GetNameUniqueID("SideNormalSampler");
			Triplanar.sid4 = state.GetNameUniqueID("TopColorSampler");
			Triplanar.sid5 = state.GetNameUniqueID("TopNormalSampler");
			Triplanar.tid0 = state.GetNameUniqueID("SideColor");
			Triplanar.tid1 = state.GetNameUniqueID("SideNormal");
			Triplanar.tid2 = state.GetNameUniqueID("BottomColor");
			Triplanar.tid3 = state.GetNameUniqueID("BottomNormal");
			Triplanar.tid4 = state.GetNameUniqueID("TopColor");
			Triplanar.tid5 = state.GetNameUniqueID("TopNormal");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != Triplanar.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				Triplanar.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				Triplanar.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(Triplanar.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					Triplanar.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref Triplanar.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((Triplanar.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			Triplanar.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out Triplanar.fx, Triplanar.fxb, 40, 56);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(Triplanar.vin[i]));
			index = Triplanar.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'cameraPosition'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float3 cameraPosition'</summary><param name="value"/>
		public void SetCameraPosition(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[5] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 cameraPosition'</summary>
		public Microsoft.Xna.Framework.Vector3 CameraPosition
		{
			set
			{
				this.SetCameraPosition(ref value);
			}
		}
		/// <summary>Name ID for 'lightDirection'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 lightDirection'</summary><param name="value"/>
		public void SetLightDirection(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[4] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
			this.preg[4] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float3 lightDirection'</summary>
		public Microsoft.Xna.Framework.Vector3 LightDirection
		{
			set
			{
				this.SetLightDirection(ref value);
			}
		}
		/// <summary>Name ID for 'fogColor'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float3 fogColor'</summary><param name="value"/>
		public void SetFogColor(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.preg[3] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float3 fogColor'</summary>
		public Microsoft.Xna.Framework.Vector3 FogColor
		{
			set
			{
				this.SetFogColor(ref value);
			}
		}
		/// <summary>Name ID for 'fogEnd'</summary>
		private static int cid3;
		/// <summary>Assign the shader value 'float fogEnd'</summary>
		public float FogEnd
		{
			set
			{
				this.preg[2] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'fogStart'</summary>
		private static int cid4;
		/// <summary>Assign the shader value 'float fogStart'</summary>
		public float FogStart
		{
			set
			{
				this.preg[1] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'textureScale'</summary>
		private static int cid5;
		/// <summary>Assign the shader value 'float textureScale'</summary>
		public float TextureScale
		{
			set
			{
				this.preg[0] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BottomColorSampler'</summary>
		public Xen.Graphics.TextureSamplerState BottomColorSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BottomNormalSampler'</summary>
		public Xen.Graphics.TextureSamplerState BottomNormalSampler
		{
			get
			{
				return this.pts[3];
			}
			set
			{
				if ((value != this.pts[3]))
				{
					this.pts[3] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D SideColorSampler'</summary>
		public Xen.Graphics.TextureSamplerState SideColorSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D SideNormalSampler'</summary>
		public Xen.Graphics.TextureSamplerState SideNormalSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TopColorSampler'</summary>
		public Xen.Graphics.TextureSamplerState TopColorSampler
		{
			get
			{
				return this.pts[4];
			}
			set
			{
				if ((value != this.pts[4]))
				{
					this.pts[4] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TopNormalSampler'</summary>
		public Xen.Graphics.TextureSamplerState TopNormalSampler
		{
			get
			{
				return this.pts[5];
			}
			set
			{
				if ((value != this.pts[5]))
				{
					this.pts[5] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture SideColor'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture SideColor
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture SideNormal'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture SideNormal
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BottomColor'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BottomColor
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BottomNormal'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BottomNormal
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[3]));
			}
			set
			{
				if ((value != this.ptx[3]))
				{
					this.ptc = true;
					this.ptx[3] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture TopColor'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture TopColor
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[4]));
			}
			set
			{
				if ((value != this.ptx[4]))
				{
					this.ptc = true;
					this.ptx[4] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture TopNormal'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture TopNormal
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[5]));
			}
			set
			{
				if ((value != this.ptx[5]))
				{
					this.ptc = true;
					this.ptx[5] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BottomColorSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D BottomNormalSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D SideColorSampler'</summary>
		static int sid2;
		/// <summary>Name uid for sampler for 'Sampler2D SideNormalSampler'</summary>
		static int sid3;
		/// <summary>Name uid for sampler for 'Sampler2D TopColorSampler'</summary>
		static int sid4;
		/// <summary>Name uid for sampler for 'Sampler2D TopNormalSampler'</summary>
		static int sid5;
		/// <summary>Name uid for texture for 'Texture SideColor'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture SideNormal'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture BottomColor'</summary>
		static int tid2;
		/// <summary>Name uid for texture for 'Texture BottomNormal'</summary>
		static int tid3;
		/// <summary>Name uid for texture for 'Texture TopColor'</summary>
		static int tid4;
		/// <summary>Name uid for texture for 'Texture TopNormal'</summary>
		static int tid5;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,3,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[6];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[6];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[6];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,172,135,0,1,3,131,0,1,1,131,0,1,128,135,0,1,6,131,0,1,4,131,0,1,1,227,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,131,0,0,1,248,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,160,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,8,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,44,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,80,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,116,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,152,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,51,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,188,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,52,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,224,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,53,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,10,131,0,0,1,1,131,0,0,1,15,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,140,131,0,0,1,168,138,0,0,1,1,1,4,1,0,1,0,1,1,1,32,138,0,0,1,14,1,172,1,0,1,0,1,14,1,200,138,0,0,1,15,1,20,1,0,1,0,1,15,1,40,138,0,0,1,15,1,56,1,0,1,0,1,15,1,76,138,0,0,1,15,1,92,1,0,1,0,1,15,1,112,138,0,0,1,15,1,128,1,0,1,0,1,15,1,148,138,0,0,1,15,1,164,1,0,1,0,1,15,1,184,138,0,0,1,15,1,200,1,0,1,0,1,15,1,220,138,0,0,1,16,1,160,135,0,0,1,3,1,0,1,0,1,16,1,28,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,240,1,0,1,0,1,15,1,236,131,0,0,1,93,134,0,0,1,16,1,8,1,0,1,0,1,16,1,4,1,0,1,0,1,16,1,80,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,36,1,0,1,0,1,16,1,32,131,0,0,1,93,134,0,0,1,16,1,60,1,0,1,0,1,16,1,56,1,0,1,0,1,16,1,144,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,100,1,0,1,0,1,16,1,96,131,0,0,1,93,134,0,0,1,16,1,124,1,0,1,0,1,16,1,120,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,4,1,148,1,16,1,42,1,17,131,0,0,1,1,1,240,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,136,1,0,1,0,1,1,1,176,138,0,0,1,1,1,96,131,0,0,1,28,1,0,1,0,1,1,1,82,1,255,1,255,1,3,132,0,0,1,7,131,0,0,1,28,134,0,0,1,1,1,75,131,0,0,1,168,1,0,1,2,131,0,0,1,5,133,0,0,1,176,131,0,0,1,192,1,0,1,0,1,1,1,16,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,40,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,47,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,54,1,0,1,3,1,0,1,3,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,61,1,0,1,3,1,0,1,4,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,68,1,0,1,3,1,0,1,5,1,0,1,1,132,0,0,1,1,1,24,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,95,1,112,1,115,1,95,1,115,1,51,1,0,1,95,1,112,1,115,1,95,1,115,1,52,1,0,1,95,1,112,1,115,1,95,1,115,1,53,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,16,1,0,1,7,132,0,0,1,4,134,0,0,1,81,1,8,1,0,1,255,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,52,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,54,1,86,1,0,1,0,1,119,1,87,160,0,0,1,191,1,25,1,153,1,154,1,62,1,204,1,204,1,205,1,62,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,63,1,25,1,160,1,40,1,0,1,36,1,96,1,7,1,32,1,13,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,15,1,96,1,17,1,82,1,0,1,18,1,0,1,0,1,148,1,0,1,0,1,96,1,23,1,48,1,29,1,18,1,0,1,16,132,0,0,1,9,131,32,0,1,34,1,86,1,0,1,82,1,0,1,0,1,9,1,0,1,1,1,16,1,36,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,16,1,49,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,32,1,161,1,31,1,31,1,244,1,71,1,0,1,0,1,64,1,0,1,20,1,135,1,1,1,1,1,0,1,98,1,27,1,108,1,130,1,128,1,255,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,1,1,0,1,76,1,135,1,0,1,1,1,0,1,192,1,108,1,27,1,160,1,1,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,98,1,27,1,177,1,225,1,1,1,0,1,0,1,8,1,40,1,64,1,161,1,159,1,31,1,254,1,10,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,72,1,64,1,161,1,159,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,20,1,136,1,5,1,0,1,0,1,108,1,108,1,177,1,226,1,2,1,2,1,5,1,36,1,24,1,96,1,161,1,31,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,48,1,8,1,16,1,161,1,31,1,31,1,245,1,200,1,0,1,0,1,64,1,0,1,184,1,132,1,3,1,1,1,3,1,108,1,108,1,67,1,0,1,1,1,2,1,1,1,76,1,72,1,1,1,0,1,0,1,190,1,190,1,198,1,48,1,4,1,4,1,1,1,88,1,135,1,0,1,7,1,0,1,198,1,99,1,27,1,225,1,3,1,1,1,128,1,168,1,131,1,1,1,1,1,0,1,27,1,197,1,67,1,129,1,0,1,4,1,4,1,200,1,7,1,0,1,4,1,0,1,177,1,192,1,192,1,235,1,3,1,4,1,7,1,200,1,7,1,0,1,2,1,0,1,108,1,201,1,190,1,235,1,3,1,2,1,4,1,200,1,7,1,0,1,4,1,3,1,102,1,109,1,27,1,108,1,255,1,1,1,1,1,20,1,8,1,0,1,1,1,0,1,192,1,98,1,27,1,240,1,4,1,0,1,3,1,14,1,72,1,1,1,1,1,0,1,27,1,198,1,198,1,162,1,1,1,255,1,1,1,116,1,8,1,0,1,1,1,1,1,27,1,177,1,177,1,160,1,1,1,254,1,0,1,200,1,7,1,0,1,0,1,1,1,101,1,27,1,98,1,203,1,2,1,1,1,3,1,200,1,7,1,0,1,2,1,0,1,198,1,98,1,192,1,203,1,1,1,0,1,3,1,8,1,56,1,64,1,161,1,159,1,31,1,244,1,200,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,88,1,64,1,161,1,159,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,24,1,80,1,161,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,7,131,0,0,1,102,1,109,1,108,1,76,1,255,1,1,1,4,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,225,1,3,1,5,1,0,1,200,1,15,1,0,1,1,1,0,1,177,1,208,1,0,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,158,1,143,1,235,1,3,1,6,1,1,1,200,1,8,1,0,1,2,1,0,1,52,1,52,1,0,1,239,1,1,1,1,1,0,1,88,1,16,1,1,132,0,0,1,27,1,226,1,0,1,0,1,130,1,200,1,7,1,0,1,1,1,0,1,201,1,108,1,0,1,225,1,1,1,1,1,0,1,200,1,8,1,0,1,1,1,0,1,108,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,1,131,0,0,1,18,1,192,1,0,1,240,1,1,1,0,1,0,1,200,1,1,131,0,0,1,108,1,198,1,0,1,162,1,0,1,255,1,0,1,168,1,128,133,0,0,1,192,1,194,1,0,1,0,1,254,1,200,1,7,131,0,0,1,27,1,192,1,0,1,225,1,0,1,2,1,0,1,200,1,15,1,128,133,0,0,1,226,150,0,0,1,2,132,255,0,138,0,0,1,4,1,140,1,16,1,42,1,17,1,1,1,0,1,0,1,2,131,0,0,1,2,1,140,135,0,0,1,36,1,0,1,0,1,1,1,80,1,0,1,0,1,1,1,120,138,0,0,1,1,1,40,131,0,0,1,28,1,0,1,0,1,1,1,27,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,20,131,0,0,1,68,1,0,1,2,131,0,0,1,6,133,0,0,1,76,131,0,0,1,92,131,0,0,1,188,1,0,1,2,1,0,1,6,1,0,1,4,133,0,0,1,196,131,0,0,1,212,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,6,229,0,0,1,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,76,1,0,1,113,1,0,1,9,138,0,0,1,81,1,8,131,0,0,1,1,131,0,0,1,6,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,12,1,0,1,7,1,0,1,13,1,0,1,8,1,0,1,14,1,0,1,9,1,0,1,63,1,0,1,10,1,0,1,0,1,112,1,80,1,0,1,1,1,113,1,81,1,0,1,2,1,18,1,82,1,0,1,3,1,115,1,83,1,0,1,5,1,52,1,84,1,0,1,6,1,117,1,85,1,0,1,7,1,54,1,86,1,0,1,9,1,119,1,87,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,36,131,0,0,1,41,1,0,1,0,1,16,1,45,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,47,131,0,0,1,35,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,40,176,0,0,1,61,143,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,11,1,48,1,17,1,18,1,0,1,18,135,0,0,1,96,1,20,1,196,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,64,1,44,1,18,1,0,1,34,131,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,5,1,0,1,0,1,200,1,15,131,0,0,1,198,1,0,1,0,1,235,1,5,1,4,1,0,1,200,1,15,131,0,0,1,177,1,148,1,148,1,235,1,5,1,3,1,0,1,200,1,15,131,0,0,1,108,1,248,1,148,1,235,1,5,1,1,1,0,1,200,1,8,1,0,1,8,1,0,1,233,1,167,1,0,1,175,1,0,1,9,1,0,1,200,1,4,1,0,1,8,1,0,1,233,1,167,1,0,1,175,1,0,1,8,1,0,1,200,1,2,1,0,1,8,1,0,1,233,1,167,1,0,1,175,1,0,1,7,1,0,1,200,1,1,1,0,1,8,1,0,1,233,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,8,1,8,1,0,1,200,1,1,131,0,0,1,176,1,176,1,177,1,209,1,2,1,2,1,255,1,200,1,11,1,0,1,3,1,0,1,98,1,205,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,7,1,0,1,205,1,226,1,0,1,161,1,2,1,4,1,0,1,76,1,40,1,1,1,1,1,2,1,177,1,177,1,27,1,224,1,7,1,3,1,5,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,200,1,7,1,0,1,4,1,4,1,177,1,192,1,192,1,203,1,1,1,5,1,5,1,200,1,14,1,0,1,0,1,2,1,60,1,252,1,0,1,224,1,3,1,7,1,0,1,20,1,31,1,0,1,6,1,0,1,1,1,98,1,108,1,225,1,0,1,2,1,0,1,20,1,40,131,0,0,1,190,1,190,1,108,1,208,1,4,1,4,1,255,1,88,1,132,1,0,1,0,1,2,1,27,1,177,1,27,1,224,1,6,1,6,1,128,1,20,1,39,1,0,1,9,1,0,1,192,1,27,1,97,1,225,1,4,1,0,1,0,1,88,1,65,1,1,1,0,1,0,1,190,1,190,1,108,1,240,1,9,1,2,1,129,1,88,1,39,1,0,1,7,1,0,1,98,1,180,1,177,1,225,1,9,1,2,1,128,1,200,1,1,1,0,1,1,1,1,1,177,1,108,1,198,1,235,1,9,1,2,1,7,1,200,1,7,1,0,1,3,1,4,1,98,1,205,1,101,1,235,1,9,1,2,1,7,1,200,1,1,1,128,1,6,1,1,1,198,1,198,1,108,1,235,1,9,1,2,1,7,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,8,1,100,1,33,1,128,1,4,1,2,1,27,1,27,1,102,1,224,1,7,1,3,1,6,1,200,1,7,1,128,1,0,1,0,1,198,1,192,1,0,1,225,1,1,1,2,1,0,1,200,1,7,1,128,1,1,1,0,1,177,1,192,1,0,1,225,1,1,1,5,1,0,1,200,1,7,1,128,1,7,1,0,1,192,1,27,1,0,1,225,1,4,1,0,1,0,1,200,1,4,1,128,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,15,1,0,1,2,1,0,1,116,1,174,1,0,1,225,1,3,1,2,1,0,1,100,1,32,1,128,1,6,131,0,0,1,102,1,226,1,0,1,0,1,2,1,20,1,6,1,0,1,1,1,2,1,188,1,22,1,198,1,224,1,2,1,2,1,0,1,12,1,33,1,128,1,3,1,0,1,27,1,177,1,177,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,12,1,177,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,101,1,101,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,4,1,148,1,16,1,42,1,17,131,0,0,1,1,1,240,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,136,1,0,1,0,1,1,1,176,138,0,0,1,1,1,96,131,0,0,1,28,1,0,1,0,1,1,1,82,1,255,1,255,1,3,132,0,0,1,7,131,0,0,1,28,134,0,0,1,1,1,75,131,0,0,1,168,1,0,1,2,131,0,0,1,5,133,0,0,1,176,131,0,0,1,192,1,0,1,0,1,1,1,16,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,40,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,47,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,54,1,0,1,3,1,0,1,3,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,61,1,0,1,3,1,0,1,4,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,68,1,0,1,3,1,0,1,5,1,0,1,1,132,0,0,1,1,1,24,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,95,1,112,1,115,1,95,1,115,1,51,1,0,1,95,1,112,1,115,1,95,1,115,1,52,1,0,1,95,1,112,1,115,1,95,1,115,1,53,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,16,1,0,1,7,132,0,0,1,4,134,0,0,1,81,1,8,1,0,1,255,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,52,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,54,1,86,1,0,1,0,1,119,1,87,160,0,0,1,191,1,25,1,153,1,154,1,62,1,204,1,204,1,205,1,62,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,63,1,25,1,160,1,40,1,0,1,36,1,96,1,7,1,32,1,13,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,15,1,96,1,17,1,82,1,0,1,18,1,0,1,0,1,148,1,0,1,0,1,96,1,23,1,48,1,29,1,18,1,0,1,16,132,0,0,1,9,131,32,0,1,34,1,86,1,0,1,82,1,0,1,0,1,9,1,0,1,1,1,16,1,36,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,16,1,49,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,32,1,161,1,31,1,31,1,244,1,71,1,0,1,0,1,64,1,0,1,20,1,135,1,1,1,1,1,0,1,98,1,27,1,108,1,130,1,128,1,255,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,1,1,0,1,76,1,135,1,0,1,1,1,0,1,192,1,108,1,27,1,160,1,1,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,98,1,27,1,177,1,225,1,1,1,0,1,0,1,8,1,40,1,64,1,161,1,159,1,31,1,254,1,10,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,72,1,64,1,161,1,159,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,20,1,136,1,5,1,0,1,0,1,108,1,108,1,177,1,226,1,2,1,2,1,5,1,36,1,24,1,96,1,161,1,31,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,48,1,8,1,16,1,161,1,31,1,31,1,245,1,200,1,0,1,0,1,64,1,0,1,184,1,132,1,3,1,1,1,3,1,108,1,108,1,67,1,0,1,1,1,2,1,1,1,76,1,72,1,1,1,0,1,0,1,190,1,190,1,198,1,48,1,4,1,4,1,1,1,88,1,135,1,0,1,7,1,0,1,198,1,99,1,27,1,225,1,3,1,1,1,128,1,168,1,131,1,1,1,1,1,0,1,27,1,197,1,67,1,129,1,0,1,4,1,4,1,200,1,7,1,0,1,4,1,0,1,177,1,192,1,192,1,235,1,3,1,4,1,7,1,200,1,7,1,0,1,2,1,0,1,108,1,201,1,190,1,235,1,3,1,2,1,4,1,200,1,7,1,0,1,4,1,3,1,102,1,109,1,27,1,108,1,255,1,1,1,1,1,20,1,8,1,0,1,1,1,0,1,192,1,98,1,27,1,240,1,4,1,0,1,3,1,14,1,72,1,1,1,1,1,0,1,27,1,198,1,198,1,162,1,1,1,255,1,1,1,116,1,8,1,0,1,1,1,1,1,27,1,177,1,177,1,160,1,1,1,254,1,0,1,200,1,7,1,0,1,0,1,1,1,101,1,27,1,98,1,203,1,2,1,1,1,3,1,200,1,7,1,0,1,2,1,0,1,198,1,98,1,192,1,203,1,1,1,0,1,3,1,8,1,56,1,64,1,161,1,159,1,31,1,244,1,200,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,88,1,64,1,161,1,159,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,24,1,80,1,161,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,7,131,0,0,1,102,1,109,1,108,1,76,1,255,1,1,1,4,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,225,1,3,1,5,1,0,1,200,1,15,1,0,1,1,1,0,1,177,1,208,1,0,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,158,1,143,1,235,1,3,1,6,1,1,1,200,1,8,1,0,1,2,1,0,1,52,1,52,1,0,1,239,1,1,1,1,1,0,1,88,1,16,1,1,132,0,0,1,27,1,226,1,0,1,0,1,130,1,200,1,7,1,0,1,1,1,0,1,201,1,108,1,0,1,225,1,1,1,1,1,0,1,200,1,8,1,0,1,1,1,0,1,108,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,1,131,0,0,1,18,1,192,1,0,1,240,1,1,1,0,1,0,1,200,1,1,131,0,0,1,108,1,198,1,0,1,162,1,0,1,255,1,0,1,168,1,128,133,0,0,1,192,1,194,1,0,1,0,1,254,1,200,1,7,131,0,0,1,27,1,192,1,0,1,225,1,0,1,2,1,0,1,200,1,15,1,128,133,0,0,1,226,150,0,0,1,1,132,255,0,138,0,0,1,18,1,160,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,60,1,0,1,0,1,3,1,100,135,0,0,1,36,1,0,1,0,1,14,1,144,1,0,1,0,1,14,1,184,138,0,0,1,14,1,104,131,0,0,1,28,1,0,1,0,1,14,1,91,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,84,131,0,0,1,68,1,0,1,2,131,0,0,1,6,133,0,0,1,76,131,0,0,1,92,131,0,0,1,188,1,0,1,2,1,0,1,6,1,0,1,216,133,0,0,1,196,131,0,0,1,212,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,6,229,0,0,1,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,36,1,0,1,113,1,0,1,10,138,0,0,1,81,1,8,131,0,0,1,1,131,0,0,1,4,131,0,0,1,11,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,7,1,0,1,0,1,48,1,8,1,0,1,0,1,16,1,9,1,0,1,48,1,32,1,10,1,0,1,0,1,112,1,80,1,0,1,1,1,113,1,81,1,0,1,2,1,18,1,82,1,0,1,3,1,115,1,83,1,0,1,5,1,52,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,54,1,86,1,0,1,10,1,119,1,87,1,0,1,0,1,16,1,61,1,0,1,0,1,16,1,62,1,0,1,0,1,16,1,56,131,0,0,1,58,1,0,1,0,1,16,1,64,131,0,0,1,57,1,0,1,0,1,16,1,60,1,0,1,0,1,16,1,65,131,0,0,1,54,1,0,1,0,1,16,1,55,1,0,1,0,1,16,1,63,180,0,0,1,63,1,128,1,0,1,0,1,64,1,64,1,0,1,0,1,61,131,0,0,1,240,1,85,1,64,1,7,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,48,1,35,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,64,1,62,1,0,1,0,1,34,133,0,0,1,5,1,248,1,48,131,0,0,1,4,1,67,132,0,0,1,5,1,248,1,16,131,0,0,1,4,1,71,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,148,1,198,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,108,1,27,1,198,1,161,1,3,1,3,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,7,1,6,1,0,1,200,1,15,1,0,1,6,1,160,1,27,1,136,1,0,1,161,1,7,1,7,1,0,1,92,1,15,1,0,1,5,1,160,1,27,1,136,1,177,1,161,1,7,1,8,1,0,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,7,1,8,1,5,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,171,1,7,1,7,1,6,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,7,1,6,1,4,1,92,1,2,131,0,0,1,108,1,27,1,27,1,161,1,3,1,1,1,0,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,7,1,6,1,4,1,200,1,15,1,0,1,6,1,160,1,177,1,52,1,148,1,171,1,7,1,7,1,6,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,7,1,8,1,5,1,92,1,8,131,0,0,1,108,1,27,1,108,1,161,1,3,1,0,1,0,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,7,1,8,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,7,1,7,1,6,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,7,1,6,1,4,1,200,1,1,1,0,1,4,1,0,1,170,1,248,1,0,1,239,1,4,1,3,1,0,1,200,1,2,1,0,1,4,1,0,1,170,1,248,1,0,1,239,1,6,1,3,1,0,1,200,1,4,1,0,1,4,1,0,1,170,1,248,1,0,1,239,1,5,1,3,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,4,1,3,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,176,1,4,1,1,1,0,1,8,1,36,1,2,1,0,1,0,1,190,1,190,1,177,1,176,1,4,1,0,1,1,1,200,1,15,1,0,1,4,1,0,1,176,1,108,1,166,1,108,1,255,1,3,1,4,1,8,1,68,1,2,1,7,1,0,1,85,1,62,1,198,1,175,1,4,1,2,1,1,1,0,1,35,1,7,1,6,1,0,1,176,1,199,1,97,1,224,1,2,1,2,1,0,1,0,1,24,1,7,1,7,1,0,1,108,1,108,1,203,1,226,1,6,1,6,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,7,1,7,1,0,1,200,1,8,1,0,1,4,1,0,1,195,1,195,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,0,1,195,1,101,1,0,1,161,1,1,1,4,1,0,1,76,1,31,1,3,1,5,1,0,1,18,1,226,1,108,1,161,1,1,1,4,1,3,1,200,1,7,1,0,1,2,1,4,1,108,1,21,1,192,1,203,1,3,1,3,1,5,1,200,1,7,1,0,1,0,1,2,1,180,1,192,1,0,1,224,1,4,1,5,1,0,1,200,1,15,131,0,0,1,164,1,146,1,0,1,225,1,0,1,1,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,88,1,130,1,2,1,0,1,2,1,177,1,108,1,108,1,224,1,0,1,0,1,129,1,200,1,7,1,0,1,9,1,0,1,192,1,27,1,0,1,225,1,2,1,2,1,0,1,200,1,1,131,0,0,1,190,1,195,1,0,1,240,1,9,1,1,1,0,1,20,1,7,1,0,1,8,1,0,1,98,1,201,1,177,1,225,1,9,1,1,1,5,1,200,1,1,1,0,1,6,1,1,1,177,1,177,1,198,1,235,1,9,1,1,1,8,1,200,1,7,1,0,1,10,1,4,1,98,1,18,1,101,1,235,1,9,1,1,1,8,1,4,1,143,1,6,1,10,1,1,1,116,1,243,1,198,1,225,1,10,1,1,1,4,1,88,1,17,1,4,1,1,1,0,1,177,1,27,1,27,1,162,1,6,1,255,1,132,1,88,1,22,1,1,1,6,1,2,1,188,1,22,1,108,1,224,1,10,1,10,1,129,1,100,1,32,1,128,1,6,131,0,0,1,102,1,226,1,0,1,0,1,10,1,200,1,1,1,128,1,6,1,1,1,198,1,27,1,108,1,235,1,9,1,1,1,8,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,7,1,100,1,32,1,128,1,4,131,0,0,1,203,1,226,131,0,0,1,200,1,2,1,128,1,3,1,0,1,177,1,108,1,0,1,225,1,0,1,1,1,0,1,20,1,14,131,0,0,1,12,1,108,1,27,1,225,1,6,1,1,1,6,1,200,1,1,1,128,1,4,1,2,1,27,1,177,1,0,1,224,1,5,1,4,1,0,1,200,1,7,1,128,1,0,1,0,1,108,1,21,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,1,1,0,1,108,1,21,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,7,1,0,1,192,1,27,1,0,1,225,1,2,1,2,1,0,1,12,1,20,1,128,1,3,1,0,1,195,1,190,1,108,1,176,1,1,1,4,1,1,1,200,1,7,1,128,1,5,1,0,1,101,1,101,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,4,1,148,1,16,1,42,1,17,131,0,0,1,1,1,240,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,136,1,0,1,0,1,1,1,176,138,0,0,1,1,1,96,131,0,0,1,28,1,0,1,0,1,1,1,82,1,255,1,255,1,3,132,0,0,1,7,131,0,0,1,28,134,0,0,1,1,1,75,131,0,0,1,168,1,0,1,2,131,0,0,1,5,133,0,0,1,176,131,0,0,1,192,1,0,1,0,1,1,1,16,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,40,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,47,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,54,1,0,1,3,1,0,1,3,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,61,1,0,1,3,1,0,1,4,1,0,1,1,132,0,0,1,1,1,24,134,0,0,1,1,1,68,1,0,1,3,1,0,1,5,1,0,1,1,132,0,0,1,1,1,24,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,95,1,112,1,115,1,95,1,115,1,51,1,0,1,95,1,112,1,115,1,95,1,115,1,52,1,0,1,95,1,112,1,115,1,95,1,115,1,53,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,16,1,0,1,7,132,0,0,1,4,134,0,0,1,81,1,8,1,0,1,255,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,113,1,81,1,0,1,0,1,18,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,52,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,54,1,86,1,0,1,0,1,119,1,87,160,0,0,1,191,1,25,1,153,1,154,1,62,1,204,1,204,1,205,1,62,1,25,1,153,1,154,132,0,0,1,63,1,128,1,0,1,0,1,191,1,230,1,102,1,103,132,0,0,1,63,1,25,1,160,1,40,1,0,1,36,1,96,1,7,1,32,1,13,1,16,1,0,1,86,1,0,1,0,1,9,1,0,1,9,1,32,1,15,1,96,1,17,1,82,1,0,1,18,1,0,1,0,1,148,1,0,1,0,1,96,1,23,1,48,1,29,1,18,1,0,1,16,132,0,0,1,9,131,32,0,1,34,1,86,1,0,1,82,1,0,1,0,1,9,1,0,1,1,1,16,1,36,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,16,1,49,1,0,1,0,1,34,133,0,0,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,0,1,161,1,1,1,0,1,0,1,100,1,8,1,32,1,161,1,31,1,31,1,244,1,71,1,0,1,0,1,64,1,0,1,20,1,135,1,1,1,1,1,0,1,98,1,27,1,108,1,130,1,128,1,255,1,255,1,200,1,8,131,0,0,1,172,1,62,1,0,1,111,1,255,1,1,1,0,1,76,1,135,1,0,1,1,1,0,1,192,1,108,1,27,1,160,1,1,1,254,1,0,1,116,1,7,1,0,1,3,1,1,1,98,1,27,1,177,1,225,1,1,1,0,1,0,1,8,1,40,1,64,1,161,1,159,1,31,1,254,1,10,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,72,1,64,1,161,1,159,1,31,1,254,1,10,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,20,1,136,1,5,1,0,1,0,1,108,1,108,1,177,1,226,1,2,1,2,1,5,1,36,1,24,1,96,1,161,1,31,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,48,1,8,1,16,1,161,1,31,1,31,1,245,1,200,1,0,1,0,1,64,1,0,1,184,1,132,1,3,1,1,1,3,1,108,1,108,1,67,1,0,1,1,1,2,1,1,1,76,1,72,1,1,1,0,1,0,1,190,1,190,1,198,1,48,1,4,1,4,1,1,1,88,1,135,1,0,1,7,1,0,1,198,1,99,1,27,1,225,1,3,1,1,1,128,1,168,1,131,1,1,1,1,1,0,1,27,1,197,1,67,1,129,1,0,1,4,1,4,1,200,1,7,1,0,1,4,1,0,1,177,1,192,1,192,1,235,1,3,1,4,1,7,1,200,1,7,1,0,1,2,1,0,1,108,1,201,1,190,1,235,1,3,1,2,1,4,1,200,1,7,1,0,1,4,1,3,1,102,1,109,1,27,1,108,1,255,1,1,1,1,1,20,1,8,1,0,1,1,1,0,1,192,1,98,1,27,1,240,1,4,1,0,1,3,1,14,1,72,1,1,1,1,1,0,1,27,1,198,1,198,1,162,1,1,1,255,1,1,1,116,1,8,1,0,1,1,1,1,1,27,1,177,1,177,1,160,1,1,1,254,1,0,1,200,1,7,1,0,1,0,1,1,1,101,1,27,1,98,1,203,1,2,1,1,1,3,1,200,1,7,1,0,1,2,1,0,1,198,1,98,1,192,1,203,1,1,1,0,1,3,1,8,1,56,1,64,1,161,1,159,1,31,1,244,1,200,1,128,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,8,1,88,1,64,1,161,1,159,1,31,1,244,1,200,1,0,1,0,1,64,1,0,1,200,135,0,0,1,2,131,0,0,1,16,1,24,1,80,1,161,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,7,131,0,0,1,102,1,109,1,108,1,76,1,255,1,1,1,4,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,225,1,3,1,5,1,0,1,200,1,15,1,0,1,1,1,0,1,177,1,208,1,0,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,158,1,143,1,235,1,3,1,6,1,1,1,200,1,8,1,0,1,2,1,0,1,52,1,52,1,0,1,239,1,1,1,1,1,0,1,88,1,16,1,1,132,0,0,1,27,1,226,1,0,1,0,1,130,1,200,1,7,1,0,1,1,1,0,1,201,1,108,1,0,1,225,1,1,1,1,1,0,1,200,1,8,1,0,1,1,1,0,1,108,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,1,131,0,0,1,18,1,192,1,0,1,240,1,1,1,0,1,0,1,200,1,1,131,0,0,1,108,1,198,1,0,1,162,1,0,1,255,1,0,1,168,1,128,133,0,0,1,192,1,194,1,0,1,0,1,254,1,200,1,7,131,0,0,1,27,1,192,1,0,1,225,1,0,1,2,1,0,1,200,1,15,1,128,133,0,0,1,226,151,0,0,132,255,0,138,0,0,1,3,1,164,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,132,1,0,1,0,1,2,1,32,135,0,0,1,36,131,0,0,1,228,1,0,1,0,1,1,1,12,139,0,0,1,188,131,0,0,1,28,131,0,0,1,175,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,168,131,0,0,1,48,1,0,1,2,131,0,0,1,6,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,6,229,0,0,1,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,224,1,0,1,113,1,0,1,7,138,0,0,1,81,1,8,131,0,0,1,1,131,0,0,1,2,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,48,1,48,1,6,1,0,1,0,1,112,1,80,1,0,1,1,1,113,1,81,1,0,1,2,1,18,1,82,1,0,1,3,1,115,1,83,1,0,1,5,1,52,1,84,1,0,1,6,1,117,1,85,1,0,1,7,1,54,1,86,1,0,1,9,1,119,1,87,1,0,1,0,1,16,1,22,1,0,1,0,1,16,1,23,1,0,1,0,1,16,1,20,131,0,0,1,24,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,38,131,0,0,1,30,1,0,1,0,1,16,1,34,1,0,1,0,1,16,1,26,176,0,0,1,61,143,0,0,1,48,1,5,1,32,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,80,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,48,1,36,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,136,132,0,0,1,200,1,8,1,0,1,7,1,0,1,167,1,167,1,0,1,175,1,5,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,167,1,167,1,0,1,175,1,5,1,2,1,0,1,200,1,2,1,0,1,7,1,0,1,167,1,167,1,0,1,175,1,5,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,167,1,167,1,0,1,175,1,5,1,0,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,7,1,7,1,0,1,200,1,8,131,0,0,1,176,1,176,1,177,1,209,1,0,1,0,1,255,1,168,1,40,1,2,1,4,1,0,1,190,1,190,1,192,1,208,1,0,1,0,1,4,1,168,1,79,1,2,1,1,1,0,1,229,1,254,1,130,1,129,1,0,1,4,1,4,1,168,1,136,1,2,1,0,1,0,1,27,1,108,1,65,1,130,1,0,1,255,1,4,1,76,1,135,1,3,1,4,1,2,1,186,1,180,1,27,1,224,1,2,1,1,1,5,1,200,1,7,1,0,1,3,1,4,1,27,1,192,1,192,1,203,1,3,1,5,1,5,1,88,1,17,1,6,1,2,1,0,1,190,1,190,1,27,1,240,1,3,1,3,1,132,1,88,1,143,1,0,1,4,1,0,1,252,1,98,1,27,1,225,1,4,1,0,1,128,1,20,1,16,1,128,1,2,131,0,0,1,198,1,226,1,0,1,0,1,7,1,100,1,33,1,128,1,4,1,2,1,27,1,177,1,102,1,224,1,1,1,2,1,4,1,200,1,7,1,128,1,0,1,0,1,108,1,192,1,0,1,225,1,6,1,0,1,0,1,200,1,7,1,128,1,1,1,0,1,27,1,192,1,0,1,225,1,3,1,5,1,0,1,200,1,4,1,128,1,3,1,0,1,190,1,190,1,0,1,176,1,0,1,4,1,0,1,88,1,18,1,2,1,1,1,2,1,27,1,177,1,108,1,224,1,4,1,4,1,130,1,200,1,7,1,128,1,7,1,0,1,192,1,108,1,0,1,225,1,3,1,2,1,0,1,200,1,7,1,0,1,4,1,0,1,192,1,108,1,0,1,225,1,3,1,2,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,4,1,0,1,0,1,20,1,7,1,0,1,3,1,0,1,98,1,180,1,198,1,225,1,4,1,0,1,1,1,200,1,1,1,128,1,6,1,1,1,198,1,198,1,108,1,235,1,4,1,0,1,3,1,200,1,1,1,0,1,2,1,1,1,177,1,108,1,198,1,235,1,4,1,0,1,3,1,200,1,7,1,0,1,3,1,4,1,98,1,205,1,101,1,235,1,4,1,0,1,3,1,4,1,143,1,2,1,3,1,1,1,116,1,174,1,27,1,225,1,3,1,0,1,2,1,100,1,32,1,128,1,6,131,0,0,1,102,1,226,1,0,1,0,1,3,1,20,1,6,1,0,1,2,1,2,1,188,1,22,1,177,1,224,1,3,1,3,1,1,1,12,1,33,1,128,1,3,1,0,131,27,0,1,225,1,2,1,0,1,0,1,200,1,14,1,0,1,1,1,0,1,12,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,101,1,101,1,0,1,226,1,1,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {156,61,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,166,223,76,126,255,181,241,55,253,255,15,210,239,126,61,250,255,175,163,159,253,108,63,232,235,247,191,108,126,255,233,175,225,240,248,223,244,187,95,247,215,248,217,195,131,251,93,133,253,254,69,191,137,124,247,111,253,26,63,123,253,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,248,243,235,255,26,28,31,78,16,168,153,56,237,55,248,77,229,187,95,71,255,255,77,196,105,218,79,65,253,252,90,191,209,175,33,112,71,218,79,208,134,98,198,102,231,215,248,93,77,155,151,67,109,118,29,156,118,168,205,222,175,241,107,152,54,127,214,80,155,123,191,198,31,100,218,252,125,67,109,246,29,156,255,104,168,205,253,95,227,215,2,157,126,51,109,231,63,191,22,253,31,175,117,63,103,186,254,223,66,247,223,44,242,61,254,142,189,247,99,244,255,39,101,190,156,21,203,139,95,227,247,144,56,62,246,62,98,240,216,251,191,33,253,255,108,217,180,217,114,10,8,60,134,215,243,108,150,215,191,198,175,145,252,26,130,23,222,195,231,120,55,245,222,253,227,232,255,127,149,247,247,175,67,141,83,143,65,254,58,138,241,255,41,141,243,241,252,86,4,104,203,163,217,1,253,254,220,251,251,247,165,223,87,222,223,127,16,253,254,167,121,127,255,101,244,251,223,229,253,253,79,209,239,255,158,255,253,111,38,63,65,195,223,73,127,7,189,255,20,253,254,127,162,182,255,29,253,255,79,213,191,127,3,106,243,235,208,255,223,68,218,110,209,103,191,219,111,230,218,254,158,244,251,99,250,255,159,22,105,59,167,207,102,94,219,63,136,126,255,25,109,247,235,201,15,110,255,127,211,99,200,243,20,19,245,107,255,223,255,247,255,245,127,95,253,26,39,111,142,159,252,78,244,231,95,249,107,202,103,160,245,239,36,205,210,191,232,215,20,26,227,253,95,151,254,253,155,232,231,63,68,255,255,205,126,77,35,163,191,214,175,241,219,41,208,45,254,236,215,164,255,126,189,95,99,71,63,251,61,249,179,95,139,62,75,126,141,111,235,103,191,55,127,134,150,191,201,175,241,7,232,103,43,254,236,215,161,207,126,139,95,227,157,126,246,71,241,103,191,46,125,246,219,252,26,127,146,126,38,121,156,191,246,175,253,53,249,253,95,135,249,237,103,227,81,217,255,107,127,29,146,182,95,147,255,243,62,223,29,248,124,111,224,243,123,3,159,239,15,124,126,191,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,34,45,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,19,52,109,191,238,175,241,155,254,69,127,206,159,253,219,255,131,191,237,223,249,47,31,252,243,255,220,63,119,4,120,248,252,215,147,207,143,180,11,126,126,23,154,234,95,151,211,131,191,254,159,36,191,255,154,127,208,175,105,127,255,181,254,32,154,73,254,157,154,254,73,164,156,255,34,243,251,175,233,253,254,107,121,191,255,218,222,239,191,142,247,251,175,75,191,255,154,252,59,224,255,26,127,209,175,197,236,244,107,82,191,191,6,245,241,107,252,197,191,158,126,167,127,211,119,191,22,218,253,197,191,22,222,229,191,127,115,254,238,215,248,53,190,250,131,126,183,95,3,250,238,215,255,131,126,157,95,227,63,251,139,126,3,219,246,63,251,131,127,141,95,227,63,251,147,228,221,95,135,219,253,186,191,198,95,243,23,253,222,172,70,126,45,254,251,215,248,53,254,26,254,76,224,253,70,128,71,56,253,105,127,210,19,250,251,215,250,53,126,83,250,251,127,248,131,126,141,223,224,63,251,139,240,247,175,173,127,255,154,244,119,216,254,119,227,246,191,142,126,255,107,105,251,95,87,255,254,117,232,111,244,249,235,16,126,212,39,225,254,159,1,79,30,211,175,75,159,17,172,191,136,240,252,115,73,15,254,218,191,30,255,253,213,95,132,54,248,254,215,252,53,126,131,63,232,215,35,60,127,61,165,129,252,253,215,208,216,254,111,124,246,107,225,111,252,254,235,42,172,95,143,222,51,127,255,58,66,15,192,163,159,191,198,175,243,107,209,223,191,22,255,253,107,232,231,104,243,107,235,24,254,51,30,3,241,3,127,103,198,252,235,232,223,24,179,129,241,235,241,187,127,13,195,242,225,130,158,191,246,175,241,159,253,197,230,51,153,183,255,12,159,253,69,6,54,232,241,107,43,236,95,67,255,254,117,149,62,242,247,87,127,18,209,66,251,144,54,191,46,207,147,244,133,191,127,109,29,131,255,153,140,231,175,225,207,126,140,223,251,13,248,119,252,255,215,103,62,194,223,255,183,194,252,245,245,187,255,251,15,250,13,44,207,129,110,255,217,31,132,57,248,53,185,237,175,65,109,255,111,158,231,95,83,199,103,232,74,60,207,109,137,254,127,209,255,253,127,255,26,252,128,161,161,91,127,13,125,254,50,24,170,95,251,255,34,221,250,198,234,214,223,241,215,148,207,208,214,232,214,223,138,62,123,170,239,255,122,164,247,158,211,207,223,151,254,255,247,241,103,191,30,219,187,127,140,254,255,175,253,26,38,111,238,244,158,209,235,63,219,143,250,73,182,223,95,199,125,245,65,207,229,7,232,51,154,243,191,136,64,124,230,195,19,189,2,153,252,77,85,63,253,198,52,79,230,247,223,132,230,208,252,14,30,50,191,67,22,228,247,95,155,231,220,125,78,237,254,35,163,11,137,7,244,247,95,147,224,152,223,127,45,130,243,107,234,239,191,54,193,49,159,255,58,4,231,215,214,223,127,93,226,19,243,249,175,71,188,104,62,255,245,137,247,126,253,255,72,244,31,243,239,159,36,188,198,50,0,254,250,147,192,219,242,55,112,249,207,254,36,240,156,251,140,229,207,126,38,178,243,127,67,54,248,51,145,129,95,243,63,82,89,250,139,228,239,95,235,63,18,121,48,127,255,6,255,145,200,139,249,91,228,224,55,240,116,232,175,203,120,253,103,127,146,200,144,232,76,149,137,255,72,126,23,188,137,123,233,247,127,233,79,194,255,127,45,125,247,215,96,121,252,138,101,202,233,219,95,227,47,234,195,194,248,127,27,146,181,57,143,249,215,226,191,231,244,247,111,243,39,187,49,255,218,212,246,191,162,239,255,107,210,85,255,233,31,108,244,175,232,179,223,74,105,245,27,209,239,127,24,245,255,20,227,224,54,164,223,254,35,161,231,127,5,219,129,121,34,154,255,247,44,247,196,201,255,209,175,203,116,254,207,254,34,177,53,191,14,245,245,127,43,44,214,157,127,18,141,129,224,136,190,23,157,246,215,240,231,128,5,62,64,255,191,155,252,206,58,193,140,231,215,250,53,126,155,63,200,140,231,215,230,191,231,127,80,108,60,191,214,175,241,95,255,65,254,120,126,237,200,120,126,109,111,60,191,94,103,60,191,190,55,158,95,79,199,35,186,234,215,248,181,126,3,197,79,120,236,215,249,143,192,71,248,253,215,102,190,248,53,254,32,163,173,160,150,124,191,240,247,165,142,126,141,95,43,226,23,254,90,63,242,11,241,252,191,208,47,220,251,186,122,244,125,253,194,95,67,252,194,191,201,252,254,107,122,191,211,76,154,223,191,33,191,16,190,141,239,23,254,223,212,71,220,47,164,159,127,19,181,253,139,69,142,126,115,254,46,230,23,138,191,196,126,225,223,100,222,21,187,46,126,161,241,167,140,175,40,114,255,107,211,103,255,202,223,68,48,249,239,95,155,255,254,167,237,223,191,14,255,253,159,241,223,79,126,13,241,251,32,119,198,15,252,245,244,239,95,71,255,254,245,213,135,241,253,74,252,253,107,234,223,191,193,6,31,12,127,255,152,194,51,126,20,252,84,214,131,214,143,250,77,128,255,223,244,235,253,26,191,35,141,225,119,252,131,126,252,215,16,123,99,198,44,62,39,235,170,191,40,230,115,254,122,191,70,232,115,202,223,127,13,253,95,124,78,249,59,244,57,205,223,210,183,243,57,241,247,175,207,120,252,26,252,185,249,236,55,224,207,254,154,224,51,241,193,96,195,126,199,191,88,62,3,206,120,239,119,4,125,120,108,226,147,127,245,55,97,188,63,166,250,22,159,161,63,231,143,58,31,209,255,204,248,136,242,46,219,63,153,167,95,163,239,35,58,159,214,248,136,210,54,244,17,209,214,249,136,6,127,161,131,243,17,153,151,127,131,223,148,191,239,234,220,95,67,159,255,234,183,160,207,126,77,248,139,127,217,175,109,116,238,247,126,19,249,12,66,97,116,238,155,223,196,247,23,127,173,158,191,248,111,253,26,255,175,240,23,39,190,191,248,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,38,31,10,7,119,127,255,221,175,149,39,250,53,254,131,95,3,249,246,223,243,247,252,53,188,156,251,239,34,63,254,32,205,183,35,232,253,131,52,223,142,248,246,15,210,124,59,98,213,63,8,249,118,201,199,113,108,254,39,253,7,18,23,163,229,223,164,121,224,95,67,242,166,95,253,73,191,94,250,159,121,223,33,63,47,223,225,243,95,11,249,36,201,105,234,247,127,77,231,251,191,166,243,253,255,221,249,254,255,230,239,127,140,63,67,14,233,63,235,180,23,92,126,45,197,229,215,143,224,130,239,126,125,197,69,243,171,1,46,238,251,191,166,243,253,255,221,249,254,255,254,147,52,23,65,184,252,90,140,75,216,62,196,229,55,24,192,229,55,184,1,151,223,96,3,46,191,134,253,222,199,229,215,97,92,126,13,109,175,185,142,63,9,223,209,95,255,16,232,245,107,200,154,1,122,248,135,132,126,230,239,223,128,255,254,181,237,223,88,219,229,28,11,242,111,104,143,191,65,243,63,233,215,215,191,205,56,127,13,93,83,192,119,242,247,175,71,191,255,75,127,18,254,255,107,241,223,104,139,156,17,175,41,216,119,255,3,202,93,117,97,97,190,127,77,206,191,255,54,127,145,161,3,214,20,126,77,151,131,255,53,144,131,255,53,195,53,133,95,195,172,41,252,154,146,131,255,53,144,131,255,53,195,53,5,228,167,21,207,255,138,233,243,235,184,28,60,242,212,255,145,172,221,240,154,2,190,253,131,64,59,129,197,57,162,63,201,91,83,248,53,204,154,130,240,33,183,249,143,208,63,96,225,93,165,237,31,36,227,3,172,191,70,199,39,235,13,230,239,95,139,199,251,219,232,152,129,7,143,31,159,253,201,154,3,251,53,36,143,249,95,81,63,255,53,141,209,141,247,215,246,198,251,107,233,120,189,53,135,95,227,215,213,241,254,90,58,94,172,65,252,90,58,222,95,87,199,107,100,232,215,255,53,176,166,101,248,236,215,249,135,126,13,89,115,32,184,225,154,3,158,31,173,57,220,254,249,209,154,195,143,214,28,126,180,230,240,163,53,135,15,89,115,192,227,175,57,204,192,225,188,230,240,208,234,220,191,241,215,144,207,32,231,70,231,254,85,244,207,206,175,33,130,130,53,135,3,250,249,237,95,227,231,110,125,225,67,252,88,232,152,95,195,243,97,241,12,249,177,63,198,31,255,154,255,144,250,66,214,223,81,159,209,250,59,248,27,188,242,27,72,123,204,1,190,87,255,70,116,134,243,111,126,13,254,94,254,254,181,109,219,95,139,255,70,219,175,184,253,111,104,255,254,53,120,62,187,176,190,190,127,243,235,17,79,253,111,244,249,63,166,62,137,239,223,252,105,158,127,3,60,111,227,223,252,90,127,80,223,191,249,202,250,55,170,23,232,255,127,210,159,4,88,191,38,211,224,87,169,127,195,190,32,255,255,215,215,191,157,255,102,252,27,231,3,127,61,255,230,215,35,185,116,227,13,253,155,63,205,243,111,32,183,183,247,111,148,55,254,32,245,217,255,34,177,139,191,206,63,244,107,48,221,208,143,243,119,254,159,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.cid3))
			{
				this.FogEnd = value;
				return true;
			}
			if ((id == Triplanar.cid4))
			{
				this.FogStart = value;
				return true;
			}
			if ((id == Triplanar.cid5))
			{
				this.TextureScale = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.cid0))
			{
				this.SetCameraPosition(ref value);
				return true;
			}
			if ((id == Triplanar.cid1))
			{
				this.SetLightDirection(ref value);
				return true;
			}
			if ((id == Triplanar.cid2))
			{
				this.SetFogColor(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.sid0))
			{
				this.BottomColorSampler = value;
				return true;
			}
			if ((id == Triplanar.sid1))
			{
				this.BottomNormalSampler = value;
				return true;
			}
			if ((id == Triplanar.sid2))
			{
				this.SideColorSampler = value;
				return true;
			}
			if ((id == Triplanar.sid3))
			{
				this.SideNormalSampler = value;
				return true;
			}
			if ((id == Triplanar.sid4))
			{
				this.TopColorSampler = value;
				return true;
			}
			if ((id == Triplanar.sid5))
			{
				this.TopNormalSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture value)
		{
			if ((Triplanar.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Triplanar.tid0))
			{
				this.SideColor = value;
				return true;
			}
			if ((id == Triplanar.tid1))
			{
				this.SideNormal = value;
				return true;
			}
			if ((id == Triplanar.tid2))
			{
				this.BottomColor = value;
				return true;
			}
			if ((id == Triplanar.tid3))
			{
				this.BottomNormal = value;
				return true;
			}
			if ((id == Triplanar.tid4))
			{
				this.TopColor = value;
				return true;
			}
			if ((id == Triplanar.tid5))
			{
				this.TopNormal = value;
				return true;
			}
			return false;
		}
	}
}
