// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Background.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'BackgroundFill' generated from file 'Background.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 16 instruction slots used (1 texture, 15 arithmetic), 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "47301628-bcee-4c1a-8aea-2eb652e288f0")]
	public sealed class BackgroundFill : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'BackgroundFill' shader</summary>
		public BackgroundFill()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(213));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private static void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			BackgroundFill.gd = state.DeviceUniqueIndex;
			BackgroundFill.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			BackgroundFill.sid0 = state.GetNameUniqueID("CubeRgbmSampler");
			BackgroundFill.tid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Graphics.TextureCube>("CubeRgbmTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != BackgroundFill.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], BackgroundFill.gid0, ref this.gc0));
			// Assign global textures
			this.CubeRgbmTexture = state.GetGlobalTextureCube(BackgroundFill.tid0);
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				BackgroundFill.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				BackgroundFill.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(BackgroundFill.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					BackgroundFill.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref BackgroundFill.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((BackgroundFill.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((BackgroundFill.gd != state.DeviceUniqueIndex))
			{
				BackgroundFill.gdInit(state);
			}
			BackgroundFill.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out BackgroundFill.fx, BackgroundFill.fxb, 8, 19);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCount()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(BackgroundFill.vin[i]));
			index = BackgroundFill.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupport(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc0;
		/// <summary>Get/Set the Texture Sampler State for 'SamplerCUBE CubeRgbmSampler'</summary>
		public Xen.Graphics.TextureSamplerState CubeRgbmSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'TextureCube CubeRgbmTexture'</summary>
		private Microsoft.Xna.Framework.Graphics.TextureCube CubeRgbmTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.TextureCube)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'SamplerCUBE CubeRgbmSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'TextureCube CubeRgbmTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,152,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,14,131,0,0,1,4,1,0,1,0,1,14,1,204,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,14,1,180,1,0,1,0,1,14,1,200,138,0,0,1,15,1,140,135,0,0,1,3,1,0,1,0,1,15,1,8,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,220,1,0,1,0,1,14,1,216,131,0,0,1,93,134,0,0,1,14,1,244,1,0,1,0,1,14,1,240,1,0,1,0,1,15,1,60,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,16,1,0,1,0,1,15,1,12,131,0,0,1,93,134,0,0,1,15,1,40,1,0,1,0,1,15,1,36,1,0,1,0,1,15,1,124,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,80,1,0,1,0,1,15,1,76,131,0,0,1,93,134,0,0,1,15,1,104,1,0,1,0,1,15,1,100,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,1,1,184,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,4,131,0,0,1,180,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,180,1,0,1,1,1,0,1,3,138,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,46,1,0,1,6,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,13,1,240,1,85,1,64,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,13,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,136,1,0,1,225,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,52,1,148,1,235,1,0,1,3,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,208,1,148,1,235,1,0,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,12,1,128,1,62,1,0,1,170,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,7,1,128,1,0,1,0,1,21,1,21,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,16,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,212,1,0,1,0,1,1,1,180,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,116,1,0,1,1,1,0,1,5,138,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,3,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,16,1,5,1,0,1,32,1,32,1,6,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,29,176,0,0,1,64,1,64,142,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,64,1,25,1,18,1,0,1,18,135,0,0,1,16,1,29,1,196,1,0,1,34,131,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,2,1,0,1,85,1,108,1,0,1,161,1,2,1,255,1,0,1,92,134,0,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,3,1,160,1,27,1,180,1,0,1,161,1,1,1,4,1,0,1,200,1,7,1,0,1,4,1,160,1,27,1,180,1,0,1,161,1,1,1,5,1,0,1,92,1,7,1,0,1,5,1,160,1,27,1,180,1,177,1,161,1,1,1,6,1,2,1,200,1,7,1,0,1,5,1,160,1,198,1,192,1,180,1,171,1,1,1,6,1,5,1,200,1,7,1,0,1,4,1,160,1,198,1,192,1,180,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,3,1,160,1,198,1,192,1,180,1,171,1,1,1,4,1,3,1,92,134,0,0,1,108,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,3,1,160,1,177,1,180,1,180,1,171,1,1,1,4,1,3,1,200,1,7,1,0,1,4,1,160,1,177,1,180,1,180,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,2,1,160,1,177,1,180,1,180,1,171,1,1,1,6,1,5,1,92,134,0,0,1,27,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,2,1,160,1,108,1,192,1,180,1,171,1,1,1,6,1,2,1,200,1,14,1,0,1,1,1,160,1,108,1,252,1,140,1,171,1,1,1,5,1,4,1,200,1,7,1,0,1,3,1,160,1,108,1,192,1,180,1,171,1,1,1,4,1,3,1,200,1,1,1,0,1,1,1,0,1,190,1,195,1,0,1,240,1,3,1,0,1,0,1,200,1,2,1,0,1,1,1,0,1,195,1,195,1,0,1,240,1,1,1,0,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,195,1,0,1,240,1,2,1,0,1,0,1,200,1,1,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,1,1,0,1,200,1,12,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,1,1,3,1,0,1,200,1,7,1,128,1,0,1,0,1,21,1,21,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,12,1,0,1,0,1,1,1,36,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,14,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,228,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,12,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,112,1,80,176,0,0,1,63,1,192,1,0,1,0,1,59,1,128,1,128,1,129,1,67,1,127,135,0,0,1,64,1,64,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,1,18,1,0,1,34,131,0,0,1,76,1,31,1,1,1,0,1,0,1,166,1,205,1,177,1,210,131,0,0,1,76,1,40,1,1,1,1,1,0,1,27,1,27,1,198,1,226,1,0,1,0,1,128,1,200,1,6,1,0,1,1,1,0,1,97,1,177,1,108,1,203,1,0,1,1,1,255,1,228,1,8,1,0,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,192,1,0,1,168,1,32,1,1,132,0,0,1,67,1,194,131,0,0,1,200,1,7,131,0,0,1,177,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,131,0,0,1,252,1,252,1,0,1,225,131,0,0,1,20,1,16,133,0,0,1,203,1,226,131,0,0,1,172,1,17,1,1,1,0,1,0,1,108,1,177,1,192,1,194,1,0,1,0,1,255,1,200,1,1,131,0,0,1,108,1,108,1,0,1,225,1,1,1,0,1,0,1,52,1,16,1,0,1,0,1,1,1,0,1,0,1,108,1,226,131,0,0,1,201,1,8,1,128,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,177,1,0,1,161,1,0,1,255,1,0,1,168,1,16,133,0,0,1,128,1,194,131,0,0,1,76,1,16,133,0,0,1,108,1,226,131,0,0,1,201,1,7,1,128,1,0,1,0,1,21,1,108,1,0,1,225,151,0,0,132,255,0,138,0,0,1,1,1,100,1,16,1,42,1,17,1,1,131,0,0,1,248,131,0,0,1,108,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,108,1,0,1,1,140,0,0,1,12,1,33,131,0,0,1,1,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,2,1,144,131,0,0,1,3,1,0,1,0,1,112,1,80,1,0,1,0,1,16,1,7,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,7,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,190,1,190,1,0,1,176,131,0,0,1,200,1,2,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,0,1,1,1,0,1,200,1,12,1,128,1,62,1,0,1,190,1,190,1,0,1,176,1,0,1,3,1,0,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {104,42,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,188,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,63,75,191,195,239,67,253,240,123,171,240,189,223,243,55,145,239,254,173,13,239,253,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,159,157,231,215,255,53,56,190,155,32,80,51,113,218,95,165,113,218,55,25,71,106,63,5,250,1,120,192,253,231,180,159,160,13,197,140,205,206,175,241,7,161,207,223,76,219,249,207,175,69,255,71,216,219,253,92,112,252,191,255,111,140,225,55,139,124,143,191,99,239,253,24,253,255,73,153,47,103,197,242,2,127,255,186,191,70,252,125,196,179,177,247,127,67,250,255,217,178,105,179,229,148,33,96,12,175,231,217,44,175,5,22,240,74,126,13,249,28,239,166,222,187,37,253,255,143,242,254,254,203,232,255,255,144,247,247,115,162,207,220,163,209,223,70,191,255,83,222,223,127,146,23,255,255,6,250,59,232,243,167,232,247,255,30,181,253,183,232,255,127,170,254,253,203,233,247,255,137,254,255,123,70,218,254,86,244,217,111,246,155,186,182,35,250,125,139,254,255,7,69,218,190,161,207,94,122,109,75,250,125,174,237,126,61,249,193,237,255,111,122,12,239,252,119,248,229,215,254,191,255,239,255,235,255,222,249,53,78,222,28,63,249,157,232,207,63,246,215,144,207,208,246,119,226,86,191,70,250,135,209,63,79,245,253,95,147,254,125,78,63,127,223,95,67,104,245,107,235,103,173,194,148,252,194,95,251,215,254,154,244,205,175,73,212,29,226,83,229,169,191,246,215,33,206,251,53,249,63,121,232,227,123,191,255,206,175,241,69,49,173,171,166,58,111,211,173,87,119,210,111,63,127,253,60,149,25,76,79,170,197,170,40,233,151,135,227,189,79,199,15,239,239,141,247,14,246,247,127,141,159,160,169,253,53,127,141,223,244,47,250,53,126,141,63,240,228,15,254,131,254,160,67,211,207,239,66,104,211,156,255,65,52,219,127,210,239,34,67,248,179,104,98,254,162,39,140,250,111,74,159,255,103,127,210,175,241,27,252,103,127,209,175,203,127,255,6,244,247,255,77,255,255,53,244,239,95,31,223,243,103,225,223,255,217,31,68,60,246,107,19,214,244,251,87,244,255,191,134,255,254,181,248,111,150,147,63,232,215,227,190,0,239,43,11,251,215,98,60,12,44,233,139,218,254,69,191,37,181,21,88,255,247,31,252,107,133,223,113,219,95,211,254,237,96,253,154,140,231,87,127,145,235,231,255,214,182,14,231,95,19,223,253,6,191,11,253,252,207,254,160,255,251,255,254,53,248,49,60,240,107,232,243,151,49,15,252,95,196,3,187,150,7,254,196,95,67,62,195,87,134,7,254,40,250,103,135,223,255,117,88,102,14,232,255,223,254,53,172,254,176,243,221,149,197,175,251,92,126,77,62,144,57,254,141,254,32,154,91,157,239,223,152,198,111,126,255,77,104,14,204,239,191,198,31,244,107,123,191,83,251,255,200,240,10,209,240,63,98,218,17,45,127,109,226,15,161,43,120,229,43,208,242,79,162,49,254,58,242,55,222,251,207,254,36,208,247,215,97,85,130,207,254,26,234,67,62,251,49,203,35,248,254,63,251,139,228,239,95,139,255,254,117,237,223,191,14,255,253,235,211,223,210,231,111,74,125,255,101,60,119,192,3,253,155,217,194,124,252,72,126,127,126,203,175,225,129,95,67,159,119,191,217,175,161,242,251,231,253,218,134,7,14,127,19,249,204,231,129,253,223,196,241,192,175,227,241,192,159,199,159,253,58,156,255,253,203,232,255,127,219,175,97,114,203,142,7,190,41,153,86,159,198,194,253,183,110,124,227,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,231,246,249,81,239,63,122,126,244,252,232,249,255,219,243,117,115,45,136,217,127,45,142,217,127,207,223,211,135,231,229,84,56,102,255,53,57,166,150,223,17,67,251,57,152,110,222,69,226,227,223,20,177,246,95,132,60,202,88,114,34,127,147,228,76,16,138,254,250,136,163,255,164,95,39,253,207,168,223,175,254,166,95,135,83,186,191,254,31,36,127,255,26,127,19,245,245,39,73,190,197,255,252,175,161,207,255,154,200,231,255,55,125,254,127,243,231,191,1,247,203,185,154,63,201,244,245,107,106,95,191,174,215,23,62,251,117,189,190,52,247,227,125,46,125,245,63,151,190,126,77,219,23,231,129,248,111,191,175,95,175,211,215,175,55,208,215,175,55,208,215,175,23,237,235,215,177,125,253,6,156,99,144,156,20,253,255,47,146,191,37,39,245,107,218,191,185,61,114,95,127,81,44,39,245,107,120,57,41,60,63,202,73,253,252,206,73,225,241,115,82,143,153,7,222,39,167,44,57,169,131,95,195,230,148,127,86,242,79,95,87,207,117,245,153,254,30,232,173,223,32,212,31,127,145,252,109,101,92,255,22,57,244,229,234,215,136,200,213,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((BackgroundFill.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == BackgroundFill.sid0))
			{
				this.CubeRgbmSampler = value;
				return true;
			}
			return false;
		}
	}
}
