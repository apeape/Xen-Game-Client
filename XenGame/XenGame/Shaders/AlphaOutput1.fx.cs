// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = AlphaOutput.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'AlphaWrite' generated from file 'AlphaOutput.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 3 instruction slots used (1 texture, 2 arithmetic), 0 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "5b4ea50c-b2cb-4045-9622-2f93479d1c42")]
	public sealed class AlphaWrite : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'AlphaWrite' shader</summary>
		public AlphaWrite()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			AlphaWrite.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			AlphaWrite.sid0 = state.GetNameUniqueID("DisplayTextureSampler");
			AlphaWrite.tid0 = state.GetNameUniqueID("DisplayTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != AlphaWrite.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				AlphaWrite.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(AlphaWrite.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					AlphaWrite.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref AlphaWrite.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((AlphaWrite.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((AlphaWrite.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			AlphaWrite.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out AlphaWrite.fx, AlphaWrite.fxb, 7, 5);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(AlphaWrite.vin[i]));
			index = AlphaWrite.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D DisplayTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState DisplayTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D DisplayTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D DisplayTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D DisplayTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'Texture2D DisplayTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,96,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,5,1,0,0,14,8,135,0,1,216,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,112,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,148,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,4,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,14,1,20,1,0,1,0,1,14,1,48,138,0,0,1,14,1,124,1,0,1,0,1,14,1,144,138,0,0,1,15,1,84,135,0,0,1,3,1,0,1,0,1,14,1,208,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,164,1,0,1,0,1,14,1,160,131,0,0,1,93,134,0,0,1,14,1,188,1,0,1,0,1,14,1,184,1,0,1,0,1,15,1,4,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,216,1,0,1,0,1,14,1,212,131,0,0,1,93,134,0,0,1,14,1,240,1,0,1,0,1,14,1,236,1,0,1,0,1,15,1,68,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,24,1,0,1,0,1,15,1,20,131,0,0,1,93,134,0,0,1,15,1,48,1,0,1,0,1,15,1,44,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,228,1,16,1,42,1,17,132,0,0,1,168,131,0,0,1,60,135,0,0,1,36,135,0,0,1,132,139,0,0,1,92,131,0,0,1,28,131,0,0,1,79,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,72,131,0,0,1,48,1,0,1,3,131,0,0,1,1,133,0,0,1,56,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,60,1,16,134,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,251,1,0,1,0,1,64,1,0,1,200,1,15,1,128,1,0,1,0,1,108,1,108,1,0,1,226,150,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,228,1,16,1,42,1,17,132,0,0,1,168,131,0,0,1,60,135,0,0,1,36,135,0,0,1,132,139,0,0,1,92,131,0,0,1,28,131,0,0,1,79,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,72,131,0,0,1,48,1,0,1,3,131,0,0,1,1,133,0,0,1,56,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,60,1,16,134,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,251,1,0,1,0,1,64,1,0,1,200,1,15,1,128,1,0,1,0,1,108,1,108,1,0,1,226,150,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,135,0,0,1,228,1,16,1,42,1,17,132,0,0,1,168,131,0,0,1,60,135,0,0,1,36,135,0,0,1,132,139,0,0,1,92,131,0,0,1,28,131,0,0,1,79,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,72,131,0,0,1,48,1,0,1,3,131,0,0,1,1,133,0,0,1,56,132,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,60,1,16,134,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,1,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,251,1,0,1,0,1,64,1,0,1,200,1,15,1,128,1,0,1,0,1,108,1,108,1,0,1,226,151,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {236,38,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,102,191,169,252,254,107,227,111,250,255,31,160,223,253,58,250,255,95,83,255,254,144,231,215,163,255,255,254,151,205,239,63,253,53,92,63,191,193,111,34,223,253,91,191,198,55,215,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,185,221,243,235,255,26,28,167,77,40,80,251,131,76,156,182,210,56,237,155,140,7,181,159,2,1,225,111,244,107,8,220,63,77,251,9,218,172,154,223,191,217,249,53,126,45,244,249,155,105,59,255,249,181,232,255,8,95,187,159,11,142,255,247,255,141,49,252,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,252,26,191,240,215,248,53,126,221,129,247,17,207,198,222,255,13,233,255,103,203,166,205,150,83,64,224,49,188,158,103,179,188,254,53,254,32,67,187,228,215,144,207,241,119,234,189,91,210,255,255,40,239,239,223,138,232,177,227,209,228,103,232,247,63,201,251,251,247,246,226,246,127,73,63,7,61,254,20,253,254,47,163,207,254,34,250,255,159,170,127,255,125,244,251,223,69,255,255,13,244,61,191,237,191,71,159,255,91,94,219,95,78,191,255,79,244,255,111,71,218,254,78,244,217,111,247,155,186,182,251,244,251,142,182,251,245,228,7,183,255,191,233,49,188,242,143,225,159,95,251,255,254,191,255,175,255,251,119,253,53,78,222,28,63,249,157,232,207,47,245,51,180,193,223,244,164,223,166,127,118,126,13,147,35,248,181,126,141,3,125,95,249,224,175,253,117,136,91,126,77,254,79,30,250,248,222,239,191,243,107,124,81,76,235,170,169,206,219,116,235,213,157,244,219,207,95,63,79,133,234,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,187,16,138,52,183,127,16,245,244,39,253,46,130,238,159,68,132,249,139,158,112,215,191,41,125,254,159,209,223,255,217,95,244,107,226,187,223,0,127,255,223,127,208,255,253,127,75,159,102,108,138,194,175,241,175,1,153,95,251,255,162,177,237,218,177,253,137,191,134,124,230,143,237,143,250,53,100,108,191,22,205,60,230,254,128,254,255,237,95,195,202,193,95,251,107,82,215,191,166,126,247,77,60,151,31,64,27,146,202,63,136,232,160,180,249,141,255,160,95,211,254,254,155,252,65,191,150,253,253,55,37,29,97,126,7,127,203,239,160,235,175,235,125,78,237,254,35,243,57,141,241,63,250,53,245,221,95,135,104,76,159,253,218,191,38,211,251,43,250,238,63,251,147,104,236,191,142,252,141,247,254,179,63,137,62,251,131,220,103,127,13,245,237,62,147,121,250,191,9,7,249,236,199,120,238,126,205,255,232,215,224,239,255,179,191,72,254,254,181,248,239,95,215,254,253,235,240,223,191,158,253,251,55,224,191,127,253,95,67,230,26,248,81,219,63,201,204,46,230,207,231,227,127,9,255,252,90,17,62,254,181,62,152,143,247,190,254,92,253,26,127,16,245,244,55,13,240,241,223,100,249,88,233,229,120,250,63,179,60,109,198,169,232,252,26,63,243,155,209,63,191,22,120,250,207,251,181,205,56,15,127,19,249,12,157,152,113,238,211,103,79,127,13,233,248,215,161,127,159,211,207,223,151,254,255,231,241,103,191,14,231,246,254,50,250,255,223,246,107,152,252,223,95,251,141,243,185,218,43,11,247,223,186,241,141,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,254,255,249,252,104,84,63,122,126,174,158,203,175,25,211,254,4,165,221,254,189,95,227,55,253,139,126,141,95,227,247,252,61,125,120,94,62,193,230,25,76,94,130,226,87,155,151,160,70,156,151,248,117,53,6,70,126,224,223,163,84,216,88,98,224,191,73,242,1,146,63,248,181,126,141,175,254,164,95,39,253,207,168,175,175,254,166,95,135,211,125,148,151,224,191,127,141,191,233,215,66,44,45,185,6,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,107,30,226,15,226,28,146,246,245,107,106,95,191,174,215,23,62,251,117,189,190,52,175,225,125,46,125,245,63,151,190,92,206,227,215,226,190,126,205,78,95,191,94,167,175,95,111,160,175,95,111,160,175,95,47,218,215,175,99,251,146,156,194,111,64,127,255,223,127,146,142,249,31,194,120,127,13,151,123,225,191,127,77,151,123,225,191,127,45,151,123,225,191,127,109,205,189,252,26,156,27,114,185,23,60,63,31,114,47,120,252,220,203,62,16,251,181,34,249,196,95,107,40,159,40,185,151,131,95,195,230,19,127,86,242,44,95,87,158,135,228,214,227,153,63,169,195,51,127,82,135,103,254,164,14,207,252,73,49,158,249,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((AlphaWrite.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == AlphaWrite.sid0))
			{
				this.DisplayTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((AlphaWrite.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == AlphaWrite.tid0))
			{
				this.DisplayTexture = value;
				return true;
			}
			return false;
		}
	}
}
