// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Composite.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'RgbmDecode' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 41 instruction slots used (2 texture, 39 arithmetic), 7 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "47301628-bcee-4c1a-8aea-2eb652e288f0")]
	public sealed class RgbmDecode : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecode' shader</summary>
		public RgbmDecode()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(197));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private static void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecode.gd = state.DeviceUniqueIndex;
			RgbmDecode.cid0 = state.GetNameUniqueID("UseExposureTonemapping");
			RgbmDecode.cid1 = state.GetNameUniqueID("UseFilmApproxTonemapping");
			RgbmDecode.cid2 = state.GetNameUniqueID("UseGammaCorrection");
			RgbmDecode.cid3 = state.GetNameUniqueID("UseInverseOneTonemapping");
			RgbmDecode.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecode.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecode.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecode.sid0 = state.GetNameUniqueID("BloomSampler");
			RgbmDecode.sid1 = state.GetNameUniqueID("InputSampler");
			RgbmDecode.tid0 = state.GetNameUniqueID("InputTexture");
			RgbmDecode.tid1 = state.GetNameUniqueID("BloomTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecode.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecode.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecode.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecode.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecode.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecode.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecode.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecode.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecode.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecode.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				RgbmDecode.gdInit(state);
			}
			RgbmDecode.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecode.fx, RgbmDecode.fxb, 9, 47);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecode.vin[i]));
			index = RgbmDecode.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupport(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'UseExposureTonemapping'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'bool UseExposureTonemapping'</summary>
		public float UseExposureTonemapping
		{
			set
			{
				this.preg[3] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseFilmApproxTonemapping'</summary>
		private static int cid1;
		/// <summary>Assign the shader value 'bool UseFilmApproxTonemapping'</summary>
		public float UseFilmApproxTonemapping
		{
			set
			{
				this.preg[5] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseGammaCorrection'</summary>
		private static int cid2;
		/// <summary>Assign the shader value 'bool UseGammaCorrection'</summary>
		public float UseGammaCorrection
		{
			set
			{
				this.preg[4] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseInverseOneTonemapping'</summary>
		private static int cid3;
		/// <summary>Assign the shader value 'bool UseInverseOneTonemapping'</summary>
		public float UseInverseOneTonemapping
		{
			set
			{
				this.preg[6] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BloomSampler'</summary>
		public Xen.Graphics.TextureSamplerState BloomSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D BloomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D BloomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BloomSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D BloomTexture'</summary>
		static int tid1;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[7];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,28,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,248,135,0,1,7,131,0,1,4,131,0,1,1,229,0,0,142,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,160,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,8,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,44,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,80,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,1,1,4,1,0,1,0,1,1,1,32,138,0,0,1,14,1,172,1,0,1,0,1,14,1,200,138,0,0,1,15,1,20,1,0,1,0,1,15,1,40,138,0,0,1,15,1,56,1,0,1,0,1,15,1,76,138,0,0,1,16,1,16,135,0,0,1,3,1,0,1,0,1,15,1,140,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,96,1,0,1,0,1,15,1,92,131,0,0,1,93,134,0,0,1,15,1,120,1,0,1,0,1,15,1,116,1,0,1,0,1,15,1,192,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,148,1,0,1,0,1,15,1,144,131,0,0,1,93,134,0,0,1,15,1,172,1,0,1,0,1,15,1,168,1,0,1,0,1,16,136,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,212,1,0,1,0,1,15,1,208,131,0,0,1,93,134,0,0,1,15,1,236,1,0,1,0,1,15,1,232,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,148,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {204,50,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,210,223,76,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,255,77,191,251,245,127,141,111,174,159,247,125,24,175,21,227,245,7,25,188,254,162,223,68,190,251,183,126,141,159,59,188,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,231,235,131,24,145,226,199,9,2,53,19,167,253,6,191,169,124,247,77,198,169,218,79,129,126,126,163,95,67,224,142,180,159,160,13,197,140,205,142,107,243,114,168,205,174,224,245,155,105,59,255,249,181,232,255,120,173,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,1,32,191,238,192,251,136,121,99,239,255,134,244,255,179,101,211,102,203,41,32,240,24,94,207,179,89,94,203,59,191,166,182,49,241,122,234,189,91,210,255,255,40,239,239,95,135,26,167,222,132,252,117,20,83,255,83,26,87,227,249,173,8,129,45,143,102,7,244,251,115,239,239,223,234,55,147,159,160,193,31,167,159,131,94,127,138,126,255,7,208,103,191,47,253,255,79,213,191,223,209,239,45,253,255,31,139,180,253,179,232,179,63,205,107,251,55,209,239,127,29,253,255,215,249,205,250,109,255,45,250,252,95,243,218,254,79,244,251,127,167,48,127,61,249,193,237,255,111,122,204,240,230,32,198,175,253,127,255,223,255,215,255,253,250,215,56,121,115,252,228,119,162,63,127,219,95,83,62,3,254,191,147,52,75,127,51,250,236,247,214,247,127,125,250,247,15,160,159,43,250,255,127,244,107,24,158,254,181,126,141,255,74,97,254,111,252,217,175,73,255,253,122,150,33,36,79,241,215,254,181,191,38,127,243,235,240,60,252,92,60,202,251,127,237,175,67,220,255,107,242,127,222,231,187,253,207,233,227,123,191,255,206,175,241,69,49,173,171,166,58,111,211,173,87,119,210,111,63,127,253,60,21,238,74,79,170,197,170,40,233,151,135,227,189,79,199,15,239,239,141,247,14,246,247,127,141,159,32,22,254,245,127,141,223,244,47,58,252,107,254,174,127,144,210,51,191,199,159,243,103,255,246,191,199,159,248,143,172,63,195,231,191,1,125,254,139,127,171,229,239,73,224,233,243,127,251,247,64,63,248,252,199,232,115,34,245,49,218,27,124,127,23,34,57,201,194,31,68,20,253,147,126,23,33,255,159,68,202,227,47,50,191,255,154,244,251,19,158,130,223,148,218,252,103,244,221,127,246,23,253,186,252,247,111,64,127,255,223,244,255,175,244,239,95,31,223,243,103,254,223,4,132,191,255,53,245,239,95,95,82,72,191,214,175,245,107,252,154,127,16,209,224,15,146,223,127,45,250,253,43,253,253,215,161,223,255,26,188,199,239,252,90,191,198,127,246,7,255,250,212,199,143,51,62,191,1,242,80,127,209,239,205,34,6,120,255,247,31,12,152,191,38,253,255,215,97,177,146,62,126,3,106,243,27,40,94,191,150,237,247,175,177,120,252,154,140,151,188,243,107,7,239,252,53,127,17,62,251,181,164,95,234,11,239,253,223,127,17,113,217,175,69,92,5,156,254,32,249,253,215,162,223,191,210,223,127,29,250,253,175,249,131,124,216,120,207,255,27,255,55,248,255,186,3,248,155,241,10,174,95,113,159,134,70,191,158,71,163,95,207,163,145,79,215,95,203,235,227,215,27,232,227,215,215,239,127,13,133,73,92,200,243,229,62,255,74,63,255,181,58,159,255,53,250,249,175,195,159,155,126,126,157,141,99,249,109,129,23,207,221,19,158,7,225,159,95,83,249,199,208,152,198,199,52,7,188,95,139,96,147,158,254,139,126,204,155,59,180,65,159,220,230,55,48,239,224,51,126,247,215,250,53,126,131,223,128,233,245,127,255,223,191,6,63,70,255,252,26,250,252,107,172,107,254,47,210,63,187,86,255,252,137,191,134,124,134,175,140,254,249,163,232,159,29,126,255,215,97,253,125,64,255,255,246,175,97,237,157,213,43,93,187,240,117,159,203,175,41,247,34,151,191,209,31,68,242,168,242,250,27,19,29,204,239,191,9,209,199,252,254,155,18,31,154,223,127,13,162,159,252,14,89,255,117,189,207,169,221,127,100,62,167,49,254,71,191,166,190,251,235,208,92,9,127,97,222,190,2,205,255,36,145,49,252,141,247,104,46,173,220,225,51,200,172,251,76,244,197,255,13,89,224,207,126,140,117,194,175,249,31,253,26,252,253,127,246,23,201,223,191,22,255,253,235,218,191,127,29,254,251,215,179,127,255,6,252,247,175,79,127,3,47,224,71,109,255,36,51,187,152,191,31,217,154,31,217,154,31,217,154,31,217,154,159,11,91,99,244,207,175,161,207,159,246,155,253,26,106,107,254,188,95,219,232,159,195,223,68,62,3,131,27,253,179,79,159,61,253,53,132,233,127,29,250,247,57,253,252,125,233,255,127,30,127,246,235,240,218,218,95,70,255,255,219,126,13,179,46,232,116,13,84,220,55,241,104,188,104,225,254,91,55,190,241,163,231,71,207,255,191,158,31,141,230,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,207,245,243,117,243,130,200,185,252,123,156,115,249,61,127,79,31,158,230,86,254,32,147,47,148,60,159,252,142,120,223,228,11,145,111,240,243,133,221,188,160,228,89,126,211,63,232,223,163,152,25,57,189,49,183,251,77,255,38,201,223,73,190,143,242,20,127,210,175,147,254,103,132,195,87,127,211,175,195,75,108,148,71,228,191,127,141,191,233,215,66,174,71,242,32,222,231,127,13,125,254,215,68,62,255,191,233,243,255,155,63,215,188,225,31,196,249,32,237,235,215,212,190,126,93,175,47,124,246,235,122,125,105,158,198,251,92,250,234,127,46,125,185,28,229,175,197,125,253,154,157,190,126,189,78,95,191,222,64,95,191,222,64,95,191,94,180,175,95,199,246,197,249,133,95,227,55,160,191,255,239,63,73,199,252,31,73,142,43,204,149,254,154,157,92,233,175,213,201,149,254,218,94,174,244,215,244,114,165,120,126,148,43,253,81,174,244,71,185,210,31,229,74,127,46,114,165,120,252,92,233,115,214,53,239,179,46,39,185,210,131,95,195,174,203,253,172,228,69,191,174,253,85,185,252,131,98,118,86,63,15,236,169,167,227,255,164,142,142,255,147,58,58,254,79,234,232,248,63,41,166,227,255,159,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.cid0))
			{
				this.UseExposureTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid1))
			{
				this.UseFilmApproxTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid2))
			{
				this.UseGammaCorrection = value;
				return true;
			}
			if ((id == RgbmDecode.cid3))
			{
				this.UseInverseOneTonemapping = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.sid0))
			{
				this.BloomSampler = value;
				return true;
			}
			if ((id == RgbmDecode.sid1))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			if ((id == RgbmDecode.tid1))
			{
				this.BloomTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'RgbmDecodeBloomPass' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 21 instruction slots used (1 texture, 20 arithmetic), 3 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "47301628-bcee-4c1a-8aea-2eb652e288f0")]
	public sealed class RgbmDecodeBloomPass : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecodeBloomPass' shader</summary>
		public RgbmDecodeBloomPass()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private static void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecodeBloomPass.gd = state.DeviceUniqueIndex;
			RgbmDecodeBloomPass.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecodeBloomPass.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecodeBloomPass.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecodeBloomPass.sid0 = state.GetNameUniqueID("InputSampler");
			RgbmDecodeBloomPass.tid0 = state.GetNameUniqueID("InputTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void Begin(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecodeBloomPass.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecodeBloomPass.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecodeBloomPass.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecodeBloomPass.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecodeBloomPass.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecodeBloomPass.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecodeBloomPass.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecodeBloomPass.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecodeBloomPass.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecodeBloomPass.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				RgbmDecodeBloomPass.gdInit(state);
			}
			RgbmDecodeBloomPass.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecodeBloomPass.fx, RgbmDecodeBloomPass.fxb, 9, 25);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecodeBloomPass.vin[i]));
			index = RgbmDecodeBloomPass.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupport(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[3];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,184,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,184,135,0,1,3,131,0,1,4,131,0,1,1,179,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,96,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,200,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,236,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,196,131,0,0,1,224,138,0,0,1,14,1,108,1,0,1,0,1,14,1,136,138,0,0,1,14,1,212,1,0,1,0,1,14,1,232,138,0,0,1,15,1,172,135,0,0,1,3,1,0,1,0,1,15,1,40,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,252,1,0,1,0,1,14,1,248,131,0,0,1,93,134,0,0,1,15,1,20,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,92,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,48,1,0,1,0,1,15,1,44,131,0,0,1,93,134,0,0,1,15,1,72,1,0,1,0,1,15,1,68,1,0,1,0,1,15,1,156,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,112,1,0,1,0,1,15,1,108,131,0,0,1,93,134,0,0,1,15,1,136,1,0,1,0,1,15,1,132,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,151,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {64,44,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,190,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,191,75,191,195,223,95,183,31,134,187,2,220,147,223,221,226,255,155,200,119,255,214,175,241,245,225,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,175,247,252,250,191,6,199,127,19,4,128,38,78,251,167,52,78,251,38,227,76,237,167,64,63,191,209,175,33,112,255,59,237,39,104,67,49,99,179,35,125,254,102,218,206,127,126,45,250,63,194,226,238,231,130,227,255,253,127,99,12,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,248,251,215,253,53,226,239,35,158,141,189,255,27,210,255,207,150,77,155,45,167,12,1,99,120,61,207,102,121,45,176,128,87,242,107,200,231,120,55,245,222,45,233,255,127,148,247,247,63,70,255,255,143,252,239,137,62,127,148,71,163,127,141,126,255,175,188,191,255,38,47,63,176,165,191,131,62,127,138,126,255,127,80,219,255,141,254,255,167,234,223,191,21,181,249,205,232,255,127,64,164,237,62,125,182,243,155,186,182,207,233,247,111,211,255,255,162,72,219,150,62,91,121,109,255,56,250,253,143,210,118,191,158,252,224,246,255,55,61,134,119,254,0,124,240,107,255,223,255,247,255,245,127,31,252,26,39,111,142,159,252,78,244,231,95,251,107,200,103,248,234,119,226,86,191,70,250,151,209,63,79,245,253,95,155,254,125,78,63,127,95,244,241,107,24,254,252,181,126,141,63,77,97,74,126,225,175,253,107,127,77,250,230,215,36,234,254,218,250,249,251,62,202,115,127,237,175,67,156,249,107,242,127,242,208,199,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,51,156,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,63,65,83,255,107,255,26,191,233,95,244,231,252,217,127,246,209,159,243,103,255,246,191,199,63,255,207,253,115,159,1,30,62,255,117,232,243,95,227,215,248,131,254,65,191,255,223,133,134,75,188,242,7,209,8,255,164,223,69,134,254,39,253,26,191,193,111,250,23,61,225,33,255,166,244,249,127,70,127,255,103,127,209,175,203,127,255,6,244,247,255,77,255,255,74,255,254,245,241,61,127,230,255,77,64,254,162,223,192,182,255,207,254,160,95,251,215,248,207,254,34,250,236,215,166,209,113,219,95,243,215,248,234,47,254,245,184,47,129,215,133,101,190,251,53,109,63,248,253,215,224,239,126,67,15,206,175,253,107,252,223,127,209,175,201,109,127,59,254,222,244,129,223,137,223,229,221,223,64,190,251,181,127,141,191,230,47,250,245,185,45,222,253,53,184,143,95,83,127,119,159,127,165,191,255,90,244,251,95,163,109,126,29,254,92,126,255,181,184,189,192,5,190,24,203,127,246,7,253,223,255,247,175,193,143,225,187,95,67,159,127,13,147,249,107,255,95,196,119,187,150,239,254,196,95,67,62,195,87,134,239,254,40,250,103,135,223,255,117,88,78,15,232,255,223,254,53,172,206,178,60,214,149,255,175,251,92,126,77,222,18,254,248,141,254,32,226,11,229,149,223,152,198,111,126,255,77,136,254,230,247,223,148,232,109,126,199,92,200,239,191,46,211,206,125,78,237,254,35,243,57,141,241,63,250,53,245,221,95,135,120,238,215,229,185,4,255,125,5,26,255,73,52,246,95,71,254,198,123,255,217,159,4,186,187,207,254,26,234,219,125,38,124,11,254,144,207,126,140,121,232,215,252,143,126,13,254,254,63,251,139,228,239,95,139,255,254,117,237,223,191,14,255,253,235,217,191,127,3,254,251,215,167,191,129,23,240,163,182,127,146,153,93,204,223,143,116,204,143,116,204,15,91,199,24,190,251,53,244,249,211,126,179,95,67,117,204,159,247,107,27,190,59,252,77,228,51,159,239,246,127,19,199,119,191,142,199,119,127,30,127,246,235,112,94,28,188,249,183,253,26,38,39,239,248,238,155,210,59,234,235,89,184,255,214,141,111,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,190,169,231,71,112,126,244,252,232,249,209,243,163,231,71,15,158,175,155,15,66,188,255,239,113,188,255,123,254,158,62,60,47,191,99,243,62,38,79,36,49,180,252,254,107,113,204,60,156,15,146,184,252,55,253,131,254,61,138,179,145,203,25,75,126,232,111,146,188,141,228,121,126,173,95,227,171,63,233,215,73,255,51,194,225,171,191,233,215,225,180,55,229,143,248,239,95,227,111,250,181,144,103,144,156,144,247,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,53,95,244,7,113,94,66,251,250,53,181,175,95,215,235,11,159,253,186,94,95,154,127,242,62,151,190,250,159,75,95,46,55,245,107,113,95,191,102,167,175,95,175,211,215,175,55,208,215,175,55,208,215,175,23,237,235,215,177,125,73,94,227,55,160,191,255,239,63,201,207,145,253,26,157,28,217,175,217,201,145,253,90,157,28,25,114,47,38,71,246,107,122,57,50,60,63,202,145,253,40,71,246,195,206,145,225,241,115,100,207,49,153,239,149,135,151,28,217,193,175,97,243,240,63,43,249,176,175,171,119,55,233,87,253,60,208,163,158,108,255,73,29,217,254,147,58,178,253,39,117,100,251,79,138,201,246,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.sid0))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			return false;
		}
	}
}
