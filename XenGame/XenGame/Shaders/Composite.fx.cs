// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Composite.fx
// Namespace = GameClient.Shaders

namespace GameClient.Shaders
{
	
	/// <summary><para>Technique 'RgbmDecode' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 41 instruction slots used (2 texture, 39 arithmetic), 7 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "5b4ea50c-b2cb-4045-9622-2f93479d1c42")]
	public sealed class RgbmDecode : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecode' shader</summary>
		public RgbmDecode()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(197));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecode.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			RgbmDecode.cid0 = state.GetNameUniqueID("UseExposureTonemapping");
			RgbmDecode.cid1 = state.GetNameUniqueID("UseFilmApproxTonemapping");
			RgbmDecode.cid2 = state.GetNameUniqueID("UseGammaCorrection");
			RgbmDecode.cid3 = state.GetNameUniqueID("UseInverseOneTonemapping");
			RgbmDecode.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecode.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecode.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecode.sid0 = state.GetNameUniqueID("BloomSampler");
			RgbmDecode.sid1 = state.GetNameUniqueID("InputSampler");
			RgbmDecode.tid0 = state.GetNameUniqueID("InputTexture");
			RgbmDecode.tid1 = state.GetNameUniqueID("BloomTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecode.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecode.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecode.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecode.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecode.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecode.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecode.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecode.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecode.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecode.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			RgbmDecode.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecode.fx, RgbmDecode.fxb, 9, 47);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecode.vin[i]));
			index = RgbmDecode.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'UseExposureTonemapping'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'bool UseExposureTonemapping'</summary>
		public float UseExposureTonemapping
		{
			set
			{
				this.preg[3] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseFilmApproxTonemapping'</summary>
		private static int cid1;
		/// <summary>Assign the shader value 'bool UseFilmApproxTonemapping'</summary>
		public float UseFilmApproxTonemapping
		{
			set
			{
				this.preg[5] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseGammaCorrection'</summary>
		private static int cid2;
		/// <summary>Assign the shader value 'bool UseGammaCorrection'</summary>
		public float UseGammaCorrection
		{
			set
			{
				this.preg[4] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'UseInverseOneTonemapping'</summary>
		private static int cid3;
		/// <summary>Assign the shader value 'bool UseInverseOneTonemapping'</summary>
		public float UseInverseOneTonemapping
		{
			set
			{
				this.preg[6] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BloomSampler'</summary>
		public Xen.Graphics.TextureSamplerState BloomSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D BloomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D BloomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BloomSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D BloomTexture'</summary>
		static int tid1;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[7];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,28,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,248,135,0,1,7,131,0,1,4,131,0,1,1,229,0,0,142,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,160,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,8,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,44,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,80,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,1,1,4,1,0,1,0,1,1,1,32,138,0,0,1,14,1,172,1,0,1,0,1,14,1,200,138,0,0,1,15,1,20,1,0,1,0,1,15,1,40,138,0,0,1,15,1,56,1,0,1,0,1,15,1,76,138,0,0,1,16,1,16,135,0,0,1,3,1,0,1,0,1,15,1,140,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,96,1,0,1,0,1,15,1,92,131,0,0,1,93,134,0,0,1,15,1,120,1,0,1,0,1,15,1,116,1,0,1,0,1,15,1,192,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,148,1,0,1,0,1,15,1,144,131,0,0,1,93,134,0,0,1,15,1,172,1,0,1,0,1,15,1,168,1,0,1,0,1,16,136,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,212,1,0,1,0,1,15,1,208,131,0,0,1,93,134,0,0,1,15,1,236,1,0,1,0,1,15,1,232,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,147,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,192,1,16,1,42,1,17,131,0,0,1,1,1,136,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,1,1,60,1,0,1,0,1,1,1,100,138,0,0,1,1,1,20,131,0,0,1,28,1,0,1,0,1,1,1,6,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,255,131,0,0,1,88,1,0,1,2,131,0,0,1,7,133,0,0,1,96,131,0,0,1,112,131,0,0,1,224,1,0,1,3,131,0,0,1,1,133,0,0,1,232,135,0,0,1,248,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,232,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,7,229,0,0,145,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,16,1,0,1,3,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,61,1,117,1,194,1,143,1,65,1,32,1,0,1,0,1,63,1,184,1,170,1,59,1,63,1,217,1,153,1,154,1,63,131,0,0,1,63,1,128,1,0,1,0,1,63,1,25,1,153,1,154,1,64,1,110,1,20,1,123,1,0,1,9,1,64,1,6,1,80,1,10,1,16,1,0,1,86,133,0,0,1,16,1,15,1,96,1,16,1,16,1,0,1,86,133,0,0,1,48,1,22,1,16,1,25,1,86,1,0,1,16,133,0,0,1,80,1,26,1,16,1,31,1,86,1,0,1,16,133,0,0,1,48,1,32,1,16,1,35,1,86,1,0,1,18,1,0,1,0,1,1,132,0,0,1,80,1,36,1,196,1,0,1,34,131,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,172,1,64,133,0,0,1,131,1,194,131,0,0,1,116,1,7,1,0,1,129,1,0,1,198,1,192,1,108,1,193,1,0,1,1,1,3,1,200,1,7,1,0,1,1,1,0,1,192,1,108,1,0,1,161,1,1,1,2,1,0,1,200,1,7,1,0,1,1,1,28,1,192,1,198,1,0,1,161,1,1,1,254,1,0,1,56,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,56,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,56,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,1,1,200,1,7,1,0,1,1,1,28,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,5,1,200,1,7,1,0,1,2,1,24,1,192,1,27,1,108,1,139,1,1,1,255,1,255,1,200,1,7,1,0,1,3,1,24,1,192,1,198,1,0,1,161,1,1,1,255,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,27,1,27,1,139,1,1,1,255,1,254,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,108,1,203,1,3,1,1,1,254,1,76,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,1,1,76,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,1,1,76,1,71,1,1,1,2,1,24,1,192,1,192,1,198,1,225,1,3,1,2,1,1,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,1,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,6,1,200,1,7,1,0,1,2,1,24,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,76,1,16,1,2,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,2,1,76,1,32,1,2,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,2,1,76,1,64,1,2,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,2,1,200,1,7,1,0,1,1,1,24,1,192,1,192,1,0,1,225,1,2,1,1,1,0,1,116,1,0,1,0,1,128,131,0,0,1,108,1,194,1,0,1,0,1,4,1,160,1,16,1,1,1,0,1,24,1,0,1,0,1,108,1,226,1,0,1,0,1,129,1,160,1,32,1,1,1,0,1,24,1,0,1,0,1,177,1,226,1,0,1,0,1,129,1,160,1,64,1,1,1,0,1,24,1,0,1,0,1,198,1,226,1,0,1,0,1,129,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,201,1,7,1,0,1,0,1,4,1,192,1,177,1,0,1,160,1,1,1,255,1,0,1,200,1,7,1,0,1,2,1,0,1,192,1,108,1,0,1,161,1,2,1,1,1,0,1,200,1,8,131,0,0,1,27,1,177,1,177,1,139,1,2,1,254,1,255,1,200,1,7,1,0,1,2,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,143,1,192,1,0,1,0,131,192,0,1,235,1,2,1,0,1,1,148,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {204,50,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,210,223,76,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,255,77,191,251,245,127,141,111,174,159,247,125,24,175,85,136,215,95,244,155,200,119,255,214,175,241,115,135,215,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,124,125,16,35,82,252,56,65,160,102,226,180,223,224,55,149,239,190,201,56,85,251,41,168,159,223,225,55,250,53,4,238,72,251,9,218,80,204,216,236,252,26,191,134,105,243,114,168,205,174,224,245,155,105,59,255,249,181,232,255,120,173,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,241,107,60,251,53,126,141,95,119,224,125,196,188,177,247,127,67,250,255,217,178,105,179,229,20,16,198,24,195,235,121,54,203,107,121,231,215,212,54,38,94,79,189,119,75,250,255,31,229,253,253,235,80,227,212,155,144,191,142,98,234,127,74,227,106,60,191,21,33,176,229,209,236,128,126,127,238,253,253,91,253,102,242,19,52,248,227,244,115,208,235,79,209,239,255,0,250,236,247,165,255,255,169,250,247,59,250,189,165,255,255,99,145,182,127,22,125,246,167,121,109,255,38,250,253,175,163,255,255,58,191,89,191,237,191,69,159,255,107,94,219,255,137,126,255,239,20,230,175,39,63,184,253,255,77,143,25,222,28,196,248,181,255,239,255,251,255,250,191,95,255,26,39,111,142,159,252,78,244,231,111,251,107,202,103,192,255,119,146,102,233,111,70,159,253,222,250,254,175,79,255,254,1,244,115,69,255,255,143,126,13,195,211,191,214,175,241,95,41,204,255,141,63,251,53,233,191,95,207,50,132,228,41,254,218,191,246,215,228,111,126,29,158,135,159,139,71,121,255,175,253,117,136,251,127,77,254,207,251,124,183,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,93,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,19,196,194,191,254,175,241,155,254,69,135,127,205,223,245,15,254,26,191,198,31,244,123,252,57,127,246,111,255,123,252,137,255,200,250,51,124,254,27,208,231,191,248,183,90,254,158,4,158,62,255,183,127,15,244,131,207,127,140,62,39,82,31,163,189,193,247,119,33,146,147,44,252,65,68,209,63,233,119,17,242,255,73,164,60,254,34,243,251,175,73,191,63,225,41,248,77,169,205,127,70,223,253,103,127,209,175,203,127,255,6,244,247,255,77,255,255,74,255,254,245,241,61,127,230,255,77,64,248,251,95,83,255,254,245,37,133,244,107,253,90,191,198,175,249,7,17,13,254,32,249,253,215,162,223,191,210,223,127,29,250,253,175,193,123,252,206,175,245,107,252,103,127,240,175,79,125,252,56,227,243,27,252,65,4,248,47,250,189,89,196,0,239,255,254,131,1,243,215,164,255,255,58,44,86,210,199,111,64,109,126,3,197,235,215,178,253,254,53,22,143,95,147,241,146,119,126,237,224,157,191,230,47,194,103,191,150,244,75,125,225,189,255,251,47,34,46,251,181,136,171,128,211,31,36,191,255,90,244,251,87,250,251,175,67,191,255,53,127,144,15,27,239,249,127,227,255,6,255,95,119,0,127,51,94,193,245,43,238,211,208,232,215,243,104,244,235,121,52,242,233,250,107,121,125,252,122,3,125,252,250,250,253,175,161,48,137,11,121,190,220,231,95,233,231,191,86,231,243,191,70,63,255,117,248,115,211,207,175,179,113,44,191,45,240,226,185,123,194,243,32,252,243,107,42,255,24,26,211,248,152,230,128,247,107,17,108,210,211,127,209,143,121,115,135,54,232,147,219,252,6,230,29,124,198,239,254,90,191,198,111,240,27,48,189,254,239,255,251,215,224,199,232,159,95,67,159,127,141,117,205,255,69,250,103,215,234,159,63,241,215,144,207,240,149,209,63,127,20,253,179,195,239,255,58,172,191,15,232,255,223,254,53,172,189,179,122,165,107,23,190,238,115,249,53,229,94,228,242,55,250,131,72,30,85,94,127,99,162,131,249,253,55,33,250,152,223,127,83,226,67,243,251,175,65,244,147,223,33,235,191,174,247,57,181,251,143,204,231,52,198,255,232,215,212,119,127,29,154,43,225,47,204,219,87,160,249,159,36,50,134,191,241,30,205,165,149,59,124,6,153,117,159,137,190,248,191,33,11,252,217,143,177,78,248,53,255,163,95,131,191,255,207,254,34,249,251,215,226,191,127,93,251,247,175,195,127,255,122,246,239,223,128,255,254,245,233,111,224,5,252,168,237,159,100,102,23,243,247,35,91,243,35,91,243,35,91,243,35,91,243,115,97,107,140,254,249,53,244,249,211,126,179,95,67,109,205,159,247,107,27,253,115,248,155,200,103,96,112,163,127,246,233,179,167,191,134,48,253,175,67,255,62,167,159,191,47,253,255,207,227,207,126,29,94,91,251,203,232,255,127,219,175,97,214,5,157,174,129,138,251,38,30,141,23,45,220,127,235,198,55,126,244,252,232,249,255,215,243,163,209,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,185,126,190,110,94,16,57,151,127,143,115,46,191,231,239,233,195,211,220,202,31,100,242,133,146,231,147,223,17,239,155,124,33,242,13,126,190,176,155,23,148,60,203,111,250,7,253,123,20,51,35,167,55,230,118,191,233,223,36,249,59,201,247,81,158,226,79,250,117,210,255,140,112,248,234,111,250,117,120,137,141,242,136,252,247,175,241,55,253,90,200,245,72,30,196,251,252,175,161,207,255,154,200,231,255,55,125,254,127,243,231,154,55,252,131,56,31,164,125,253,154,218,215,175,235,245,133,207,126,93,175,47,205,211,120,159,75,95,253,207,165,47,151,163,252,181,184,175,95,179,211,215,175,215,233,235,215,27,232,235,215,27,232,235,215,139,246,245,235,216,190,56,191,240,107,252,6,244,247,255,253,39,233,152,255,35,201,113,133,185,210,95,179,147,43,253,181,58,185,210,95,219,203,149,254,154,94,174,20,207,143,114,165,63,202,149,254,40,87,250,163,92,233,207,69,174,20,143,159,43,125,206,186,230,125,214,229,36,87,122,240,107,216,117,185,159,149,188,232,215,181,191,42,151,127,80,204,206,234,231,129,61,245,116,252,159,212,209,241,127,82,71,199,255,73,29,29,255,39,197,116,252,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.cid0))
			{
				this.UseExposureTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid1))
			{
				this.UseFilmApproxTonemapping = value;
				return true;
			}
			if ((id == RgbmDecode.cid2))
			{
				this.UseGammaCorrection = value;
				return true;
			}
			if ((id == RgbmDecode.cid3))
			{
				this.UseInverseOneTonemapping = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.sid0))
			{
				this.BloomSampler = value;
				return true;
			}
			if ((id == RgbmDecode.sid1))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecode.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecode.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			if ((id == RgbmDecode.tid1))
			{
				this.BloomTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'RgbmDecodeBloomPass' generated from file 'Composite.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 21 instruction slots used (1 texture, 20 arithmetic), 3 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "5b4ea50c-b2cb-4045-9622-2f93479d1c42")]
	public sealed class RgbmDecodeBloomPass : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'RgbmDecodeBloomPass' shader</summary>
		public RgbmDecodeBloomPass()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.gc0 = -1;
			this.gc1 = -1;
			this.gc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			RgbmDecodeBloomPass.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			RgbmDecodeBloomPass.gid0 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("BloomScaleThreshold");
			RgbmDecodeBloomPass.gid1 = state.GetGlobalUniqueID<float>("LensExposure");
			RgbmDecodeBloomPass.gid2 = state.GetGlobalUniqueID<Microsoft.Xna.Framework.Vector2>("RgbmImageRenderScale");
			RgbmDecodeBloomPass.sid0 = state.GetNameUniqueID("InputSampler");
			RgbmDecodeBloomPass.tid0 = state.GetNameUniqueID("InputTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != RgbmDecodeBloomPass.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Set the value for global 'BloomScaleThreshold'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[1], RgbmDecodeBloomPass.gid0, ref this.gc0));
			// Set the value for global 'LensExposure'
			this.preg_change = (this.preg_change | state.SetGlobalSingle(ref this.preg[2], RgbmDecodeBloomPass.gid1, ref this.gc1));
			// Set the value for global 'RgbmImageRenderScale'
			this.preg_change = (this.preg_change | state.SetGlobalVector2(ref this.preg[0], RgbmDecodeBloomPass.gid2, ref this.gc2));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				RgbmDecodeBloomPass.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				RgbmDecodeBloomPass.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(RgbmDecodeBloomPass.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					RgbmDecodeBloomPass.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref RgbmDecodeBloomPass.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((RgbmDecodeBloomPass.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			RgbmDecodeBloomPass.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out RgbmDecodeBloomPass.fx, RgbmDecodeBloomPass.fxb, 9, 25);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(RgbmDecodeBloomPass.vin[i]));
			index = RgbmDecodeBloomPass.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>TypeID for global attribute 'float2 BloomScaleThreshold'</summary>
		private static int gid0;
		/// <summary>Change ID for global attribute 'float2 BloomScaleThreshold'</summary>
		private int gc0;
		/// <summary>TypeID for global attribute 'float LensExposure'</summary>
		private static int gid1;
		/// <summary>Change ID for global attribute 'float LensExposure'</summary>
		private int gc1;
		/// <summary>TypeID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private static int gid2;
		/// <summary>Change ID for global attribute 'float2 RgbmImageRenderScale'</summary>
		private int gc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D InputSampler'</summary>
		public Xen.Graphics.TextureSamplerState InputSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D InputTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D InputTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D InputSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'Texture2D InputTexture'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[3];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,184,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,184,135,0,1,3,131,0,1,4,131,0,1,1,179,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,96,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,200,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,236,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,196,131,0,0,1,224,138,0,0,1,14,1,108,1,0,1,0,1,14,1,136,138,0,0,1,14,1,212,1,0,1,0,1,14,1,232,138,0,0,1,15,1,172,135,0,0,1,3,1,0,1,0,1,15,1,40,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,252,1,0,1,0,1,14,1,248,131,0,0,1,93,134,0,0,1,15,1,20,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,92,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,48,1,0,1,0,1,15,1,44,131,0,0,1,93,134,0,0,1,15,1,72,1,0,1,0,1,15,1,68,1,0,1,0,1,15,1,156,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,112,1,0,1,0,1,15,1,108,131,0,0,1,93,134,0,0,1,15,1,136,1,0,1,0,1,15,1,132,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,150,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,44,1,16,1,42,1,17,131,0,0,1,1,1,44,1,0,1,0,1,1,136,0,0,1,36,131,0,0,1,224,1,0,1,0,1,1,1,8,139,0,0,1,184,131,0,0,1,28,131,0,0,1,171,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,164,131,0,0,1,68,1,0,1,2,131,0,0,1,3,133,0,0,1,76,131,0,0,1,92,131,0,0,1,140,1,0,1,3,131,0,0,1,1,133,0,0,1,148,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,192,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,160,0,0,1,62,1,153,1,153,1,154,1,63,1,25,1,153,1,154,1,61,1,204,1,204,1,205,132,0,0,1,189,1,204,1,204,1,205,141,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,3,1,96,1,9,1,18,1,0,1,34,131,0,0,1,16,1,8,1,0,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,168,1,16,1,1,132,0,0,1,131,1,194,131,0,0,1,200,1,7,131,0,0,1,108,1,192,1,0,1,225,1,1,1,0,1,0,1,200,1,14,1,0,1,2,1,0,1,252,1,108,1,0,1,161,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,161,1,0,1,254,1,0,1,76,1,33,131,0,0,1,190,1,108,1,177,1,144,1,0,1,2,1,1,1,76,1,65,1,0,1,2,1,2,1,108,1,177,1,108,1,160,1,0,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,248,1,197,1,0,1,225,1,2,1,0,1,0,1,160,1,16,133,0,0,1,198,1,226,1,0,1,0,1,129,1,161,1,40,131,0,0,1,108,1,177,1,27,1,225,1,2,1,0,1,129,1,160,1,65,1,0,1,1,1,0,1,108,1,27,1,177,1,162,1,1,1,254,1,129,1,201,1,8,1,128,1,0,1,0,1,108,1,198,1,108,1,139,1,1,1,254,1,255,1,200,1,7,1,128,1,0,1,0,1,27,1,192,1,0,1,225,151,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {64,44,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,190,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,191,198,31,100,250,249,187,244,59,252,253,117,251,97,184,171,16,238,31,240,155,200,119,255,214,175,241,245,225,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,175,247,252,250,191,6,199,127,19,4,106,38,78,251,167,52,78,251,38,227,76,237,167,160,126,126,173,223,232,215,16,184,255,157,246,19,180,161,152,177,217,145,62,127,51,109,231,63,191,22,253,31,97,113,247,115,193,241,209,239,138,49,252,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,224,239,95,247,215,136,191,143,120,54,246,254,111,72,255,63,91,54,109,182,156,50,4,140,225,245,60,155,229,181,192,2,94,201,175,33,159,227,221,212,123,183,164,255,255,81,222,223,255,24,253,255,63,242,191,39,250,252,81,30,141,254,53,250,253,191,242,254,254,155,188,252,192,150,254,14,250,252,41,250,253,255,65,109,255,55,250,255,159,170,127,255,86,212,230,55,163,255,255,1,145,182,251,244,217,206,111,234,218,62,167,223,191,77,255,255,139,34,109,91,250,108,229,181,253,227,232,247,63,74,219,253,122,242,131,219,255,223,244,24,222,249,3,240,193,175,253,127,255,223,255,215,255,125,240,107,156,188,57,126,242,59,209,159,127,237,175,33,159,225,171,223,137,91,253,26,233,95,70,255,60,213,247,127,109,250,247,57,253,252,125,209,199,175,97,248,243,215,250,53,254,52,133,41,249,133,191,246,175,253,53,233,155,95,147,168,251,107,235,231,239,251,40,207,253,181,191,206,175,241,27,17,156,95,147,231,12,15,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,50,195,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,19,52,245,191,246,175,241,155,254,69,127,206,159,253,103,31,253,57,127,246,111,255,123,252,243,255,220,63,247,25,224,225,243,95,135,62,167,148,200,63,232,247,255,187,208,112,137,87,254,32,26,225,159,244,187,200,208,255,164,95,227,55,248,77,255,162,39,60,228,223,148,62,255,207,232,239,255,236,47,250,117,249,239,223,128,254,254,191,233,255,95,233,223,191,62,190,231,207,252,191,9,200,95,244,27,216,246,255,25,229,96,254,179,191,136,62,251,181,105,116,220,246,215,252,53,190,250,139,127,61,238,75,224,117,97,153,239,126,77,219,15,126,255,53,248,187,223,208,131,243,107,255,26,255,247,95,244,107,114,219,223,142,191,55,125,224,119,226,119,121,247,55,144,239,126,237,95,227,175,249,139,126,125,110,139,119,127,13,238,227,215,212,223,221,231,95,233,239,191,22,253,254,215,104,155,95,135,63,151,223,127,45,110,47,112,129,47,198,242,159,253,65,255,247,255,253,107,240,99,248,238,215,208,231,95,195,100,254,218,255,23,241,221,174,229,187,63,241,215,144,207,240,149,225,187,63,138,254,217,225,247,127,29,150,211,3,250,255,183,127,13,171,179,44,143,117,229,255,235,62,151,95,147,183,132,63,126,163,63,136,248,66,121,229,55,166,241,155,223,127,19,162,191,249,253,55,37,122,155,223,49,23,242,251,175,203,180,115,159,83,187,255,200,124,78,99,252,143,126,77,125,247,215,33,158,251,117,121,46,193,127,95,129,198,127,18,141,253,215,145,191,241,222,127,246,39,129,238,238,179,191,134,250,118,159,9,223,130,63,228,179,31,99,30,250,53,255,163,95,131,191,255,207,254,34,249,251,215,226,191,127,93,251,247,175,195,127,255,122,246,239,223,128,255,254,245,233,111,224,5,252,168,237,159,100,102,23,243,247,35,29,243,35,29,243,195,214,49,134,239,126,13,125,254,180,223,236,215,80,29,243,231,253,218,134,239,14,127,19,249,204,231,187,253,223,196,241,221,175,227,241,221,159,199,159,253,58,156,23,7,111,254,109,191,134,201,201,59,190,251,166,244,142,250,122,22,238,191,117,227,27,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,234,249,17,156,31,61,63,122,126,244,252,232,249,209,131,231,235,230,131,16,239,255,123,28,239,255,158,191,167,15,207,203,239,216,188,143,201,19,73,12,45,191,255,90,28,51,15,231,131,36,46,255,77,255,160,127,143,226,108,228,114,198,146,31,250,155,36,111,35,121,158,95,235,215,248,234,79,250,117,210,255,140,112,248,234,111,250,117,56,237,77,249,35,254,251,215,248,155,126,45,228,25,36,39,228,125,254,215,208,231,127,77,228,243,255,155,62,255,191,249,115,205,23,253,65,156,151,208,190,126,77,237,235,215,245,250,194,103,191,174,215,151,230,159,188,207,165,175,254,231,210,151,203,77,253,90,220,215,175,217,233,235,215,235,244,245,235,13,244,245,235,13,244,245,235,69,251,250,117,108,95,146,215,248,13,232,239,255,251,79,242,115,100,191,70,39,71,246,107,118,114,100,191,86,39,71,134,220,139,201,145,253,154,94,142,12,207,143,114,100,63,202,145,253,176,115,100,120,252,28,217,115,76,230,123,229,225,37,71,118,240,107,216,60,252,207,74,62,236,235,234,221,77,250,85,63,15,244,168,39,219,127,82,71,182,255,164,142,108,255,73,29,217,254,147,98,178,253,255,4,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.sid0))
			{
				this.InputSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((RgbmDecodeBloomPass.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == RgbmDecodeBloomPass.tid0))
			{
				this.InputTexture = value;
				return true;
			}
			return false;
		}
	}
}
